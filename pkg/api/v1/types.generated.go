/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [19]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq82[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq82[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(19)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.Cinder == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.CephFS == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.Flocker == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.FC == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr82 || yy2arr82 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AzureFile == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr82 || yy2arr82 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym104 := z.DecBinary()
	_ = yym104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct105 := r.ContainerType()
		if yyct105 == codecSelferValueTypeMap1234 {
			yyl105 := r.ReadMapStart()
			if yyl105 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl105, d)
			}
		} else if yyct105 == codecSelferValueTypeArray1234 {
			yyl105 := r.ReadArrayStart()
			if yyl105 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys106Slc
	var yyhl106 bool = l >= 0
	for yyj106 := 0; ; yyj106++ {
		if yyhl106 {
			if yyj106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys106Slc = r.DecodeBytes(yys106Slc, true, true)
		yys106 := string(yys106Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys106 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys106)
		} // end switch yys106
	} // end for yyj106
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj126 int
	var yyb126 bool
	var yyhl126 bool = l >= 0
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj126++
		if yyhl126 {
			yyb126 = yyj126 > l
		} else {
			yyb126 = r.CheckBreak()
		}
		if yyb126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym146 := z.EncBinary()
		_ = yym146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep147 := !z.EncBinary()
			yy2arr147 := z.EncBasicHandle().StructToArray
			var yyq147 [18]bool
			_, _, _ = yysep147, yyq147, yy2arr147
			const yyr147 bool = false
			yyq147[0] = x.HostPath != nil
			yyq147[1] = x.EmptyDir != nil
			yyq147[2] = x.GCEPersistentDisk != nil
			yyq147[3] = x.AWSElasticBlockStore != nil
			yyq147[4] = x.GitRepo != nil
			yyq147[5] = x.Secret != nil
			yyq147[6] = x.NFS != nil
			yyq147[7] = x.ISCSI != nil
			yyq147[8] = x.Glusterfs != nil
			yyq147[9] = x.PersistentVolumeClaim != nil
			yyq147[10] = x.RBD != nil
			yyq147[11] = x.FlexVolume != nil
			yyq147[12] = x.Cinder != nil
			yyq147[13] = x.CephFS != nil
			yyq147[14] = x.Flocker != nil
			yyq147[15] = x.DownwardAPI != nil
			yyq147[16] = x.FC != nil
			yyq147[17] = x.AzureFile != nil
			var yynn147 int
			if yyr147 || yy2arr147 {
				r.EncodeArrayStart(18)
			} else {
				yynn147 = 0
				for _, b := range yyq147 {
					if b {
						yynn147++
					}
				}
				r.EncodeMapStart(yynn147)
				yynn147 = 0
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym166 := z.DecBinary()
	_ = yym166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct167 := r.ContainerType()
		if yyct167 == codecSelferValueTypeMap1234 {
			yyl167 := r.ReadMapStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl167, d)
			}
		} else if yyct167 == codecSelferValueTypeArray1234 {
			yyl167 := r.ReadArrayStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys168Slc
	var yyhl168 bool = l >= 0
	for yyj168 := 0; ; yyj168++ {
		if yyhl168 {
			if yyj168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys168Slc = r.DecodeBytes(yys168Slc, true, true)
		yys168 := string(yys168Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys168 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys168)
		} // end switch yys168
	} // end for yyj168
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj187 int
	var yyb187 bool
	var yyhl187 bool = l >= 0
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj187++
		if yyhl187 {
			yyb187 = yyj187 > l
		} else {
			yyb187 = r.CheckBreak()
		}
		if yyb187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym206 := z.EncBinary()
		_ = yym206
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep207 := !z.EncBinary()
			yy2arr207 := z.EncBasicHandle().StructToArray
			var yyq207 [2]bool
			_, _, _ = yysep207, yyq207, yy2arr207
			const yyr207 bool = false
			yyq207[1] = x.ReadOnly != false
			var yynn207 int
			if yyr207 || yy2arr207 {
				r.EncodeArrayStart(2)
			} else {
				yynn207 = 1
				for _, b := range yyq207 {
					if b {
						yynn207++
					}
				}
				r.EncodeMapStart(yynn207)
				yynn207 = 0
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym209 := z.EncBinary()
				_ = yym209
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym210 := z.EncBinary()
				_ = yym210
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[1] {
					yym212 := z.EncBinary()
					_ = yym212
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq207[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym213 := z.EncBinary()
					_ = yym213
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym214 := z.DecBinary()
	_ = yym214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct215 := r.ContainerType()
		if yyct215 == codecSelferValueTypeMap1234 {
			yyl215 := r.ReadMapStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl215, d)
			}
		} else if yyct215 == codecSelferValueTypeArray1234 {
			yyl215 := r.ReadArrayStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys216Slc
	var yyhl216 bool = l >= 0
	for yyj216 := 0; ; yyj216++ {
		if yyhl216 {
			if yyj216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys216Slc = r.DecodeBytes(yys216Slc, true, true)
		yys216 := string(yys216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys216 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys216)
		} // end switch yys216
	} // end for yyj216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj219 int
	var yyb219 bool
	var yyhl219 bool = l >= 0
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj219++
		if yyhl219 {
			yyb219 = yyj219 > l
		} else {
			yyb219 = r.CheckBreak()
		}
		if yyb219 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj219-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym222 := z.EncBinary()
		_ = yym222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep223 := !z.EncBinary()
			yy2arr223 := z.EncBasicHandle().StructToArray
			var yyq223 [13]bool
			_, _, _ = yysep223, yyq223, yy2arr223
			const yyr223 bool = false
			yyq223[0] = x.GCEPersistentDisk != nil
			yyq223[1] = x.AWSElasticBlockStore != nil
			yyq223[2] = x.HostPath != nil
			yyq223[3] = x.Glusterfs != nil
			yyq223[4] = x.NFS != nil
			yyq223[5] = x.RBD != nil
			yyq223[6] = x.ISCSI != nil
			yyq223[7] = x.Cinder != nil
			yyq223[8] = x.CephFS != nil
			yyq223[9] = x.FC != nil
			yyq223[10] = x.Flocker != nil
			yyq223[11] = x.FlexVolume != nil
			yyq223[12] = x.AzureFile != nil
			var yynn223 int
			if yyr223 || yy2arr223 {
				r.EncodeArrayStart(13)
			} else {
				yynn223 = 0
				for _, b := range yyq223 {
					if b {
						yynn223++
					}
				}
				r.EncodeMapStart(yynn223)
				yynn223 = 0
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym237 := z.DecBinary()
	_ = yym237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct238 := r.ContainerType()
		if yyct238 == codecSelferValueTypeMap1234 {
			yyl238 := r.ReadMapStart()
			if yyl238 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl238, d)
			}
		} else if yyct238 == codecSelferValueTypeArray1234 {
			yyl238 := r.ReadArrayStart()
			if yyl238 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys239Slc
	var yyhl239 bool = l >= 0
	for yyj239 := 0; ; yyj239++ {
		if yyhl239 {
			if yyj239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys239Slc = r.DecodeBytes(yys239Slc, true, true)
		yys239 := string(yys239Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys239 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys239)
		} // end switch yys239
	} // end for yyj239
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj253 int
	var yyb253 bool
	var yyhl253 bool = l >= 0
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj253++
		if yyhl253 {
			yyb253 = yyj253 > l
		} else {
			yyb253 = r.CheckBreak()
		}
		if yyb253 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj253-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym267 := z.EncBinary()
		_ = yym267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep268 := !z.EncBinary()
			yy2arr268 := z.EncBasicHandle().StructToArray
			var yyq268 [5]bool
			_, _, _ = yysep268, yyq268, yy2arr268
			const yyr268 bool = false
			yyq268[0] = true
			yyq268[1] = true
			yyq268[2] = true
			yyq268[3] = x.Kind != ""
			yyq268[4] = x.APIVersion != ""
			var yynn268 int
			if yyr268 || yy2arr268 {
				r.EncodeArrayStart(5)
			} else {
				yynn268 = 0
				for _, b := range yyq268 {
					if b {
						yynn268++
					}
				}
				r.EncodeMapStart(yynn268)
				yynn268 = 0
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[0] {
					yy270 := &x.ObjectMeta
					yy270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq268[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy271 := &x.ObjectMeta
					yy271.CodecEncodeSelf(e)
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[1] {
					yy273 := &x.Spec
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq268[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy274 := &x.Spec
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[2] {
					yy276 := &x.Status
					yy276.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq268[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy277 := &x.Status
					yy277.CodecEncodeSelf(e)
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[3] {
					yym279 := z.EncBinary()
					_ = yym279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq268[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym280 := z.EncBinary()
					_ = yym280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[4] {
					yym282 := z.EncBinary()
					_ = yym282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq268[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym283 := z.EncBinary()
					_ = yym283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym284 := z.DecBinary()
	_ = yym284
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct285 := r.ContainerType()
		if yyct285 == codecSelferValueTypeMap1234 {
			yyl285 := r.ReadMapStart()
			if yyl285 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl285, d)
			}
		} else if yyct285 == codecSelferValueTypeArray1234 {
			yyl285 := r.ReadArrayStart()
			if yyl285 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl285, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys286Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys286Slc
	var yyhl286 bool = l >= 0
	for yyj286 := 0; ; yyj286++ {
		if yyhl286 {
			if yyj286 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys286Slc = r.DecodeBytes(yys286Slc, true, true)
		yys286 := string(yys286Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys286 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv287 := &x.ObjectMeta
				yyv287.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv288 := &x.Spec
				yyv288.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv289 := &x.Status
				yyv289.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys286)
		} // end switch yys286
	} // end for yyj286
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj292 int
	var yyb292 bool
	var yyhl292 bool = l >= 0
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv293 := &x.ObjectMeta
		yyv293.CodecDecodeSelf(d)
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv294 := &x.Spec
		yyv294.CodecDecodeSelf(d)
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv295 := &x.Status
		yyv295.CodecDecodeSelf(d)
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj292++
		if yyhl292 {
			yyb292 = yyj292 > l
		} else {
			yyb292 = r.CheckBreak()
		}
		if yyb292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym298 := z.EncBinary()
		_ = yym298
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep299 := !z.EncBinary()
			yy2arr299 := z.EncBasicHandle().StructToArray
			var yyq299 [17]bool
			_, _, _ = yysep299, yyq299, yy2arr299
			const yyr299 bool = false
			yyq299[0] = len(x.Capacity) != 0
			yyq299[1] = len(x.AccessModes) != 0
			yyq299[2] = x.ClaimRef != nil
			yyq299[3] = x.PersistentVolumeReclaimPolicy != ""
			yyq299[4] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq299[5] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq299[6] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq299[7] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq299[8] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq299[9] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq299[10] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq299[11] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq299[12] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq299[13] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq299[14] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq299[15] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq299[16] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			var yynn299 int
			if yyr299 || yy2arr299 {
				r.EncodeArrayStart(17)
			} else {
				yynn299 = 0
				for _, b := range yyq299 {
					if b {
						yynn299++
					}
				}
				r.EncodeMapStart(yynn299)
				yynn299 = 0
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq299[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym302 := z.EncBinary()
						_ = yym302
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq299[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym303 := z.EncBinary()
						_ = yym303
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[2] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq299[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[3] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq299[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			var yyn306 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn306 = true
				goto LABEL306
			}
		LABEL306:
			if yyr299 || yy2arr299 {
				if yyn306 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[4] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn306 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn307 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn307 = true
				goto LABEL307
			}
		LABEL307:
			if yyr299 || yy2arr299 {
				if yyn307 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[5] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn307 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn308 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn308 = true
				goto LABEL308
			}
		LABEL308:
			if yyr299 || yy2arr299 {
				if yyn308 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[6] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn308 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn309 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn309 = true
				goto LABEL309
			}
		LABEL309:
			if yyr299 || yy2arr299 {
				if yyn309 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[7] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn309 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn310 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn310 = true
				goto LABEL310
			}
		LABEL310:
			if yyr299 || yy2arr299 {
				if yyn310 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[8] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn310 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn311 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn311 = true
				goto LABEL311
			}
		LABEL311:
			if yyr299 || yy2arr299 {
				if yyn311 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[9] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn311 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn312 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn312 = true
				goto LABEL312
			}
		LABEL312:
			if yyr299 || yy2arr299 {
				if yyn312 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[10] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn312 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn313 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn313 = true
				goto LABEL313
			}
		LABEL313:
			if yyr299 || yy2arr299 {
				if yyn313 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[11] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn313 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn314 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn314 = true
				goto LABEL314
			}
		LABEL314:
			if yyr299 || yy2arr299 {
				if yyn314 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[12] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn314 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn315 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn315 = true
				goto LABEL315
			}
		LABEL315:
			if yyr299 || yy2arr299 {
				if yyn315 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[13] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn315 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn316 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn316 = true
				goto LABEL316
			}
		LABEL316:
			if yyr299 || yy2arr299 {
				if yyn316 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn316 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn317 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn317 = true
				goto LABEL317
			}
		LABEL317:
			if yyr299 || yy2arr299 {
				if yyn317 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[15] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn317 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn318 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn318 = true
				goto LABEL318
			}
		LABEL318:
			if yyr299 || yy2arr299 {
				if yyn318 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[16] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn318 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym319 := z.DecBinary()
	_ = yym319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct320 := r.ContainerType()
		if yyct320 == codecSelferValueTypeMap1234 {
			yyl320 := r.ReadMapStart()
			if yyl320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl320, d)
			}
		} else if yyct320 == codecSelferValueTypeArray1234 {
			yyl320 := r.ReadArrayStart()
			if yyl320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys321Slc
	var yyhl321 bool = l >= 0
	for yyj321 := 0; ; yyj321++ {
		if yyhl321 {
			if yyj321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys321Slc = r.DecodeBytes(yys321Slc, true, true)
		yys321 := string(yys321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys321 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv322 := &x.Capacity
				yyv322.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv323 := &x.AccessModes
				yym324 := z.DecBinary()
				_ = yym324
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv323), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys321)
		} // end switch yys321
	} // end for yyj321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj340 int
	var yyb340 bool
	var yyhl340 bool = l >= 0
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv341 := &x.Capacity
		yyv341.CodecDecodeSelf(d)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv342 := &x.AccessModes
		yym343 := z.DecBinary()
		_ = yym343
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv342), d)
		}
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj340++
		if yyhl340 {
			yyb340 = yyj340 > l
		} else {
			yyb340 = r.CheckBreak()
		}
		if yyb340 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj340-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym359 := z.EncBinary()
	_ = yym359
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym360 := z.DecBinary()
	_ = yym360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym361 := z.EncBinary()
		_ = yym361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep362 := !z.EncBinary()
			yy2arr362 := z.EncBasicHandle().StructToArray
			var yyq362 [3]bool
			_, _, _ = yysep362, yyq362, yy2arr362
			const yyr362 bool = false
			yyq362[0] = x.Phase != ""
			yyq362[1] = x.Message != ""
			yyq362[2] = x.Reason != ""
			var yynn362 int
			if yyr362 || yy2arr362 {
				r.EncodeArrayStart(3)
			} else {
				yynn362 = 0
				for _, b := range yyq362 {
					if b {
						yynn362++
					}
				}
				r.EncodeMapStart(yynn362)
				yynn362 = 0
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq362[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq362[1] {
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq362[2] {
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym370 := z.DecBinary()
	_ = yym370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct371 := r.ContainerType()
		if yyct371 == codecSelferValueTypeMap1234 {
			yyl371 := r.ReadMapStart()
			if yyl371 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl371, d)
			}
		} else if yyct371 == codecSelferValueTypeArray1234 {
			yyl371 := r.ReadArrayStart()
			if yyl371 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys372Slc
	var yyhl372 bool = l >= 0
	for yyj372 := 0; ; yyj372++ {
		if yyhl372 {
			if yyj372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys372Slc = r.DecodeBytes(yys372Slc, true, true)
		yys372 := string(yys372Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys372 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys372)
		} // end switch yys372
	} // end for yyj372
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj376 int
	var yyb376 bool
	var yyhl376 bool = l >= 0
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj376++
		if yyhl376 {
			yyb376 = yyj376 > l
		} else {
			yyb376 = r.CheckBreak()
		}
		if yyb376 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj376-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym380 := z.EncBinary()
		_ = yym380
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep381 := !z.EncBinary()
			yy2arr381 := z.EncBasicHandle().StructToArray
			var yyq381 [4]bool
			_, _, _ = yysep381, yyq381, yy2arr381
			const yyr381 bool = false
			yyq381[0] = true
			yyq381[2] = x.Kind != ""
			yyq381[3] = x.APIVersion != ""
			var yynn381 int
			if yyr381 || yy2arr381 {
				r.EncodeArrayStart(4)
			} else {
				yynn381 = 1
				for _, b := range yyq381 {
					if b {
						yynn381++
					}
				}
				r.EncodeMapStart(yynn381)
				yynn381 = 0
			}
			if yyr381 || yy2arr381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq381[0] {
					yy383 := &x.ListMeta
					yym384 := z.EncBinary()
					_ = yym384
					if false {
					} else if z.HasExtensions() && z.EncExt(yy383) {
					} else {
						z.EncFallback(yy383)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq381[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy385 := &x.ListMeta
					yym386 := z.EncBinary()
					_ = yym386
					if false {
					} else if z.HasExtensions() && z.EncExt(yy385) {
					} else {
						z.EncFallback(yy385)
					}
				}
			}
			if yyr381 || yy2arr381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym388 := z.EncBinary()
					_ = yym388
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym389 := z.EncBinary()
					_ = yym389
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr381 || yy2arr381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq381[2] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq381[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr381 || yy2arr381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq381[3] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq381[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr381 || yy2arr381 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym396 := z.DecBinary()
	_ = yym396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct397 := r.ContainerType()
		if yyct397 == codecSelferValueTypeMap1234 {
			yyl397 := r.ReadMapStart()
			if yyl397 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl397, d)
			}
		} else if yyct397 == codecSelferValueTypeArray1234 {
			yyl397 := r.ReadArrayStart()
			if yyl397 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys398Slc
	var yyhl398 bool = l >= 0
	for yyj398 := 0; ; yyj398++ {
		if yyhl398 {
			if yyj398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys398Slc = r.DecodeBytes(yys398Slc, true, true)
		yys398 := string(yys398Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys398 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv399 := &x.ListMeta
				yym400 := z.DecBinary()
				_ = yym400
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv399) {
				} else {
					z.DecFallback(yyv399, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv401 := &x.Items
				yym402 := z.DecBinary()
				_ = yym402
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv401), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys398)
		} // end switch yys398
	} // end for yyj398
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj405 int
	var yyb405 bool
	var yyhl405 bool = l >= 0
	yyj405++
	if yyhl405 {
		yyb405 = yyj405 > l
	} else {
		yyb405 = r.CheckBreak()
	}
	if yyb405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv406 := &x.ListMeta
		yym407 := z.DecBinary()
		_ = yym407
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv406) {
		} else {
			z.DecFallback(yyv406, false)
		}
	}
	yyj405++
	if yyhl405 {
		yyb405 = yyj405 > l
	} else {
		yyb405 = r.CheckBreak()
	}
	if yyb405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv408 := &x.Items
		yym409 := z.DecBinary()
		_ = yym409
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv408), d)
		}
	}
	yyj405++
	if yyhl405 {
		yyb405 = yyj405 > l
	} else {
		yyb405 = r.CheckBreak()
	}
	if yyb405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj405++
	if yyhl405 {
		yyb405 = yyj405 > l
	} else {
		yyb405 = r.CheckBreak()
	}
	if yyb405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj405++
		if yyhl405 {
			yyb405 = yyj405 > l
		} else {
			yyb405 = r.CheckBreak()
		}
		if yyb405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym412 := z.EncBinary()
		_ = yym412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep413 := !z.EncBinary()
			yy2arr413 := z.EncBasicHandle().StructToArray
			var yyq413 [5]bool
			_, _, _ = yysep413, yyq413, yy2arr413
			const yyr413 bool = false
			yyq413[0] = true
			yyq413[1] = true
			yyq413[2] = true
			yyq413[3] = x.Kind != ""
			yyq413[4] = x.APIVersion != ""
			var yynn413 int
			if yyr413 || yy2arr413 {
				r.EncodeArrayStart(5)
			} else {
				yynn413 = 0
				for _, b := range yyq413 {
					if b {
						yynn413++
					}
				}
				r.EncodeMapStart(yynn413)
				yynn413 = 0
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[0] {
					yy415 := &x.ObjectMeta
					yy415.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq413[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.ObjectMeta
					yy416.CodecEncodeSelf(e)
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[1] {
					yy418 := &x.Spec
					yy418.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy419 := &x.Spec
					yy419.CodecEncodeSelf(e)
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[2] {
					yy421 := &x.Status
					yy421.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy422 := &x.Status
					yy422.CodecEncodeSelf(e)
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[3] {
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[4] {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym429 := z.DecBinary()
	_ = yym429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct430 := r.ContainerType()
		if yyct430 == codecSelferValueTypeMap1234 {
			yyl430 := r.ReadMapStart()
			if yyl430 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl430, d)
			}
		} else if yyct430 == codecSelferValueTypeArray1234 {
			yyl430 := r.ReadArrayStart()
			if yyl430 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl430, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys431Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys431Slc
	var yyhl431 bool = l >= 0
	for yyj431 := 0; ; yyj431++ {
		if yyhl431 {
			if yyj431 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys431Slc = r.DecodeBytes(yys431Slc, true, true)
		yys431 := string(yys431Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys431 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv432 := &x.ObjectMeta
				yyv432.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv433 := &x.Spec
				yyv433.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv434 := &x.Status
				yyv434.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys431)
		} // end switch yys431
	} // end for yyj431
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv438 := &x.ObjectMeta
		yyv438.CodecDecodeSelf(d)
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv439 := &x.Spec
		yyv439.CodecDecodeSelf(d)
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv440 := &x.Status
		yyv440.CodecDecodeSelf(d)
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym443 := z.EncBinary()
		_ = yym443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep444 := !z.EncBinary()
			yy2arr444 := z.EncBasicHandle().StructToArray
			var yyq444 [4]bool
			_, _, _ = yysep444, yyq444, yy2arr444
			const yyr444 bool = false
			yyq444[0] = true
			yyq444[2] = x.Kind != ""
			yyq444[3] = x.APIVersion != ""
			var yynn444 int
			if yyr444 || yy2arr444 {
				r.EncodeArrayStart(4)
			} else {
				yynn444 = 1
				for _, b := range yyq444 {
					if b {
						yynn444++
					}
				}
				r.EncodeMapStart(yynn444)
				yynn444 = 0
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq444[0] {
					yy446 := &x.ListMeta
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy446) {
					} else {
						z.EncFallback(yy446)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy448 := &x.ListMeta
					yym449 := z.EncBinary()
					_ = yym449
					if false {
					} else if z.HasExtensions() && z.EncExt(yy448) {
					} else {
						z.EncFallback(yy448)
					}
				}
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym452 := z.EncBinary()
					_ = yym452
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq444[2] {
					yym454 := z.EncBinary()
					_ = yym454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq444[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym455 := z.EncBinary()
					_ = yym455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq444[3] {
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq444[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym458 := z.EncBinary()
					_ = yym458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym459 := z.DecBinary()
	_ = yym459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct460 := r.ContainerType()
		if yyct460 == codecSelferValueTypeMap1234 {
			yyl460 := r.ReadMapStart()
			if yyl460 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl460, d)
			}
		} else if yyct460 == codecSelferValueTypeArray1234 {
			yyl460 := r.ReadArrayStart()
			if yyl460 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys461Slc
	var yyhl461 bool = l >= 0
	for yyj461 := 0; ; yyj461++ {
		if yyhl461 {
			if yyj461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys461Slc = r.DecodeBytes(yys461Slc, true, true)
		yys461 := string(yys461Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys461 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv462 := &x.ListMeta
				yym463 := z.DecBinary()
				_ = yym463
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv462) {
				} else {
					z.DecFallback(yyv462, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv464 := &x.Items
				yym465 := z.DecBinary()
				_ = yym465
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv464), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys461)
		} // end switch yys461
	} // end for yyj461
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj468 int
	var yyb468 bool
	var yyhl468 bool = l >= 0
	yyj468++
	if yyhl468 {
		yyb468 = yyj468 > l
	} else {
		yyb468 = r.CheckBreak()
	}
	if yyb468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv469 := &x.ListMeta
		yym470 := z.DecBinary()
		_ = yym470
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv469) {
		} else {
			z.DecFallback(yyv469, false)
		}
	}
	yyj468++
	if yyhl468 {
		yyb468 = yyj468 > l
	} else {
		yyb468 = r.CheckBreak()
	}
	if yyb468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv471 := &x.Items
		yym472 := z.DecBinary()
		_ = yym472
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv471), d)
		}
	}
	yyj468++
	if yyhl468 {
		yyb468 = yyj468 > l
	} else {
		yyb468 = r.CheckBreak()
	}
	if yyb468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj468++
	if yyhl468 {
		yyb468 = yyj468 > l
	} else {
		yyb468 = r.CheckBreak()
	}
	if yyb468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj468++
		if yyhl468 {
			yyb468 = yyj468 > l
		} else {
			yyb468 = r.CheckBreak()
		}
		if yyb468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym475 := z.EncBinary()
		_ = yym475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep476 := !z.EncBinary()
			yy2arr476 := z.EncBasicHandle().StructToArray
			var yyq476 [3]bool
			_, _, _ = yysep476, yyq476, yy2arr476
			const yyr476 bool = false
			yyq476[0] = len(x.AccessModes) != 0
			yyq476[1] = true
			yyq476[2] = x.VolumeName != ""
			var yynn476 int
			if yyr476 || yy2arr476 {
				r.EncodeArrayStart(3)
			} else {
				yynn476 = 0
				for _, b := range yyq476 {
					if b {
						yynn476++
					}
				}
				r.EncodeMapStart(yynn476)
				yynn476 = 0
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[1] {
					yy481 := &x.Resources
					yy481.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy482 := &x.Resources
					yy482.CodecEncodeSelf(e)
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[2] {
					yym484 := z.EncBinary()
					_ = yym484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym485 := z.EncBinary()
					_ = yym485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym486 := z.DecBinary()
	_ = yym486
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct487 := r.ContainerType()
		if yyct487 == codecSelferValueTypeMap1234 {
			yyl487 := r.ReadMapStart()
			if yyl487 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl487, d)
			}
		} else if yyct487 == codecSelferValueTypeArray1234 {
			yyl487 := r.ReadArrayStart()
			if yyl487 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl487, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys488Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys488Slc
	var yyhl488 bool = l >= 0
	for yyj488 := 0; ; yyj488++ {
		if yyhl488 {
			if yyj488 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys488Slc = r.DecodeBytes(yys488Slc, true, true)
		yys488 := string(yys488Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys488 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv489 := &x.AccessModes
				yym490 := z.DecBinary()
				_ = yym490
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv489), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv491 := &x.Resources
				yyv491.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys488)
		} // end switch yys488
	} // end for yyj488
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj493 int
	var yyb493 bool
	var yyhl493 bool = l >= 0
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv494 := &x.AccessModes
		yym495 := z.DecBinary()
		_ = yym495
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv494), d)
		}
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv496 := &x.Resources
		yyv496.CodecDecodeSelf(d)
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj493++
		if yyhl493 {
			yyb493 = yyj493 > l
		} else {
			yyb493 = r.CheckBreak()
		}
		if yyb493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym498 := z.EncBinary()
		_ = yym498
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep499 := !z.EncBinary()
			yy2arr499 := z.EncBasicHandle().StructToArray
			var yyq499 [3]bool
			_, _, _ = yysep499, yyq499, yy2arr499
			const yyr499 bool = false
			yyq499[0] = x.Phase != ""
			yyq499[1] = len(x.AccessModes) != 0
			yyq499[2] = len(x.Capacity) != 0
			var yynn499 int
			if yyr499 || yy2arr499 {
				r.EncodeArrayStart(3)
			} else {
				yynn499 = 0
				for _, b := range yyq499 {
					if b {
						yynn499++
					}
				}
				r.EncodeMapStart(yynn499)
				yynn499 = 0
			}
			if yyr499 || yy2arr499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq499[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq499[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr499 || yy2arr499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq499[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym502 := z.EncBinary()
						_ = yym502
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq499[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym503 := z.EncBinary()
						_ = yym503
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr499 || yy2arr499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq499[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq499[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr499 || yy2arr499 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym505 := z.DecBinary()
	_ = yym505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct506 := r.ContainerType()
		if yyct506 == codecSelferValueTypeMap1234 {
			yyl506 := r.ReadMapStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl506, d)
			}
		} else if yyct506 == codecSelferValueTypeArray1234 {
			yyl506 := r.ReadArrayStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys507Slc
	var yyhl507 bool = l >= 0
	for yyj507 := 0; ; yyj507++ {
		if yyhl507 {
			if yyj507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys507Slc = r.DecodeBytes(yys507Slc, true, true)
		yys507 := string(yys507Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys507 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv509 := &x.AccessModes
				yym510 := z.DecBinary()
				_ = yym510
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv509), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv511 := &x.Capacity
				yyv511.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys507)
		} // end switch yys507
	} // end for yyj507
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj512 int
	var yyb512 bool
	var yyhl512 bool = l >= 0
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv514 := &x.AccessModes
		yym515 := z.DecBinary()
		_ = yym515
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv514), d)
		}
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv516 := &x.Capacity
		yyv516.CodecDecodeSelf(d)
	}
	for {
		yyj512++
		if yyhl512 {
			yyb512 = yyj512 > l
		} else {
			yyb512 = r.CheckBreak()
		}
		if yyb512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym517 := z.EncBinary()
	_ = yym517
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym518 := z.DecBinary()
	_ = yym518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [1]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			var yynn524 int
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(1)
			} else {
				yynn524 = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
				yynn524 = 0
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym528 := z.DecBinary()
	_ = yym528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct529 := r.ContainerType()
		if yyct529 == codecSelferValueTypeMap1234 {
			yyl529 := r.ReadMapStart()
			if yyl529 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl529, d)
			}
		} else if yyct529 == codecSelferValueTypeArray1234 {
			yyl529 := r.ReadArrayStart()
			if yyl529 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl529, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys530Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys530Slc
	var yyhl530 bool = l >= 0
	for yyj530 := 0; ; yyj530++ {
		if yyhl530 {
			if yyj530 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys530Slc = r.DecodeBytes(yys530Slc, true, true)
		yys530 := string(yys530Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys530 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys530)
		} // end switch yys530
	} // end for yyj530
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj532 int
	var yyb532 bool
	var yyhl532 bool = l >= 0
	yyj532++
	if yyhl532 {
		yyb532 = yyj532 > l
	} else {
		yyb532 = r.CheckBreak()
	}
	if yyb532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj532++
		if yyhl532 {
			yyb532 = yyj532 > l
		} else {
			yyb532 = r.CheckBreak()
		}
		if yyb532 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj532-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym534 := z.EncBinary()
		_ = yym534
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep535 := !z.EncBinary()
			yy2arr535 := z.EncBasicHandle().StructToArray
			var yyq535 [1]bool
			_, _, _ = yysep535, yyq535, yy2arr535
			const yyr535 bool = false
			yyq535[0] = x.Medium != ""
			var yynn535 int
			if yyr535 || yy2arr535 {
				r.EncodeArrayStart(1)
			} else {
				yynn535 = 0
				for _, b := range yyq535 {
					if b {
						yynn535++
					}
				}
				r.EncodeMapStart(yynn535)
				yynn535 = 0
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq535[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq535[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct538 := r.ContainerType()
		if yyct538 == codecSelferValueTypeMap1234 {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if yyct538 == codecSelferValueTypeArray1234 {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys539 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj541 int
	var yyb541 bool
	var yyhl541 bool = l >= 0
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj541++
		if yyhl541 {
			yyb541 = yyj541 > l
		} else {
			yyb541 = r.CheckBreak()
		}
		if yyb541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym543 := z.EncBinary()
		_ = yym543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep544 := !z.EncBinary()
			yy2arr544 := z.EncBasicHandle().StructToArray
			var yyq544 [3]bool
			_, _, _ = yysep544, yyq544, yy2arr544
			const yyr544 bool = false
			yyq544[2] = x.ReadOnly != false
			var yynn544 int
			if yyr544 || yy2arr544 {
				r.EncodeArrayStart(3)
			} else {
				yynn544 = 2
				for _, b := range yyq544 {
					if b {
						yynn544++
					}
				}
				r.EncodeMapStart(yynn544)
				yynn544 = 0
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym546 := z.EncBinary()
				_ = yym546
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym547 := z.EncBinary()
				_ = yym547
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym550 := z.EncBinary()
				_ = yym550
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq544[2] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq544[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym554 := z.DecBinary()
	_ = yym554
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct555 := r.ContainerType()
		if yyct555 == codecSelferValueTypeMap1234 {
			yyl555 := r.ReadMapStart()
			if yyl555 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl555, d)
			}
		} else if yyct555 == codecSelferValueTypeArray1234 {
			yyl555 := r.ReadArrayStart()
			if yyl555 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl555, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys556Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys556Slc
	var yyhl556 bool = l >= 0
	for yyj556 := 0; ; yyj556++ {
		if yyhl556 {
			if yyj556 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys556Slc = r.DecodeBytes(yys556Slc, true, true)
		yys556 := string(yys556Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys556 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys556)
		} // end switch yys556
	} // end for yyj556
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj560 int
	var yyb560 bool
	var yyhl560 bool = l >= 0
	yyj560++
	if yyhl560 {
		yyb560 = yyj560 > l
	} else {
		yyb560 = r.CheckBreak()
	}
	if yyb560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj560++
	if yyhl560 {
		yyb560 = yyj560 > l
	} else {
		yyb560 = r.CheckBreak()
	}
	if yyb560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj560++
	if yyhl560 {
		yyb560 = yyj560 > l
	} else {
		yyb560 = r.CheckBreak()
	}
	if yyb560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj560++
		if yyhl560 {
			yyb560 = yyj560 > l
		} else {
			yyb560 = r.CheckBreak()
		}
		if yyb560 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj560-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym564 := z.EncBinary()
		_ = yym564
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep565 := !z.EncBinary()
			yy2arr565 := z.EncBasicHandle().StructToArray
			var yyq565 [8]bool
			_, _, _ = yysep565, yyq565, yy2arr565
			const yyr565 bool = false
			yyq565[2] = x.FSType != ""
			yyq565[7] = x.ReadOnly != false
			var yynn565 int
			if yyr565 || yy2arr565 {
				r.EncodeArrayStart(8)
			} else {
				yynn565 = 6
				for _, b := range yyq565 {
					if b {
						yynn565++
					}
				}
				r.EncodeMapStart(yynn565)
				yynn565 = 0
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym570 := z.EncBinary()
				_ = yym570
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym571 := z.EncBinary()
				_ = yym571
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq565[2] {
					yym573 := z.EncBinary()
					_ = yym573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq565[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym576 := z.EncBinary()
				_ = yym576
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym577 := z.EncBinary()
				_ = yym577
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym579 := z.EncBinary()
				_ = yym579
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym580 := z.EncBinary()
				_ = yym580
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym582 := z.EncBinary()
				_ = yym582
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym583 := z.EncBinary()
				_ = yym583
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq565[7] {
					yym586 := z.EncBinary()
					_ = yym586
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq565[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym588 := z.DecBinary()
	_ = yym588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct589 := r.ContainerType()
		if yyct589 == codecSelferValueTypeMap1234 {
			yyl589 := r.ReadMapStart()
			if yyl589 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl589, d)
			}
		} else if yyct589 == codecSelferValueTypeArray1234 {
			yyl589 := r.ReadArrayStart()
			if yyl589 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl589, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys590Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys590Slc
	var yyhl590 bool = l >= 0
	for yyj590 := 0; ; yyj590++ {
		if yyhl590 {
			if yyj590 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys590Slc = r.DecodeBytes(yys590Slc, true, true)
		yys590 := string(yys590Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys590 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv591 := &x.CephMonitors
				yym592 := z.DecBinary()
				_ = yym592
				if false {
				} else {
					z.F.DecSliceStringX(yyv591, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys590)
		} // end switch yys590
	} // end for yyj590
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj600 int
	var yyb600 bool
	var yyhl600 bool = l >= 0
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv601 := &x.CephMonitors
		yym602 := z.DecBinary()
		_ = yym602
		if false {
		} else {
			z.F.DecSliceStringX(yyv601, false, d)
		}
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj600++
		if yyhl600 {
			yyb600 = yyj600 > l
		} else {
			yyb600 = r.CheckBreak()
		}
		if yyb600 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj600-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym610 := z.EncBinary()
		_ = yym610
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep611 := !z.EncBinary()
			yy2arr611 := z.EncBasicHandle().StructToArray
			var yyq611 [3]bool
			_, _, _ = yysep611, yyq611, yy2arr611
			const yyr611 bool = false
			yyq611[1] = x.FSType != ""
			yyq611[2] = x.ReadOnly != false
			var yynn611 int
			if yyr611 || yy2arr611 {
				r.EncodeArrayStart(3)
			} else {
				yynn611 = 1
				for _, b := range yyq611 {
					if b {
						yynn611++
					}
				}
				r.EncodeMapStart(yynn611)
				yynn611 = 0
			}
			if yyr611 || yy2arr611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym613 := z.EncBinary()
				_ = yym613
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym614 := z.EncBinary()
				_ = yym614
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr611 || yy2arr611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq611[1] {
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq611[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym617 := z.EncBinary()
					_ = yym617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr611 || yy2arr611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq611[2] {
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq611[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr611 || yy2arr611 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym621 := z.DecBinary()
	_ = yym621
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct622 := r.ContainerType()
		if yyct622 == codecSelferValueTypeMap1234 {
			yyl622 := r.ReadMapStart()
			if yyl622 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl622, d)
			}
		} else if yyct622 == codecSelferValueTypeArray1234 {
			yyl622 := r.ReadArrayStart()
			if yyl622 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl622, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys623Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys623Slc
	var yyhl623 bool = l >= 0
	for yyj623 := 0; ; yyj623++ {
		if yyhl623 {
			if yyj623 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys623Slc = r.DecodeBytes(yys623Slc, true, true)
		yys623 := string(yys623Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys623 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys623)
		} // end switch yys623
	} // end for yyj623
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj627 int
	var yyb627 bool
	var yyhl627 bool = l >= 0
	yyj627++
	if yyhl627 {
		yyb627 = yyj627 > l
	} else {
		yyb627 = r.CheckBreak()
	}
	if yyb627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj627++
	if yyhl627 {
		yyb627 = yyj627 > l
	} else {
		yyb627 = r.CheckBreak()
	}
	if yyb627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj627++
	if yyhl627 {
		yyb627 = yyj627 > l
	} else {
		yyb627 = r.CheckBreak()
	}
	if yyb627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj627++
		if yyhl627 {
			yyb627 = yyj627 > l
		} else {
			yyb627 = r.CheckBreak()
		}
		if yyb627 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj627-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym631 := z.EncBinary()
		_ = yym631
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep632 := !z.EncBinary()
			yy2arr632 := z.EncBasicHandle().StructToArray
			var yyq632 [6]bool
			_, _, _ = yysep632, yyq632, yy2arr632
			const yyr632 bool = false
			yyq632[1] = x.Path != ""
			yyq632[2] = x.User != ""
			yyq632[3] = x.SecretFile != ""
			yyq632[4] = x.SecretRef != nil
			yyq632[5] = x.ReadOnly != false
			var yynn632 int
			if yyr632 || yy2arr632 {
				r.EncodeArrayStart(6)
			} else {
				yynn632 = 1
				for _, b := range yyq632 {
					if b {
						yynn632++
					}
				}
				r.EncodeMapStart(yynn632)
				yynn632 = 0
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[1] {
					yym637 := z.EncBinary()
					_ = yym637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq632[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[2] {
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq632[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[3] {
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq632[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq632[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[5] {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq632[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym649 := z.DecBinary()
	_ = yym649
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct650 := r.ContainerType()
		if yyct650 == codecSelferValueTypeMap1234 {
			yyl650 := r.ReadMapStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl650, d)
			}
		} else if yyct650 == codecSelferValueTypeArray1234 {
			yyl650 := r.ReadArrayStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl650, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys651Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys651Slc
	var yyhl651 bool = l >= 0
	for yyj651 := 0; ; yyj651++ {
		if yyhl651 {
			if yyj651 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys651Slc = r.DecodeBytes(yys651Slc, true, true)
		yys651 := string(yys651Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys651 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv652 := &x.Monitors
				yym653 := z.DecBinary()
				_ = yym653
				if false {
				} else {
					z.F.DecSliceStringX(yyv652, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys651)
		} // end switch yys651
	} // end for yyj651
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj659 int
	var yyb659 bool
	var yyhl659 bool = l >= 0
	yyj659++
	if yyhl659 {
		yyb659 = yyj659 > l
	} else {
		yyb659 = r.CheckBreak()
	}
	if yyb659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv660 := &x.Monitors
		yym661 := z.DecBinary()
		_ = yym661
		if false {
		} else {
			z.F.DecSliceStringX(yyv660, false, d)
		}
	}
	yyj659++
	if yyhl659 {
		yyb659 = yyj659 > l
	} else {
		yyb659 = r.CheckBreak()
	}
	if yyb659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj659++
	if yyhl659 {
		yyb659 = yyj659 > l
	} else {
		yyb659 = r.CheckBreak()
	}
	if yyb659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj659++
	if yyhl659 {
		yyb659 = yyj659 > l
	} else {
		yyb659 = r.CheckBreak()
	}
	if yyb659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj659++
	if yyhl659 {
		yyb659 = yyj659 > l
	} else {
		yyb659 = r.CheckBreak()
	}
	if yyb659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj659++
	if yyhl659 {
		yyb659 = yyj659 > l
	} else {
		yyb659 = r.CheckBreak()
	}
	if yyb659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj659++
		if yyhl659 {
			yyb659 = yyj659 > l
		} else {
			yyb659 = r.CheckBreak()
		}
		if yyb659 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj659-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym667 := z.EncBinary()
		_ = yym667
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep668 := !z.EncBinary()
			yy2arr668 := z.EncBasicHandle().StructToArray
			var yyq668 [1]bool
			_, _, _ = yysep668, yyq668, yy2arr668
			const yyr668 bool = false
			var yynn668 int
			if yyr668 || yy2arr668 {
				r.EncodeArrayStart(1)
			} else {
				yynn668 = 1
				for _, b := range yyq668 {
					if b {
						yynn668++
					}
				}
				r.EncodeMapStart(yynn668)
				yynn668 = 0
			}
			if yyr668 || yy2arr668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym670 := z.EncBinary()
				_ = yym670
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym671 := z.EncBinary()
				_ = yym671
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr668 || yy2arr668 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym672 := z.DecBinary()
	_ = yym672
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct673 := r.ContainerType()
		if yyct673 == codecSelferValueTypeMap1234 {
			yyl673 := r.ReadMapStart()
			if yyl673 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl673, d)
			}
		} else if yyct673 == codecSelferValueTypeArray1234 {
			yyl673 := r.ReadArrayStart()
			if yyl673 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl673, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys674Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys674Slc
	var yyhl674 bool = l >= 0
	for yyj674 := 0; ; yyj674++ {
		if yyhl674 {
			if yyj674 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys674Slc = r.DecodeBytes(yys674Slc, true, true)
		yys674 := string(yys674Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys674 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys674)
		} // end switch yys674
	} // end for yyj674
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj676 int
	var yyb676 bool
	var yyhl676 bool = l >= 0
	yyj676++
	if yyhl676 {
		yyb676 = yyj676 > l
	} else {
		yyb676 = r.CheckBreak()
	}
	if yyb676 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj676++
		if yyhl676 {
			yyb676 = yyj676 > l
		} else {
			yyb676 = r.CheckBreak()
		}
		if yyb676 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj676-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym678 := z.EncBinary()
	_ = yym678
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym679 := z.DecBinary()
	_ = yym679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym680 := z.EncBinary()
	_ = yym680
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym681 := z.DecBinary()
	_ = yym681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym682 := z.EncBinary()
		_ = yym682
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep683 := !z.EncBinary()
			yy2arr683 := z.EncBasicHandle().StructToArray
			var yyq683 [4]bool
			_, _, _ = yysep683, yyq683, yy2arr683
			const yyr683 bool = false
			yyq683[1] = x.FSType != ""
			yyq683[2] = x.Partition != 0
			yyq683[3] = x.ReadOnly != false
			var yynn683 int
			if yyr683 || yy2arr683 {
				r.EncodeArrayStart(4)
			} else {
				yynn683 = 1
				for _, b := range yyq683 {
					if b {
						yynn683++
					}
				}
				r.EncodeMapStart(yynn683)
				yynn683 = 0
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym685 := z.EncBinary()
				_ = yym685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym686 := z.EncBinary()
				_ = yym686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq683[1] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq683[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq683[2] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq683[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq683[3] {
					yym694 := z.EncBinary()
					_ = yym694
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq683[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym696 := z.DecBinary()
	_ = yym696
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct697 := r.ContainerType()
		if yyct697 == codecSelferValueTypeMap1234 {
			yyl697 := r.ReadMapStart()
			if yyl697 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl697, d)
			}
		} else if yyct697 == codecSelferValueTypeArray1234 {
			yyl697 := r.ReadArrayStart()
			if yyl697 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl697, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys698Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys698Slc
	var yyhl698 bool = l >= 0
	for yyj698 := 0; ; yyj698++ {
		if yyhl698 {
			if yyj698 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys698Slc = r.DecodeBytes(yys698Slc, true, true)
		yys698 := string(yys698Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys698 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys698)
		} // end switch yys698
	} // end for yyj698
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym708 := z.EncBinary()
		_ = yym708
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep709 := !z.EncBinary()
			yy2arr709 := z.EncBasicHandle().StructToArray
			var yyq709 [5]bool
			_, _, _ = yysep709, yyq709, yy2arr709
			const yyr709 bool = false
			yyq709[1] = x.FSType != ""
			yyq709[2] = x.SecretRef != nil
			yyq709[3] = x.ReadOnly != false
			yyq709[4] = len(x.Options) != 0
			var yynn709 int
			if yyr709 || yy2arr709 {
				r.EncodeArrayStart(5)
			} else {
				yynn709 = 1
				for _, b := range yyq709 {
					if b {
						yynn709++
					}
				}
				r.EncodeMapStart(yynn709)
				yynn709 = 0
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym711 := z.EncBinary()
				_ = yym711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq709[1] {
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq709[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq709[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq709[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq709[3] {
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq709[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym719 := z.EncBinary()
					_ = yym719
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq709[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym721 := z.EncBinary()
						_ = yym721
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq709[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym722 := z.EncBinary()
						_ = yym722
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym723 := z.DecBinary()
	_ = yym723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct724 := r.ContainerType()
		if yyct724 == codecSelferValueTypeMap1234 {
			yyl724 := r.ReadMapStart()
			if yyl724 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl724, d)
			}
		} else if yyct724 == codecSelferValueTypeArray1234 {
			yyl724 := r.ReadArrayStart()
			if yyl724 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys725Slc
	var yyhl725 bool = l >= 0
	for yyj725 := 0; ; yyj725++ {
		if yyhl725 {
			if yyj725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys725Slc = r.DecodeBytes(yys725Slc, true, true)
		yys725 := string(yys725Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys725 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv730 := &x.Options
				yym731 := z.DecBinary()
				_ = yym731
				if false {
				} else {
					z.F.DecMapStringStringX(yyv730, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys725)
		} // end switch yys725
	} // end for yyj725
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj732 int
	var yyb732 bool
	var yyhl732 bool = l >= 0
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv737 := &x.Options
		yym738 := z.DecBinary()
		_ = yym738
		if false {
		} else {
			z.F.DecMapStringStringX(yyv737, false, d)
		}
	}
	for {
		yyj732++
		if yyhl732 {
			yyb732 = yyj732 > l
		} else {
			yyb732 = r.CheckBreak()
		}
		if yyb732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym739 := z.EncBinary()
		_ = yym739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep740 := !z.EncBinary()
			yy2arr740 := z.EncBasicHandle().StructToArray
			var yyq740 [4]bool
			_, _, _ = yysep740, yyq740, yy2arr740
			const yyr740 bool = false
			yyq740[1] = x.FSType != ""
			yyq740[2] = x.Partition != 0
			yyq740[3] = x.ReadOnly != false
			var yynn740 int
			if yyr740 || yy2arr740 {
				r.EncodeArrayStart(4)
			} else {
				yynn740 = 1
				for _, b := range yyq740 {
					if b {
						yynn740++
					}
				}
				r.EncodeMapStart(yynn740)
				yynn740 = 0
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym742 := z.EncBinary()
				_ = yym742
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym743 := z.EncBinary()
				_ = yym743
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq740[1] {
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq740[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym746 := z.EncBinary()
					_ = yym746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq740[2] {
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq740[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq740[3] {
					yym751 := z.EncBinary()
					_ = yym751
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq740[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym752 := z.EncBinary()
					_ = yym752
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym753 := z.DecBinary()
	_ = yym753
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct754 := r.ContainerType()
		if yyct754 == codecSelferValueTypeMap1234 {
			yyl754 := r.ReadMapStart()
			if yyl754 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl754, d)
			}
		} else if yyct754 == codecSelferValueTypeArray1234 {
			yyl754 := r.ReadArrayStart()
			if yyl754 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl754, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys755Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys755Slc
	var yyhl755 bool = l >= 0
	for yyj755 := 0; ; yyj755++ {
		if yyhl755 {
			if yyj755 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys755Slc = r.DecodeBytes(yys755Slc, true, true)
		yys755 := string(yys755Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys755 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys755)
		} // end switch yys755
	} // end for yyj755
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj760 int
	var yyb760 bool
	var yyhl760 bool = l >= 0
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj760++
		if yyhl760 {
			yyb760 = yyj760 > l
		} else {
			yyb760 = r.CheckBreak()
		}
		if yyb760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym765 := z.EncBinary()
		_ = yym765
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep766 := !z.EncBinary()
			yy2arr766 := z.EncBasicHandle().StructToArray
			var yyq766 [3]bool
			_, _, _ = yysep766, yyq766, yy2arr766
			const yyr766 bool = false
			yyq766[1] = x.Revision != ""
			yyq766[2] = x.Directory != ""
			var yynn766 int
			if yyr766 || yy2arr766 {
				r.EncodeArrayStart(3)
			} else {
				yynn766 = 1
				for _, b := range yyq766 {
					if b {
						yynn766++
					}
				}
				r.EncodeMapStart(yynn766)
				yynn766 = 0
			}
			if yyr766 || yy2arr766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym768 := z.EncBinary()
				_ = yym768
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym769 := z.EncBinary()
				_ = yym769
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr766 || yy2arr766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq766[1] {
					yym771 := z.EncBinary()
					_ = yym771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq766[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym772 := z.EncBinary()
					_ = yym772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr766 || yy2arr766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq766[2] {
					yym774 := z.EncBinary()
					_ = yym774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq766[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym775 := z.EncBinary()
					_ = yym775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr766 || yy2arr766 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym776 := z.DecBinary()
	_ = yym776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct777 := r.ContainerType()
		if yyct777 == codecSelferValueTypeMap1234 {
			yyl777 := r.ReadMapStart()
			if yyl777 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl777, d)
			}
		} else if yyct777 == codecSelferValueTypeArray1234 {
			yyl777 := r.ReadArrayStart()
			if yyl777 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl777, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys778Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys778Slc
	var yyhl778 bool = l >= 0
	for yyj778 := 0; ; yyj778++ {
		if yyhl778 {
			if yyj778 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys778Slc = r.DecodeBytes(yys778Slc, true, true)
		yys778 := string(yys778Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys778 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys778)
		} // end switch yys778
	} // end for yyj778
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj782 int
	var yyb782 bool
	var yyhl782 bool = l >= 0
	yyj782++
	if yyhl782 {
		yyb782 = yyj782 > l
	} else {
		yyb782 = r.CheckBreak()
	}
	if yyb782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj782++
	if yyhl782 {
		yyb782 = yyj782 > l
	} else {
		yyb782 = r.CheckBreak()
	}
	if yyb782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj782++
	if yyhl782 {
		yyb782 = yyj782 > l
	} else {
		yyb782 = r.CheckBreak()
	}
	if yyb782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj782++
		if yyhl782 {
			yyb782 = yyj782 > l
		} else {
			yyb782 = r.CheckBreak()
		}
		if yyb782 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj782-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym786 := z.EncBinary()
		_ = yym786
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep787 := !z.EncBinary()
			yy2arr787 := z.EncBasicHandle().StructToArray
			var yyq787 [1]bool
			_, _, _ = yysep787, yyq787, yy2arr787
			const yyr787 bool = false
			yyq787[0] = x.SecretName != ""
			var yynn787 int
			if yyr787 || yy2arr787 {
				r.EncodeArrayStart(1)
			} else {
				yynn787 = 0
				for _, b := range yyq787 {
					if b {
						yynn787++
					}
				}
				r.EncodeMapStart(yynn787)
				yynn787 = 0
			}
			if yyr787 || yy2arr787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq787[0] {
					yym789 := z.EncBinary()
					_ = yym789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq787[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr787 || yy2arr787 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym791 := z.DecBinary()
	_ = yym791
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct792 := r.ContainerType()
		if yyct792 == codecSelferValueTypeMap1234 {
			yyl792 := r.ReadMapStart()
			if yyl792 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl792, d)
			}
		} else if yyct792 == codecSelferValueTypeArray1234 {
			yyl792 := r.ReadArrayStart()
			if yyl792 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl792, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys793Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys793Slc
	var yyhl793 bool = l >= 0
	for yyj793 := 0; ; yyj793++ {
		if yyhl793 {
			if yyj793 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys793Slc = r.DecodeBytes(yys793Slc, true, true)
		yys793 := string(yys793Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys793 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys793)
		} // end switch yys793
	} // end for yyj793
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj795 int
	var yyb795 bool
	var yyhl795 bool = l >= 0
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj795++
		if yyhl795 {
			yyb795 = yyj795 > l
		} else {
			yyb795 = r.CheckBreak()
		}
		if yyb795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym797 := z.EncBinary()
		_ = yym797
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep798 := !z.EncBinary()
			yy2arr798 := z.EncBasicHandle().StructToArray
			var yyq798 [3]bool
			_, _, _ = yysep798, yyq798, yy2arr798
			const yyr798 bool = false
			yyq798[2] = x.ReadOnly != false
			var yynn798 int
			if yyr798 || yy2arr798 {
				r.EncodeArrayStart(3)
			} else {
				yynn798 = 2
				for _, b := range yyq798 {
					if b {
						yynn798++
					}
				}
				r.EncodeMapStart(yynn798)
				yynn798 = 0
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym800 := z.EncBinary()
				_ = yym800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym801 := z.EncBinary()
				_ = yym801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym803 := z.EncBinary()
				_ = yym803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym804 := z.EncBinary()
				_ = yym804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq798[2] {
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq798[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym807 := z.EncBinary()
					_ = yym807
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym808 := z.DecBinary()
	_ = yym808
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct809 := r.ContainerType()
		if yyct809 == codecSelferValueTypeMap1234 {
			yyl809 := r.ReadMapStart()
			if yyl809 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl809, d)
			}
		} else if yyct809 == codecSelferValueTypeArray1234 {
			yyl809 := r.ReadArrayStart()
			if yyl809 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl809, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys810Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys810Slc
	var yyhl810 bool = l >= 0
	for yyj810 := 0; ; yyj810++ {
		if yyhl810 {
			if yyj810 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys810Slc = r.DecodeBytes(yys810Slc, true, true)
		yys810 := string(yys810Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys810 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys810)
		} // end switch yys810
	} // end for yyj810
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym818 := z.EncBinary()
		_ = yym818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep819 := !z.EncBinary()
			yy2arr819 := z.EncBasicHandle().StructToArray
			var yyq819 [6]bool
			_, _, _ = yysep819, yyq819, yy2arr819
			const yyr819 bool = false
			yyq819[3] = x.ISCSIInterface != ""
			yyq819[4] = x.FSType != ""
			yyq819[5] = x.ReadOnly != false
			var yynn819 int
			if yyr819 || yy2arr819 {
				r.EncodeArrayStart(6)
			} else {
				yynn819 = 3
				for _, b := range yyq819 {
					if b {
						yynn819++
					}
				}
				r.EncodeMapStart(yynn819)
				yynn819 = 0
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym821 := z.EncBinary()
				_ = yym821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym822 := z.EncBinary()
				_ = yym822
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym824 := z.EncBinary()
				_ = yym824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym827 := z.EncBinary()
				_ = yym827
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym828 := z.EncBinary()
				_ = yym828
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[3] {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[4] {
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[5] {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq819[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym838 := z.DecBinary()
	_ = yym838
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct839 := r.ContainerType()
		if yyct839 == codecSelferValueTypeMap1234 {
			yyl839 := r.ReadMapStart()
			if yyl839 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl839, d)
			}
		} else if yyct839 == codecSelferValueTypeArray1234 {
			yyl839 := r.ReadArrayStart()
			if yyl839 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl839, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys840Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys840Slc
	var yyhl840 bool = l >= 0
	for yyj840 := 0; ; yyj840++ {
		if yyhl840 {
			if yyj840 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys840Slc = r.DecodeBytes(yys840Slc, true, true)
		yys840 := string(yys840Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys840 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys840)
		} // end switch yys840
	} // end for yyj840
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj847 int
	var yyb847 bool
	var yyhl847 bool = l >= 0
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj847++
		if yyhl847 {
			yyb847 = yyj847 > l
		} else {
			yyb847 = r.CheckBreak()
		}
		if yyb847 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj847-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym854 := z.EncBinary()
		_ = yym854
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep855 := !z.EncBinary()
			yy2arr855 := z.EncBasicHandle().StructToArray
			var yyq855 [4]bool
			_, _, _ = yysep855, yyq855, yy2arr855
			const yyr855 bool = false
			yyq855[2] = x.FSType != ""
			yyq855[3] = x.ReadOnly != false
			var yynn855 int
			if yyr855 || yy2arr855 {
				r.EncodeArrayStart(4)
			} else {
				yynn855 = 2
				for _, b := range yyq855 {
					if b {
						yynn855++
					}
				}
				r.EncodeMapStart(yynn855)
				yynn855 = 0
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy860 := *x.Lun
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeInt(int64(yy860))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy862 := *x.Lun
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeInt(int64(yy862))
					}
				}
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq855[2] {
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq855[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym866 := z.EncBinary()
					_ = yym866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq855[3] {
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq855[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym870 := z.DecBinary()
	_ = yym870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct871 := r.ContainerType()
		if yyct871 == codecSelferValueTypeMap1234 {
			yyl871 := r.ReadMapStart()
			if yyl871 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl871, d)
			}
		} else if yyct871 == codecSelferValueTypeArray1234 {
			yyl871 := r.ReadArrayStart()
			if yyl871 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl871, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys872Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys872Slc
	var yyhl872 bool = l >= 0
	for yyj872 := 0; ; yyj872++ {
		if yyhl872 {
			if yyj872 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys872Slc = r.DecodeBytes(yys872Slc, true, true)
		yys872 := string(yys872Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys872 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv873 := &x.TargetWWNs
				yym874 := z.DecBinary()
				_ = yym874
				if false {
				} else {
					z.F.DecSliceStringX(yyv873, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym876 := z.DecBinary()
				_ = yym876
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys872)
		} // end switch yys872
	} // end for yyj872
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj879 int
	var yyb879 bool
	var yyhl879 bool = l >= 0
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv880 := &x.TargetWWNs
		yym881 := z.DecBinary()
		_ = yym881
		if false {
		} else {
			z.F.DecSliceStringX(yyv880, false, d)
		}
	}
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym883 := z.DecBinary()
		_ = yym883
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj879++
		if yyhl879 {
			yyb879 = yyj879 > l
		} else {
			yyb879 = r.CheckBreak()
		}
		if yyb879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym886 := z.EncBinary()
		_ = yym886
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep887 := !z.EncBinary()
			yy2arr887 := z.EncBasicHandle().StructToArray
			var yyq887 [3]bool
			_, _, _ = yysep887, yyq887, yy2arr887
			const yyr887 bool = false
			yyq887[2] = x.ReadOnly != false
			var yynn887 int
			if yyr887 || yy2arr887 {
				r.EncodeArrayStart(3)
			} else {
				yynn887 = 2
				for _, b := range yyq887 {
					if b {
						yynn887++
					}
				}
				r.EncodeMapStart(yynn887)
				yynn887 = 0
			}
			if yyr887 || yy2arr887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym889 := z.EncBinary()
				_ = yym889
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym890 := z.EncBinary()
				_ = yym890
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr887 || yy2arr887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym892 := z.EncBinary()
				_ = yym892
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym893 := z.EncBinary()
				_ = yym893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr887 || yy2arr887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq887[2] {
					yym895 := z.EncBinary()
					_ = yym895
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq887[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym896 := z.EncBinary()
					_ = yym896
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr887 || yy2arr887 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym897 := z.DecBinary()
	_ = yym897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct898 := r.ContainerType()
		if yyct898 == codecSelferValueTypeMap1234 {
			yyl898 := r.ReadMapStart()
			if yyl898 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl898, d)
			}
		} else if yyct898 == codecSelferValueTypeArray1234 {
			yyl898 := r.ReadArrayStart()
			if yyl898 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys899Slc
	var yyhl899 bool = l >= 0
	for yyj899 := 0; ; yyj899++ {
		if yyhl899 {
			if yyj899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys899Slc = r.DecodeBytes(yys899Slc, true, true)
		yys899 := string(yys899Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys899 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys899)
		} // end switch yys899
	} // end for yyj899
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj903 int
	var yyb903 bool
	var yyhl903 bool = l >= 0
	yyj903++
	if yyhl903 {
		yyb903 = yyj903 > l
	} else {
		yyb903 = r.CheckBreak()
	}
	if yyb903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj903++
	if yyhl903 {
		yyb903 = yyj903 > l
	} else {
		yyb903 = r.CheckBreak()
	}
	if yyb903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj903++
	if yyhl903 {
		yyb903 = yyj903 > l
	} else {
		yyb903 = r.CheckBreak()
	}
	if yyb903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj903++
		if yyhl903 {
			yyb903 = yyj903 > l
		} else {
			yyb903 = r.CheckBreak()
		}
		if yyb903 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj903-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym907 := z.EncBinary()
		_ = yym907
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep908 := !z.EncBinary()
			yy2arr908 := z.EncBasicHandle().StructToArray
			var yyq908 [5]bool
			_, _, _ = yysep908, yyq908, yy2arr908
			const yyr908 bool = false
			yyq908[0] = x.Name != ""
			yyq908[1] = x.HostPort != 0
			yyq908[3] = x.Protocol != ""
			yyq908[4] = x.HostIP != ""
			var yynn908 int
			if yyr908 || yy2arr908 {
				r.EncodeArrayStart(5)
			} else {
				yynn908 = 1
				for _, b := range yyq908 {
					if b {
						yynn908++
					}
				}
				r.EncodeMapStart(yynn908)
				yynn908 = 0
			}
			if yyr908 || yy2arr908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq908[0] {
					yym910 := z.EncBinary()
					_ = yym910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq908[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr908 || yy2arr908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq908[1] {
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq908[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr908 || yy2arr908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym916 := z.EncBinary()
				_ = yym916
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr908 || yy2arr908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq908[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq908[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr908 || yy2arr908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq908[4] {
					yym920 := z.EncBinary()
					_ = yym920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq908[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr908 || yy2arr908 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym922 := z.DecBinary()
	_ = yym922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct923 := r.ContainerType()
		if yyct923 == codecSelferValueTypeMap1234 {
			yyl923 := r.ReadMapStart()
			if yyl923 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl923, d)
			}
		} else if yyct923 == codecSelferValueTypeArray1234 {
			yyl923 := r.ReadArrayStart()
			if yyl923 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl923, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys924Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys924Slc
	var yyhl924 bool = l >= 0
	for yyj924 := 0; ; yyj924++ {
		if yyhl924 {
			if yyj924 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys924Slc = r.DecodeBytes(yys924Slc, true, true)
		yys924 := string(yys924Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys924 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys924)
		} // end switch yys924
	} // end for yyj924
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj930 int
	var yyb930 bool
	var yyhl930 bool = l >= 0
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj930++
		if yyhl930 {
			yyb930 = yyj930 > l
		} else {
			yyb930 = r.CheckBreak()
		}
		if yyb930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym936 := z.EncBinary()
		_ = yym936
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep937 := !z.EncBinary()
			yy2arr937 := z.EncBasicHandle().StructToArray
			var yyq937 [3]bool
			_, _, _ = yysep937, yyq937, yy2arr937
			const yyr937 bool = false
			yyq937[1] = x.ReadOnly != false
			var yynn937 int
			if yyr937 || yy2arr937 {
				r.EncodeArrayStart(3)
			} else {
				yynn937 = 2
				for _, b := range yyq937 {
					if b {
						yynn937++
					}
				}
				r.EncodeMapStart(yynn937)
				yynn937 = 0
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym939 := z.EncBinary()
				_ = yym939
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym940 := z.EncBinary()
				_ = yym940
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq937[1] {
					yym942 := z.EncBinary()
					_ = yym942
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq937[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym945 := z.EncBinary()
				_ = yym945
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym947 := z.DecBinary()
	_ = yym947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct948 := r.ContainerType()
		if yyct948 == codecSelferValueTypeMap1234 {
			yyl948 := r.ReadMapStart()
			if yyl948 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl948, d)
			}
		} else if yyct948 == codecSelferValueTypeArray1234 {
			yyl948 := r.ReadArrayStart()
			if yyl948 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys949Slc
	var yyhl949 bool = l >= 0
	for yyj949 := 0; ; yyj949++ {
		if yyhl949 {
			if yyj949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys949Slc = r.DecodeBytes(yys949Slc, true, true)
		yys949 := string(yys949Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys949 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys949)
		} // end switch yys949
	} // end for yyj949
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj953 int
	var yyb953 bool
	var yyhl953 bool = l >= 0
	yyj953++
	if yyhl953 {
		yyb953 = yyj953 > l
	} else {
		yyb953 = r.CheckBreak()
	}
	if yyb953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj953++
	if yyhl953 {
		yyb953 = yyj953 > l
	} else {
		yyb953 = r.CheckBreak()
	}
	if yyb953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj953++
	if yyhl953 {
		yyb953 = yyj953 > l
	} else {
		yyb953 = r.CheckBreak()
	}
	if yyb953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj953++
		if yyhl953 {
			yyb953 = yyj953 > l
		} else {
			yyb953 = r.CheckBreak()
		}
		if yyb953 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj953-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym957 := z.EncBinary()
		_ = yym957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep958 := !z.EncBinary()
			yy2arr958 := z.EncBasicHandle().StructToArray
			var yyq958 [3]bool
			_, _, _ = yysep958, yyq958, yy2arr958
			const yyr958 bool = false
			yyq958[1] = x.Value != ""
			yyq958[2] = x.ValueFrom != nil
			var yynn958 int
			if yyr958 || yy2arr958 {
				r.EncodeArrayStart(3)
			} else {
				yynn958 = 1
				for _, b := range yyq958 {
					if b {
						yynn958++
					}
				}
				r.EncodeMapStart(yynn958)
				yynn958 = 0
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym960 := z.EncBinary()
				_ = yym960
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym961 := z.EncBinary()
				_ = yym961
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[1] {
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq958[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym964 := z.EncBinary()
					_ = yym964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq958[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym966 := z.DecBinary()
	_ = yym966
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct967 := r.ContainerType()
		if yyct967 == codecSelferValueTypeMap1234 {
			yyl967 := r.ReadMapStart()
			if yyl967 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl967, d)
			}
		} else if yyct967 == codecSelferValueTypeArray1234 {
			yyl967 := r.ReadArrayStart()
			if yyl967 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl967, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys968Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys968Slc
	var yyhl968 bool = l >= 0
	for yyj968 := 0; ; yyj968++ {
		if yyhl968 {
			if yyj968 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys968Slc = r.DecodeBytes(yys968Slc, true, true)
		yys968 := string(yys968Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys968 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys968)
		} // end switch yys968
	} // end for yyj968
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj972 int
	var yyb972 bool
	var yyhl972 bool = l >= 0
	yyj972++
	if yyhl972 {
		yyb972 = yyj972 > l
	} else {
		yyb972 = r.CheckBreak()
	}
	if yyb972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj972++
	if yyhl972 {
		yyb972 = yyj972 > l
	} else {
		yyb972 = r.CheckBreak()
	}
	if yyb972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj972++
	if yyhl972 {
		yyb972 = yyj972 > l
	} else {
		yyb972 = r.CheckBreak()
	}
	if yyb972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj972++
		if yyhl972 {
			yyb972 = yyj972 > l
		} else {
			yyb972 = r.CheckBreak()
		}
		if yyb972 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj972-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym976 := z.EncBinary()
		_ = yym976
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep977 := !z.EncBinary()
			yy2arr977 := z.EncBasicHandle().StructToArray
			var yyq977 [3]bool
			_, _, _ = yysep977, yyq977, yy2arr977
			const yyr977 bool = false
			yyq977[0] = x.FieldRef != nil
			yyq977[1] = x.ConfigMapKeyRef != nil
			yyq977[2] = x.SecretKeyRef != nil
			var yynn977 int
			if yyr977 || yy2arr977 {
				r.EncodeArrayStart(3)
			} else {
				yynn977 = 0
				for _, b := range yyq977 {
					if b {
						yynn977++
					}
				}
				r.EncodeMapStart(yynn977)
				yynn977 = 0
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq977[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq977[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq977[1] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq977[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq977[2] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq977[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym981 := z.DecBinary()
	_ = yym981
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct982 := r.ContainerType()
		if yyct982 == codecSelferValueTypeMap1234 {
			yyl982 := r.ReadMapStart()
			if yyl982 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl982, d)
			}
		} else if yyct982 == codecSelferValueTypeArray1234 {
			yyl982 := r.ReadArrayStart()
			if yyl982 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl982, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys983Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys983Slc
	var yyhl983 bool = l >= 0
	for yyj983 := 0; ; yyj983++ {
		if yyhl983 {
			if yyj983 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys983Slc = r.DecodeBytes(yys983Slc, true, true)
		yys983 := string(yys983Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys983 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys983)
		} // end switch yys983
	} // end for yyj983
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj987 int
	var yyb987 bool
	var yyhl987 bool = l >= 0
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj987++
		if yyhl987 {
			yyb987 = yyj987 > l
		} else {
			yyb987 = r.CheckBreak()
		}
		if yyb987 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj987-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym991 := z.EncBinary()
		_ = yym991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep992 := !z.EncBinary()
			yy2arr992 := z.EncBasicHandle().StructToArray
			var yyq992 [2]bool
			_, _, _ = yysep992, yyq992, yy2arr992
			const yyr992 bool = false
			yyq992[0] = x.APIVersion != ""
			var yynn992 int
			if yyr992 || yy2arr992 {
				r.EncodeArrayStart(2)
			} else {
				yynn992 = 1
				for _, b := range yyq992 {
					if b {
						yynn992++
					}
				}
				r.EncodeMapStart(yynn992)
				yynn992 = 0
			}
			if yyr992 || yy2arr992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq992[0] {
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq992[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr992 || yy2arr992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym997 := z.EncBinary()
				_ = yym997
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym998 := z.EncBinary()
				_ = yym998
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr992 || yy2arr992 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym999 := z.DecBinary()
	_ = yym999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1000 := r.ContainerType()
		if yyct1000 == codecSelferValueTypeMap1234 {
			yyl1000 := r.ReadMapStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1000, d)
			}
		} else if yyct1000 == codecSelferValueTypeArray1234 {
			yyl1000 := r.ReadArrayStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1001Slc
	var yyhl1001 bool = l >= 0
	for yyj1001 := 0; ; yyj1001++ {
		if yyhl1001 {
			if yyj1001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1001Slc = r.DecodeBytes(yys1001Slc, true, true)
		yys1001 := string(yys1001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1001 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1001)
		} // end switch yys1001
	} // end for yyj1001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1004 int
	var yyb1004 bool
	var yyhl1004 bool = l >= 0
	yyj1004++
	if yyhl1004 {
		yyb1004 = yyj1004 > l
	} else {
		yyb1004 = r.CheckBreak()
	}
	if yyb1004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1004++
	if yyhl1004 {
		yyb1004 = yyj1004 > l
	} else {
		yyb1004 = r.CheckBreak()
	}
	if yyb1004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1004++
		if yyhl1004 {
			yyb1004 = yyj1004 > l
		} else {
			yyb1004 = r.CheckBreak()
		}
		if yyb1004 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1004-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1007 := z.EncBinary()
		_ = yym1007
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1008 := !z.EncBinary()
			yy2arr1008 := z.EncBasicHandle().StructToArray
			var yyq1008 [2]bool
			_, _, _ = yysep1008, yyq1008, yy2arr1008
			const yyr1008 bool = false
			yyq1008[1] = x.Name != ""
			var yynn1008 int
			if yyr1008 || yy2arr1008 {
				r.EncodeArrayStart(2)
			} else {
				yynn1008 = 1
				for _, b := range yyq1008 {
					if b {
						yynn1008++
					}
				}
				r.EncodeMapStart(yynn1008)
				yynn1008 = 0
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1010 := z.EncBinary()
				_ = yym1010
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1011 := z.EncBinary()
				_ = yym1011
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[1] {
					yym1013 := z.EncBinary()
					_ = yym1013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1008[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1014 := z.EncBinary()
					_ = yym1014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1015 := z.DecBinary()
	_ = yym1015
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1016 := r.ContainerType()
		if yyct1016 == codecSelferValueTypeMap1234 {
			yyl1016 := r.ReadMapStart()
			if yyl1016 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1016, d)
			}
		} else if yyct1016 == codecSelferValueTypeArray1234 {
			yyl1016 := r.ReadArrayStart()
			if yyl1016 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1016, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1017Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1017Slc
	var yyhl1017 bool = l >= 0
	for yyj1017 := 0; ; yyj1017++ {
		if yyhl1017 {
			if yyj1017 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1017Slc = r.DecodeBytes(yys1017Slc, true, true)
		yys1017 := string(yys1017Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1017 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1017)
		} // end switch yys1017
	} // end for yyj1017
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1020 int
	var yyb1020 bool
	var yyhl1020 bool = l >= 0
	yyj1020++
	if yyhl1020 {
		yyb1020 = yyj1020 > l
	} else {
		yyb1020 = r.CheckBreak()
	}
	if yyb1020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1020++
	if yyhl1020 {
		yyb1020 = yyj1020 > l
	} else {
		yyb1020 = r.CheckBreak()
	}
	if yyb1020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj1020++
		if yyhl1020 {
			yyb1020 = yyj1020 > l
		} else {
			yyb1020 = r.CheckBreak()
		}
		if yyb1020 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1020-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1023 := z.EncBinary()
		_ = yym1023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1024 := !z.EncBinary()
			yy2arr1024 := z.EncBasicHandle().StructToArray
			var yyq1024 [2]bool
			_, _, _ = yysep1024, yyq1024, yy2arr1024
			const yyr1024 bool = false
			yyq1024[1] = x.Name != ""
			var yynn1024 int
			if yyr1024 || yy2arr1024 {
				r.EncodeArrayStart(2)
			} else {
				yynn1024 = 1
				for _, b := range yyq1024 {
					if b {
						yynn1024++
					}
				}
				r.EncodeMapStart(yynn1024)
				yynn1024 = 0
			}
			if yyr1024 || yy2arr1024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1026 := z.EncBinary()
				_ = yym1026
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1027 := z.EncBinary()
				_ = yym1027
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1024 || yy2arr1024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1024[1] {
					yym1029 := z.EncBinary()
					_ = yym1029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1024[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1024 || yy2arr1024 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1031 := z.DecBinary()
	_ = yym1031
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1032 := r.ContainerType()
		if yyct1032 == codecSelferValueTypeMap1234 {
			yyl1032 := r.ReadMapStart()
			if yyl1032 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1032, d)
			}
		} else if yyct1032 == codecSelferValueTypeArray1234 {
			yyl1032 := r.ReadArrayStart()
			if yyl1032 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1032, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1033Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1033Slc
	var yyhl1033 bool = l >= 0
	for yyj1033 := 0; ; yyj1033++ {
		if yyhl1033 {
			if yyj1033 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1033Slc = r.DecodeBytes(yys1033Slc, true, true)
		yys1033 := string(yys1033Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1033 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1033)
		} // end switch yys1033
	} // end for yyj1033
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1036 int
	var yyb1036 bool
	var yyhl1036 bool = l >= 0
	yyj1036++
	if yyhl1036 {
		yyb1036 = yyj1036 > l
	} else {
		yyb1036 = r.CheckBreak()
	}
	if yyb1036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1036++
	if yyhl1036 {
		yyb1036 = yyj1036 > l
	} else {
		yyb1036 = r.CheckBreak()
	}
	if yyb1036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj1036++
		if yyhl1036 {
			yyb1036 = yyj1036 > l
		} else {
			yyb1036 = r.CheckBreak()
		}
		if yyb1036 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1036-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1039 := z.EncBinary()
		_ = yym1039
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1040 := !z.EncBinary()
			yy2arr1040 := z.EncBasicHandle().StructToArray
			var yyq1040 [2]bool
			_, _, _ = yysep1040, yyq1040, yy2arr1040
			const yyr1040 bool = false
			var yynn1040 int
			if yyr1040 || yy2arr1040 {
				r.EncodeArrayStart(2)
			} else {
				yynn1040 = 2
				for _, b := range yyq1040 {
					if b {
						yynn1040++
					}
				}
				r.EncodeMapStart(yynn1040)
				yynn1040 = 0
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1045 := z.EncBinary()
				_ = yym1045
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1046 := z.EncBinary()
				_ = yym1046
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1047 := z.DecBinary()
	_ = yym1047
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1048 := r.ContainerType()
		if yyct1048 == codecSelferValueTypeMap1234 {
			yyl1048 := r.ReadMapStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1048, d)
			}
		} else if yyct1048 == codecSelferValueTypeArray1234 {
			yyl1048 := r.ReadArrayStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1048, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1049Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1049Slc
	var yyhl1049 bool = l >= 0
	for yyj1049 := 0; ; yyj1049++ {
		if yyhl1049 {
			if yyj1049 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1049Slc = r.DecodeBytes(yys1049Slc, true, true)
		yys1049 := string(yys1049Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1049 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1049)
		} // end switch yys1049
	} // end for yyj1049
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1052 int
	var yyb1052 bool
	var yyhl1052 bool = l >= 0
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1052++
		if yyhl1052 {
			yyb1052 = yyj1052 > l
		} else {
			yyb1052 = r.CheckBreak()
		}
		if yyb1052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1055 := z.EncBinary()
		_ = yym1055
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1056 := !z.EncBinary()
			yy2arr1056 := z.EncBasicHandle().StructToArray
			var yyq1056 [5]bool
			_, _, _ = yysep1056, yyq1056, yy2arr1056
			const yyr1056 bool = false
			yyq1056[0] = x.Path != ""
			yyq1056[2] = x.Host != ""
			yyq1056[3] = x.Scheme != ""
			yyq1056[4] = len(x.HTTPHeaders) != 0
			var yynn1056 int
			if yyr1056 || yy2arr1056 {
				r.EncodeArrayStart(5)
			} else {
				yynn1056 = 1
				for _, b := range yyq1056 {
					if b {
						yynn1056++
					}
				}
				r.EncodeMapStart(yynn1056)
				yynn1056 = 0
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[0] {
					yym1058 := z.EncBinary()
					_ = yym1058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1056[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1059 := z.EncBinary()
					_ = yym1059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1061 := &x.Port
				yym1062 := z.EncBinary()
				_ = yym1062
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1061) {
				} else if !yym1062 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1061)
				} else {
					z.EncFallback(yy1061)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1063 := &x.Port
				yym1064 := z.EncBinary()
				_ = yym1064
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1063) {
				} else if !yym1064 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1063)
				} else {
					z.EncFallback(yy1063)
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[2] {
					yym1066 := z.EncBinary()
					_ = yym1066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1056[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1056[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1070 := z.EncBinary()
						_ = yym1070
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1056[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1071 := z.EncBinary()
						_ = yym1071
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1072 := z.DecBinary()
	_ = yym1072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1073 := r.ContainerType()
		if yyct1073 == codecSelferValueTypeMap1234 {
			yyl1073 := r.ReadMapStart()
			if yyl1073 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1073, d)
			}
		} else if yyct1073 == codecSelferValueTypeArray1234 {
			yyl1073 := r.ReadArrayStart()
			if yyl1073 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1073, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1074Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1074Slc
	var yyhl1074 bool = l >= 0
	for yyj1074 := 0; ; yyj1074++ {
		if yyhl1074 {
			if yyj1074 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1074Slc = r.DecodeBytes(yys1074Slc, true, true)
		yys1074 := string(yys1074Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1074 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1076 := &x.Port
				yym1077 := z.DecBinary()
				_ = yym1077
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1076) {
				} else if !yym1077 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1076)
				} else {
					z.DecFallback(yyv1076, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1080 := &x.HTTPHeaders
				yym1081 := z.DecBinary()
				_ = yym1081
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1080), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1074)
		} // end switch yys1074
	} // end for yyj1074
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1082 int
	var yyb1082 bool
	var yyhl1082 bool = l >= 0
	yyj1082++
	if yyhl1082 {
		yyb1082 = yyj1082 > l
	} else {
		yyb1082 = r.CheckBreak()
	}
	if yyb1082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1082++
	if yyhl1082 {
		yyb1082 = yyj1082 > l
	} else {
		yyb1082 = r.CheckBreak()
	}
	if yyb1082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1084 := &x.Port
		yym1085 := z.DecBinary()
		_ = yym1085
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1084) {
		} else if !yym1085 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1084)
		} else {
			z.DecFallback(yyv1084, false)
		}
	}
	yyj1082++
	if yyhl1082 {
		yyb1082 = yyj1082 > l
	} else {
		yyb1082 = r.CheckBreak()
	}
	if yyb1082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1082++
	if yyhl1082 {
		yyb1082 = yyj1082 > l
	} else {
		yyb1082 = r.CheckBreak()
	}
	if yyb1082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1082++
	if yyhl1082 {
		yyb1082 = yyj1082 > l
	} else {
		yyb1082 = r.CheckBreak()
	}
	if yyb1082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1088 := &x.HTTPHeaders
		yym1089 := z.DecBinary()
		_ = yym1089
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1088), d)
		}
	}
	for {
		yyj1082++
		if yyhl1082 {
			yyb1082 = yyj1082 > l
		} else {
			yyb1082 = r.CheckBreak()
		}
		if yyb1082 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1082-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1090 := z.EncBinary()
	_ = yym1090
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1091 := z.DecBinary()
	_ = yym1091
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1092 := z.EncBinary()
		_ = yym1092
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1093 := !z.EncBinary()
			yy2arr1093 := z.EncBasicHandle().StructToArray
			var yyq1093 [1]bool
			_, _, _ = yysep1093, yyq1093, yy2arr1093
			const yyr1093 bool = false
			var yynn1093 int
			if yyr1093 || yy2arr1093 {
				r.EncodeArrayStart(1)
			} else {
				yynn1093 = 1
				for _, b := range yyq1093 {
					if b {
						yynn1093++
					}
				}
				r.EncodeMapStart(yynn1093)
				yynn1093 = 0
			}
			if yyr1093 || yy2arr1093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1095 := &x.Port
				yym1096 := z.EncBinary()
				_ = yym1096
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1095) {
				} else if !yym1096 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1095)
				} else {
					z.EncFallback(yy1095)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1097 := &x.Port
				yym1098 := z.EncBinary()
				_ = yym1098
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1097) {
				} else if !yym1098 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1097)
				} else {
					z.EncFallback(yy1097)
				}
			}
			if yyr1093 || yy2arr1093 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1099 := z.DecBinary()
	_ = yym1099
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1100 := r.ContainerType()
		if yyct1100 == codecSelferValueTypeMap1234 {
			yyl1100 := r.ReadMapStart()
			if yyl1100 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1100, d)
			}
		} else if yyct1100 == codecSelferValueTypeArray1234 {
			yyl1100 := r.ReadArrayStart()
			if yyl1100 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1101Slc
	var yyhl1101 bool = l >= 0
	for yyj1101 := 0; ; yyj1101++ {
		if yyhl1101 {
			if yyj1101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1101Slc = r.DecodeBytes(yys1101Slc, true, true)
		yys1101 := string(yys1101Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1101 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1102 := &x.Port
				yym1103 := z.DecBinary()
				_ = yym1103
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1102) {
				} else if !yym1103 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1102)
				} else {
					z.DecFallback(yyv1102, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1101)
		} // end switch yys1101
	} // end for yyj1101
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1104 int
	var yyb1104 bool
	var yyhl1104 bool = l >= 0
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1105 := &x.Port
		yym1106 := z.DecBinary()
		_ = yym1106
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1105) {
		} else if !yym1106 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1105)
		} else {
			z.DecFallback(yyv1105, false)
		}
	}
	for {
		yyj1104++
		if yyhl1104 {
			yyb1104 = yyj1104 > l
		} else {
			yyb1104 = r.CheckBreak()
		}
		if yyb1104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1107 := z.EncBinary()
		_ = yym1107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1108 := !z.EncBinary()
			yy2arr1108 := z.EncBasicHandle().StructToArray
			var yyq1108 [1]bool
			_, _, _ = yysep1108, yyq1108, yy2arr1108
			const yyr1108 bool = false
			yyq1108[0] = len(x.Command) != 0
			var yynn1108 int
			if yyr1108 || yy2arr1108 {
				r.EncodeArrayStart(1)
			} else {
				yynn1108 = 0
				for _, b := range yyq1108 {
					if b {
						yynn1108++
					}
				}
				r.EncodeMapStart(yynn1108)
				yynn1108 = 0
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1108[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1110 := z.EncBinary()
						_ = yym1110
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1108[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1111 := z.EncBinary()
						_ = yym1111
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1112 := z.DecBinary()
	_ = yym1112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1113 := r.ContainerType()
		if yyct1113 == codecSelferValueTypeMap1234 {
			yyl1113 := r.ReadMapStart()
			if yyl1113 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1113, d)
			}
		} else if yyct1113 == codecSelferValueTypeArray1234 {
			yyl1113 := r.ReadArrayStart()
			if yyl1113 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1114Slc
	var yyhl1114 bool = l >= 0
	for yyj1114 := 0; ; yyj1114++ {
		if yyhl1114 {
			if yyj1114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1114Slc = r.DecodeBytes(yys1114Slc, true, true)
		yys1114 := string(yys1114Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1114 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1115 := &x.Command
				yym1116 := z.DecBinary()
				_ = yym1116
				if false {
				} else {
					z.F.DecSliceStringX(yyv1115, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1114)
		} // end switch yys1114
	} // end for yyj1114
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1117 int
	var yyb1117 bool
	var yyhl1117 bool = l >= 0
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1118 := &x.Command
		yym1119 := z.DecBinary()
		_ = yym1119
		if false {
		} else {
			z.F.DecSliceStringX(yyv1118, false, d)
		}
	}
	for {
		yyj1117++
		if yyhl1117 {
			yyb1117 = yyj1117 > l
		} else {
			yyb1117 = r.CheckBreak()
		}
		if yyb1117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1120 := z.EncBinary()
		_ = yym1120
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1121 := !z.EncBinary()
			yy2arr1121 := z.EncBasicHandle().StructToArray
			var yyq1121 [8]bool
			_, _, _ = yysep1121, yyq1121, yy2arr1121
			const yyr1121 bool = false
			yyq1121[0] = x.InitialDelaySeconds != 0
			yyq1121[1] = x.TimeoutSeconds != 0
			yyq1121[2] = x.PeriodSeconds != 0
			yyq1121[3] = x.SuccessThreshold != 0
			yyq1121[4] = x.FailureThreshold != 0
			yyq1121[5] = x.Handler.Exec != nil && x.Exec != nil
			yyq1121[6] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1121[7] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			var yynn1121 int
			if yyr1121 || yy2arr1121 {
				r.EncodeArrayStart(8)
			} else {
				yynn1121 = 0
				for _, b := range yyq1121 {
					if b {
						yynn1121++
					}
				}
				r.EncodeMapStart(yynn1121)
				yynn1121 = 0
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1121[0] {
					yym1123 := z.EncBinary()
					_ = yym1123
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1121[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1124 := z.EncBinary()
					_ = yym1124
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1121[1] {
					yym1126 := z.EncBinary()
					_ = yym1126
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1121[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1121[2] {
					yym1129 := z.EncBinary()
					_ = yym1129
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1121[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1130 := z.EncBinary()
					_ = yym1130
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1121[3] {
					yym1132 := z.EncBinary()
					_ = yym1132
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1121[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1133 := z.EncBinary()
					_ = yym1133
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1121[4] {
					yym1135 := z.EncBinary()
					_ = yym1135
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1121[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1136 := z.EncBinary()
					_ = yym1136
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			var yyn1137 bool
			if x.Handler.Exec == nil {
				yyn1137 = true
				goto LABEL1137
			}
		LABEL1137:
			if yyr1121 || yy2arr1121 {
				if yyn1137 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1121[5] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1121[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1137 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1138 bool
			if x.Handler.HTTPGet == nil {
				yyn1138 = true
				goto LABEL1138
			}
		LABEL1138:
			if yyr1121 || yy2arr1121 {
				if yyn1138 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1121[6] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1121[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1138 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1139 bool
			if x.Handler.TCPSocket == nil {
				yyn1139 = true
				goto LABEL1139
			}
		LABEL1139:
			if yyr1121 || yy2arr1121 {
				if yyn1139 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1121[7] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1121[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1139 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1140 := z.DecBinary()
	_ = yym1140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1141 := r.ContainerType()
		if yyct1141 == codecSelferValueTypeMap1234 {
			yyl1141 := r.ReadMapStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1141, d)
			}
		} else if yyct1141 == codecSelferValueTypeArray1234 {
			yyl1141 := r.ReadArrayStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1142Slc
	var yyhl1142 bool = l >= 0
	for yyj1142 := 0; ; yyj1142++ {
		if yyhl1142 {
			if yyj1142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1142Slc = r.DecodeBytes(yys1142Slc, true, true)
		yys1142 := string(yys1142Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1142 {
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1142)
		} // end switch yys1142
	} // end for yyj1142
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1151 int
	var yyb1151 bool
	var yyhl1151 bool = l >= 0
	yyj1151++
	if yyhl1151 {
		yyb1151 = yyj1151 > l
	} else {
		yyb1151 = r.CheckBreak()
	}
	if yyb1151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1151++
	if yyhl1151 {
		yyb1151 = yyj1151 > l
	} else {
		yyb1151 = r.CheckBreak()
	}
	if yyb1151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1151++
	if yyhl1151 {
		yyb1151 = yyj1151 > l
	} else {
		yyb1151 = r.CheckBreak()
	}
	if yyb1151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1151++
	if yyhl1151 {
		yyb1151 = yyj1151 > l
	} else {
		yyb1151 = r.CheckBreak()
	}
	if yyb1151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1151++
	if yyhl1151 {
		yyb1151 = yyj1151 > l
	} else {
		yyb1151 = r.CheckBreak()
	}
	if yyb1151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1151++
	if yyhl1151 {
		yyb1151 = yyj1151 > l
	} else {
		yyb1151 = r.CheckBreak()
	}
	if yyb1151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1151++
	if yyhl1151 {
		yyb1151 = yyj1151 > l
	} else {
		yyb1151 = r.CheckBreak()
	}
	if yyb1151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1151++
	if yyhl1151 {
		yyb1151 = yyj1151 > l
	} else {
		yyb1151 = r.CheckBreak()
	}
	if yyb1151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1151++
		if yyhl1151 {
			yyb1151 = yyj1151 > l
		} else {
			yyb1151 = r.CheckBreak()
		}
		if yyb1151 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1151-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1160 := z.EncBinary()
	_ = yym1160
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1161 := z.DecBinary()
	_ = yym1161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1162 := z.EncBinary()
	_ = yym1162
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1163 := z.DecBinary()
	_ = yym1163
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1164 := z.EncBinary()
		_ = yym1164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1165 := !z.EncBinary()
			yy2arr1165 := z.EncBasicHandle().StructToArray
			var yyq1165 [2]bool
			_, _, _ = yysep1165, yyq1165, yy2arr1165
			const yyr1165 bool = false
			yyq1165[0] = len(x.Add) != 0
			yyq1165[1] = len(x.Drop) != 0
			var yynn1165 int
			if yyr1165 || yy2arr1165 {
				r.EncodeArrayStart(2)
			} else {
				yynn1165 = 0
				for _, b := range yyq1165 {
					if b {
						yynn1165++
					}
				}
				r.EncodeMapStart(yynn1165)
				yynn1165 = 0
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1167 := z.EncBinary()
						_ = yym1167
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1168 := z.EncBinary()
						_ = yym1168
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1170 := z.EncBinary()
						_ = yym1170
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1171 := z.EncBinary()
						_ = yym1171
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1172 := z.DecBinary()
	_ = yym1172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1173 := r.ContainerType()
		if yyct1173 == codecSelferValueTypeMap1234 {
			yyl1173 := r.ReadMapStart()
			if yyl1173 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1173, d)
			}
		} else if yyct1173 == codecSelferValueTypeArray1234 {
			yyl1173 := r.ReadArrayStart()
			if yyl1173 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1174Slc
	var yyhl1174 bool = l >= 0
	for yyj1174 := 0; ; yyj1174++ {
		if yyhl1174 {
			if yyj1174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1174Slc = r.DecodeBytes(yys1174Slc, true, true)
		yys1174 := string(yys1174Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1174 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1175 := &x.Add
				yym1176 := z.DecBinary()
				_ = yym1176
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1175), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1177 := &x.Drop
				yym1178 := z.DecBinary()
				_ = yym1178
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1177), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1174)
		} // end switch yys1174
	} // end for yyj1174
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1179 int
	var yyb1179 bool
	var yyhl1179 bool = l >= 0
	yyj1179++
	if yyhl1179 {
		yyb1179 = yyj1179 > l
	} else {
		yyb1179 = r.CheckBreak()
	}
	if yyb1179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1180 := &x.Add
		yym1181 := z.DecBinary()
		_ = yym1181
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1180), d)
		}
	}
	yyj1179++
	if yyhl1179 {
		yyb1179 = yyj1179 > l
	} else {
		yyb1179 = r.CheckBreak()
	}
	if yyb1179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1182 := &x.Drop
		yym1183 := z.DecBinary()
		_ = yym1183
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1182), d)
		}
	}
	for {
		yyj1179++
		if yyhl1179 {
			yyb1179 = yyj1179 > l
		} else {
			yyb1179 = r.CheckBreak()
		}
		if yyb1179 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1179-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1184 := z.EncBinary()
		_ = yym1184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1185 := !z.EncBinary()
			yy2arr1185 := z.EncBasicHandle().StructToArray
			var yyq1185 [2]bool
			_, _, _ = yysep1185, yyq1185, yy2arr1185
			const yyr1185 bool = false
			yyq1185[0] = len(x.Limits) != 0
			yyq1185[1] = len(x.Requests) != 0
			var yynn1185 int
			if yyr1185 || yy2arr1185 {
				r.EncodeArrayStart(2)
			} else {
				yynn1185 = 0
				for _, b := range yyq1185 {
					if b {
						yynn1185++
					}
				}
				r.EncodeMapStart(yynn1185)
				yynn1185 = 0
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1185[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1185[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1185[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1185[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1188 := z.DecBinary()
	_ = yym1188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1189 := r.ContainerType()
		if yyct1189 == codecSelferValueTypeMap1234 {
			yyl1189 := r.ReadMapStart()
			if yyl1189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1189, d)
			}
		} else if yyct1189 == codecSelferValueTypeArray1234 {
			yyl1189 := r.ReadArrayStart()
			if yyl1189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1190Slc
	var yyhl1190 bool = l >= 0
	for yyj1190 := 0; ; yyj1190++ {
		if yyhl1190 {
			if yyj1190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1190Slc = r.DecodeBytes(yys1190Slc, true, true)
		yys1190 := string(yys1190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1190 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1191 := &x.Limits
				yyv1191.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1192 := &x.Requests
				yyv1192.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1190)
		} // end switch yys1190
	} // end for yyj1190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1193 int
	var yyb1193 bool
	var yyhl1193 bool = l >= 0
	yyj1193++
	if yyhl1193 {
		yyb1193 = yyj1193 > l
	} else {
		yyb1193 = r.CheckBreak()
	}
	if yyb1193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1194 := &x.Limits
		yyv1194.CodecDecodeSelf(d)
	}
	yyj1193++
	if yyhl1193 {
		yyb1193 = yyj1193 > l
	} else {
		yyb1193 = r.CheckBreak()
	}
	if yyb1193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1195 := &x.Requests
		yyv1195.CodecDecodeSelf(d)
	}
	for {
		yyj1193++
		if yyhl1193 {
			yyb1193 = yyj1193 > l
		} else {
			yyb1193 = r.CheckBreak()
		}
		if yyb1193 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1193-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1196 := z.EncBinary()
		_ = yym1196
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1197 := !z.EncBinary()
			yy2arr1197 := z.EncBasicHandle().StructToArray
			var yyq1197 [18]bool
			_, _, _ = yysep1197, yyq1197, yy2arr1197
			const yyr1197 bool = false
			yyq1197[1] = x.Image != ""
			yyq1197[2] = len(x.Command) != 0
			yyq1197[3] = len(x.Args) != 0
			yyq1197[4] = x.WorkingDir != ""
			yyq1197[5] = len(x.Ports) != 0
			yyq1197[6] = len(x.Env) != 0
			yyq1197[7] = true
			yyq1197[8] = len(x.VolumeMounts) != 0
			yyq1197[9] = x.LivenessProbe != nil
			yyq1197[10] = x.ReadinessProbe != nil
			yyq1197[11] = x.Lifecycle != nil
			yyq1197[12] = x.TerminationMessagePath != ""
			yyq1197[13] = x.ImagePullPolicy != ""
			yyq1197[14] = x.SecurityContext != nil
			yyq1197[15] = x.Stdin != false
			yyq1197[16] = x.StdinOnce != false
			yyq1197[17] = x.TTY != false
			var yynn1197 int
			if yyr1197 || yy2arr1197 {
				r.EncodeArrayStart(18)
			} else {
				yynn1197 = 1
				for _, b := range yyq1197 {
					if b {
						yynn1197++
					}
				}
				r.EncodeMapStart(yynn1197)
				yynn1197 = 0
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1199 := z.EncBinary()
				_ = yym1199
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1200 := z.EncBinary()
				_ = yym1200
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[1] {
					yym1202 := z.EncBinary()
					_ = yym1202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1197[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1205 := z.EncBinary()
						_ = yym1205
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1197[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1206 := z.EncBinary()
						_ = yym1206
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1208 := z.EncBinary()
						_ = yym1208
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1197[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1209 := z.EncBinary()
						_ = yym1209
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[4] {
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1197[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1212 := z.EncBinary()
					_ = yym1212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1214 := z.EncBinary()
						_ = yym1214
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1197[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1215 := z.EncBinary()
						_ = yym1215
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1217 := z.EncBinary()
						_ = yym1217
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1197[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1218 := z.EncBinary()
						_ = yym1218
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[7] {
					yy1220 := &x.Resources
					yy1220.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1197[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1221 := &x.Resources
					yy1221.CodecEncodeSelf(e)
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1223 := z.EncBinary()
						_ = yym1223
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1197[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1224 := z.EncBinary()
						_ = yym1224
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1197[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1197[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1197[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[12] {
					yym1229 := z.EncBinary()
					_ = yym1229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1197[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1197[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1197[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[15] {
					yym1234 := z.EncBinary()
					_ = yym1234
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1197[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[16] {
					yym1237 := z.EncBinary()
					_ = yym1237
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1197[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1238 := z.EncBinary()
					_ = yym1238
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1197[17] {
					yym1240 := z.EncBinary()
					_ = yym1240
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1197[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1241 := z.EncBinary()
					_ = yym1241
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1242 := z.DecBinary()
	_ = yym1242
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1243 := r.ContainerType()
		if yyct1243 == codecSelferValueTypeMap1234 {
			yyl1243 := r.ReadMapStart()
			if yyl1243 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1243, d)
			}
		} else if yyct1243 == codecSelferValueTypeArray1234 {
			yyl1243 := r.ReadArrayStart()
			if yyl1243 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1243, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1244Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1244Slc
	var yyhl1244 bool = l >= 0
	for yyj1244 := 0; ; yyj1244++ {
		if yyhl1244 {
			if yyj1244 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1244Slc = r.DecodeBytes(yys1244Slc, true, true)
		yys1244 := string(yys1244Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1244 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1247 := &x.Command
				yym1248 := z.DecBinary()
				_ = yym1248
				if false {
				} else {
					z.F.DecSliceStringX(yyv1247, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1249 := &x.Args
				yym1250 := z.DecBinary()
				_ = yym1250
				if false {
				} else {
					z.F.DecSliceStringX(yyv1249, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1252 := &x.Ports
				yym1253 := z.DecBinary()
				_ = yym1253
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1252), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1254 := &x.Env
				yym1255 := z.DecBinary()
				_ = yym1255
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1254), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1256 := &x.Resources
				yyv1256.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1257 := &x.VolumeMounts
				yym1258 := z.DecBinary()
				_ = yym1258
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1257), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1244)
		} // end switch yys1244
	} // end for yyj1244
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1268 int
	var yyb1268 bool
	var yyhl1268 bool = l >= 0
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1271 := &x.Command
		yym1272 := z.DecBinary()
		_ = yym1272
		if false {
		} else {
			z.F.DecSliceStringX(yyv1271, false, d)
		}
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1273 := &x.Args
		yym1274 := z.DecBinary()
		_ = yym1274
		if false {
		} else {
			z.F.DecSliceStringX(yyv1273, false, d)
		}
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1276 := &x.Ports
		yym1277 := z.DecBinary()
		_ = yym1277
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1276), d)
		}
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1278 := &x.Env
		yym1279 := z.DecBinary()
		_ = yym1279
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1278), d)
		}
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1280 := &x.Resources
		yyv1280.CodecDecodeSelf(d)
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1281 := &x.VolumeMounts
		yym1282 := z.DecBinary()
		_ = yym1282
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1281), d)
		}
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1268++
		if yyhl1268 {
			yyb1268 = yyj1268 > l
		} else {
			yyb1268 = r.CheckBreak()
		}
		if yyb1268 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1268-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1292 := z.EncBinary()
		_ = yym1292
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1293 := !z.EncBinary()
			yy2arr1293 := z.EncBasicHandle().StructToArray
			var yyq1293 [3]bool
			_, _, _ = yysep1293, yyq1293, yy2arr1293
			const yyr1293 bool = false
			yyq1293[0] = x.Exec != nil
			yyq1293[1] = x.HTTPGet != nil
			yyq1293[2] = x.TCPSocket != nil
			var yynn1293 int
			if yyr1293 || yy2arr1293 {
				r.EncodeArrayStart(3)
			} else {
				yynn1293 = 0
				for _, b := range yyq1293 {
					if b {
						yynn1293++
					}
				}
				r.EncodeMapStart(yynn1293)
				yynn1293 = 0
			}
			if yyr1293 || yy2arr1293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1293[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1293[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1293 || yy2arr1293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1293[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1293[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1293 || yy2arr1293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1293[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1293[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1293 || yy2arr1293 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1297 := z.DecBinary()
	_ = yym1297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1298 := r.ContainerType()
		if yyct1298 == codecSelferValueTypeMap1234 {
			yyl1298 := r.ReadMapStart()
			if yyl1298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1298, d)
			}
		} else if yyct1298 == codecSelferValueTypeArray1234 {
			yyl1298 := r.ReadArrayStart()
			if yyl1298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1299Slc
	var yyhl1299 bool = l >= 0
	for yyj1299 := 0; ; yyj1299++ {
		if yyhl1299 {
			if yyj1299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1299Slc = r.DecodeBytes(yys1299Slc, true, true)
		yys1299 := string(yys1299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1299 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1299)
		} // end switch yys1299
	} // end for yyj1299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1303 int
	var yyb1303 bool
	var yyhl1303 bool = l >= 0
	yyj1303++
	if yyhl1303 {
		yyb1303 = yyj1303 > l
	} else {
		yyb1303 = r.CheckBreak()
	}
	if yyb1303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1303++
	if yyhl1303 {
		yyb1303 = yyj1303 > l
	} else {
		yyb1303 = r.CheckBreak()
	}
	if yyb1303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1303++
	if yyhl1303 {
		yyb1303 = yyj1303 > l
	} else {
		yyb1303 = r.CheckBreak()
	}
	if yyb1303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1303++
		if yyhl1303 {
			yyb1303 = yyj1303 > l
		} else {
			yyb1303 = r.CheckBreak()
		}
		if yyb1303 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1303-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1307 := z.EncBinary()
		_ = yym1307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1308 := !z.EncBinary()
			yy2arr1308 := z.EncBasicHandle().StructToArray
			var yyq1308 [2]bool
			_, _, _ = yysep1308, yyq1308, yy2arr1308
			const yyr1308 bool = false
			yyq1308[0] = x.PostStart != nil
			yyq1308[1] = x.PreStop != nil
			var yynn1308 int
			if yyr1308 || yy2arr1308 {
				r.EncodeArrayStart(2)
			} else {
				yynn1308 = 0
				for _, b := range yyq1308 {
					if b {
						yynn1308++
					}
				}
				r.EncodeMapStart(yynn1308)
				yynn1308 = 0
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1311 := z.DecBinary()
	_ = yym1311
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1312 := r.ContainerType()
		if yyct1312 == codecSelferValueTypeMap1234 {
			yyl1312 := r.ReadMapStart()
			if yyl1312 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1312, d)
			}
		} else if yyct1312 == codecSelferValueTypeArray1234 {
			yyl1312 := r.ReadArrayStart()
			if yyl1312 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1312, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1313Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1313Slc
	var yyhl1313 bool = l >= 0
	for yyj1313 := 0; ; yyj1313++ {
		if yyhl1313 {
			if yyj1313 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1313Slc = r.DecodeBytes(yys1313Slc, true, true)
		yys1313 := string(yys1313Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1313 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1313)
		} // end switch yys1313
	} // end for yyj1313
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1316 int
	var yyb1316 bool
	var yyhl1316 bool = l >= 0
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1316++
		if yyhl1316 {
			yyb1316 = yyj1316 > l
		} else {
			yyb1316 = r.CheckBreak()
		}
		if yyb1316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1319 := z.EncBinary()
	_ = yym1319
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1320 := z.DecBinary()
	_ = yym1320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1321 := z.EncBinary()
		_ = yym1321
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1322 := !z.EncBinary()
			yy2arr1322 := z.EncBasicHandle().StructToArray
			var yyq1322 [2]bool
			_, _, _ = yysep1322, yyq1322, yy2arr1322
			const yyr1322 bool = false
			yyq1322[0] = x.Reason != ""
			yyq1322[1] = x.Message != ""
			var yynn1322 int
			if yyr1322 || yy2arr1322 {
				r.EncodeArrayStart(2)
			} else {
				yynn1322 = 0
				for _, b := range yyq1322 {
					if b {
						yynn1322++
					}
				}
				r.EncodeMapStart(yynn1322)
				yynn1322 = 0
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1322[0] {
					yym1324 := z.EncBinary()
					_ = yym1324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1322[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1325 := z.EncBinary()
					_ = yym1325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1322[1] {
					yym1327 := z.EncBinary()
					_ = yym1327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1322[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1329 := z.DecBinary()
	_ = yym1329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1330 := r.ContainerType()
		if yyct1330 == codecSelferValueTypeMap1234 {
			yyl1330 := r.ReadMapStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1330, d)
			}
		} else if yyct1330 == codecSelferValueTypeArray1234 {
			yyl1330 := r.ReadArrayStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1331Slc
	var yyhl1331 bool = l >= 0
	for yyj1331 := 0; ; yyj1331++ {
		if yyhl1331 {
			if yyj1331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1331Slc = r.DecodeBytes(yys1331Slc, true, true)
		yys1331 := string(yys1331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1331 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1331)
		} // end switch yys1331
	} // end for yyj1331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1334 int
	var yyb1334 bool
	var yyhl1334 bool = l >= 0
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1334++
		if yyhl1334 {
			yyb1334 = yyj1334 > l
		} else {
			yyb1334 = r.CheckBreak()
		}
		if yyb1334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1337 := z.EncBinary()
		_ = yym1337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1338 := !z.EncBinary()
			yy2arr1338 := z.EncBasicHandle().StructToArray
			var yyq1338 [1]bool
			_, _, _ = yysep1338, yyq1338, yy2arr1338
			const yyr1338 bool = false
			yyq1338[0] = true
			var yynn1338 int
			if yyr1338 || yy2arr1338 {
				r.EncodeArrayStart(1)
			} else {
				yynn1338 = 0
				for _, b := range yyq1338 {
					if b {
						yynn1338++
					}
				}
				r.EncodeMapStart(yynn1338)
				yynn1338 = 0
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1338[0] {
					yy1340 := &x.StartedAt
					yym1341 := z.EncBinary()
					_ = yym1341
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1340) {
					} else if yym1341 {
						z.EncBinaryMarshal(yy1340)
					} else if !yym1341 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1340)
					} else {
						z.EncFallback(yy1340)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1342 := &x.StartedAt
					yym1343 := z.EncBinary()
					_ = yym1343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1342) {
					} else if yym1343 {
						z.EncBinaryMarshal(yy1342)
					} else if !yym1343 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1342)
					} else {
						z.EncFallback(yy1342)
					}
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1344 := z.DecBinary()
	_ = yym1344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1345 := r.ContainerType()
		if yyct1345 == codecSelferValueTypeMap1234 {
			yyl1345 := r.ReadMapStart()
			if yyl1345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1345, d)
			}
		} else if yyct1345 == codecSelferValueTypeArray1234 {
			yyl1345 := r.ReadArrayStart()
			if yyl1345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1346Slc
	var yyhl1346 bool = l >= 0
	for yyj1346 := 0; ; yyj1346++ {
		if yyhl1346 {
			if yyj1346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1346Slc = r.DecodeBytes(yys1346Slc, true, true)
		yys1346 := string(yys1346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1346 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1347 := &x.StartedAt
				yym1348 := z.DecBinary()
				_ = yym1348
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1347) {
				} else if yym1348 {
					z.DecBinaryUnmarshal(yyv1347)
				} else if !yym1348 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1347)
				} else {
					z.DecFallback(yyv1347, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1346)
		} // end switch yys1346
	} // end for yyj1346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1349 int
	var yyb1349 bool
	var yyhl1349 bool = l >= 0
	yyj1349++
	if yyhl1349 {
		yyb1349 = yyj1349 > l
	} else {
		yyb1349 = r.CheckBreak()
	}
	if yyb1349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1350 := &x.StartedAt
		yym1351 := z.DecBinary()
		_ = yym1351
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1350) {
		} else if yym1351 {
			z.DecBinaryUnmarshal(yyv1350)
		} else if !yym1351 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1350)
		} else {
			z.DecFallback(yyv1350, false)
		}
	}
	for {
		yyj1349++
		if yyhl1349 {
			yyb1349 = yyj1349 > l
		} else {
			yyb1349 = r.CheckBreak()
		}
		if yyb1349 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1349-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1352 := z.EncBinary()
		_ = yym1352
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1353 := !z.EncBinary()
			yy2arr1353 := z.EncBasicHandle().StructToArray
			var yyq1353 [7]bool
			_, _, _ = yysep1353, yyq1353, yy2arr1353
			const yyr1353 bool = false
			yyq1353[1] = x.Signal != 0
			yyq1353[2] = x.Reason != ""
			yyq1353[3] = x.Message != ""
			yyq1353[4] = true
			yyq1353[5] = true
			yyq1353[6] = x.ContainerID != ""
			var yynn1353 int
			if yyr1353 || yy2arr1353 {
				r.EncodeArrayStart(7)
			} else {
				yynn1353 = 1
				for _, b := range yyq1353 {
					if b {
						yynn1353++
					}
				}
				r.EncodeMapStart(yynn1353)
				yynn1353 = 0
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1355 := z.EncBinary()
				_ = yym1355
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1356 := z.EncBinary()
				_ = yym1356
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1353[1] {
					yym1358 := z.EncBinary()
					_ = yym1358
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1353[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1353[2] {
					yym1361 := z.EncBinary()
					_ = yym1361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1353[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1362 := z.EncBinary()
					_ = yym1362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1353[3] {
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1353[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1365 := z.EncBinary()
					_ = yym1365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1353[4] {
					yy1367 := &x.StartedAt
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1367) {
					} else if yym1368 {
						z.EncBinaryMarshal(yy1367)
					} else if !yym1368 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1367)
					} else {
						z.EncFallback(yy1367)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1353[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1369 := &x.StartedAt
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1369) {
					} else if yym1370 {
						z.EncBinaryMarshal(yy1369)
					} else if !yym1370 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1369)
					} else {
						z.EncFallback(yy1369)
					}
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1353[5] {
					yy1372 := &x.FinishedAt
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1372) {
					} else if yym1373 {
						z.EncBinaryMarshal(yy1372)
					} else if !yym1373 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1372)
					} else {
						z.EncFallback(yy1372)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1353[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1374 := &x.FinishedAt
					yym1375 := z.EncBinary()
					_ = yym1375
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1374) {
					} else if yym1375 {
						z.EncBinaryMarshal(yy1374)
					} else if !yym1375 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1374)
					} else {
						z.EncFallback(yy1374)
					}
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1353[6] {
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1353[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1378 := z.EncBinary()
					_ = yym1378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1379 := z.DecBinary()
	_ = yym1379
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1380 := r.ContainerType()
		if yyct1380 == codecSelferValueTypeMap1234 {
			yyl1380 := r.ReadMapStart()
			if yyl1380 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1380, d)
			}
		} else if yyct1380 == codecSelferValueTypeArray1234 {
			yyl1380 := r.ReadArrayStart()
			if yyl1380 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1380, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1381Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1381Slc
	var yyhl1381 bool = l >= 0
	for yyj1381 := 0; ; yyj1381++ {
		if yyhl1381 {
			if yyj1381 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1381Slc = r.DecodeBytes(yys1381Slc, true, true)
		yys1381 := string(yys1381Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1381 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1386 := &x.StartedAt
				yym1387 := z.DecBinary()
				_ = yym1387
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1386) {
				} else if yym1387 {
					z.DecBinaryUnmarshal(yyv1386)
				} else if !yym1387 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1386)
				} else {
					z.DecFallback(yyv1386, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1388 := &x.FinishedAt
				yym1389 := z.DecBinary()
				_ = yym1389
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1388) {
				} else if yym1389 {
					z.DecBinaryUnmarshal(yyv1388)
				} else if !yym1389 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1388)
				} else {
					z.DecFallback(yyv1388, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1381)
		} // end switch yys1381
	} // end for yyj1381
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1391 int
	var yyb1391 bool
	var yyhl1391 bool = l >= 0
	yyj1391++
	if yyhl1391 {
		yyb1391 = yyj1391 > l
	} else {
		yyb1391 = r.CheckBreak()
	}
	if yyb1391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1391++
	if yyhl1391 {
		yyb1391 = yyj1391 > l
	} else {
		yyb1391 = r.CheckBreak()
	}
	if yyb1391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1391++
	if yyhl1391 {
		yyb1391 = yyj1391 > l
	} else {
		yyb1391 = r.CheckBreak()
	}
	if yyb1391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1391++
	if yyhl1391 {
		yyb1391 = yyj1391 > l
	} else {
		yyb1391 = r.CheckBreak()
	}
	if yyb1391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1391++
	if yyhl1391 {
		yyb1391 = yyj1391 > l
	} else {
		yyb1391 = r.CheckBreak()
	}
	if yyb1391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1396 := &x.StartedAt
		yym1397 := z.DecBinary()
		_ = yym1397
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1396) {
		} else if yym1397 {
			z.DecBinaryUnmarshal(yyv1396)
		} else if !yym1397 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1396)
		} else {
			z.DecFallback(yyv1396, false)
		}
	}
	yyj1391++
	if yyhl1391 {
		yyb1391 = yyj1391 > l
	} else {
		yyb1391 = r.CheckBreak()
	}
	if yyb1391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1398 := &x.FinishedAt
		yym1399 := z.DecBinary()
		_ = yym1399
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1398) {
		} else if yym1399 {
			z.DecBinaryUnmarshal(yyv1398)
		} else if !yym1399 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1398)
		} else {
			z.DecFallback(yyv1398, false)
		}
	}
	yyj1391++
	if yyhl1391 {
		yyb1391 = yyj1391 > l
	} else {
		yyb1391 = r.CheckBreak()
	}
	if yyb1391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1391++
		if yyhl1391 {
			yyb1391 = yyj1391 > l
		} else {
			yyb1391 = r.CheckBreak()
		}
		if yyb1391 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1391-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1401 := z.EncBinary()
		_ = yym1401
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1402 := !z.EncBinary()
			yy2arr1402 := z.EncBasicHandle().StructToArray
			var yyq1402 [3]bool
			_, _, _ = yysep1402, yyq1402, yy2arr1402
			const yyr1402 bool = false
			yyq1402[0] = x.Waiting != nil
			yyq1402[1] = x.Running != nil
			yyq1402[2] = x.Terminated != nil
			var yynn1402 int
			if yyr1402 || yy2arr1402 {
				r.EncodeArrayStart(3)
			} else {
				yynn1402 = 0
				for _, b := range yyq1402 {
					if b {
						yynn1402++
					}
				}
				r.EncodeMapStart(yynn1402)
				yynn1402 = 0
			}
			if yyr1402 || yy2arr1402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1402[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1402[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1402 || yy2arr1402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1402[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1402[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1402 || yy2arr1402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1402[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1402[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1402 || yy2arr1402 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1406 := z.DecBinary()
	_ = yym1406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1407 := r.ContainerType()
		if yyct1407 == codecSelferValueTypeMap1234 {
			yyl1407 := r.ReadMapStart()
			if yyl1407 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1407, d)
			}
		} else if yyct1407 == codecSelferValueTypeArray1234 {
			yyl1407 := r.ReadArrayStart()
			if yyl1407 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1407, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1408Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1408Slc
	var yyhl1408 bool = l >= 0
	for yyj1408 := 0; ; yyj1408++ {
		if yyhl1408 {
			if yyj1408 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1408Slc = r.DecodeBytes(yys1408Slc, true, true)
		yys1408 := string(yys1408Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1408 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1408)
		} // end switch yys1408
	} // end for yyj1408
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1412 int
	var yyb1412 bool
	var yyhl1412 bool = l >= 0
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1412++
		if yyhl1412 {
			yyb1412 = yyj1412 > l
		} else {
			yyb1412 = r.CheckBreak()
		}
		if yyb1412 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1412-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1416 := z.EncBinary()
		_ = yym1416
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1417 := !z.EncBinary()
			yy2arr1417 := z.EncBasicHandle().StructToArray
			var yyq1417 [8]bool
			_, _, _ = yysep1417, yyq1417, yy2arr1417
			const yyr1417 bool = false
			yyq1417[1] = true
			yyq1417[2] = true
			yyq1417[7] = x.ContainerID != ""
			var yynn1417 int
			if yyr1417 || yy2arr1417 {
				r.EncodeArrayStart(8)
			} else {
				yynn1417 = 5
				for _, b := range yyq1417 {
					if b {
						yynn1417++
					}
				}
				r.EncodeMapStart(yynn1417)
				yynn1417 = 0
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1419 := z.EncBinary()
				_ = yym1419
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1420 := z.EncBinary()
				_ = yym1420
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1417[1] {
					yy1422 := &x.State
					yy1422.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1417[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1423 := &x.State
					yy1423.CodecEncodeSelf(e)
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1417[2] {
					yy1425 := &x.LastTerminationState
					yy1425.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1417[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1426 := &x.LastTerminationState
					yy1426.CodecEncodeSelf(e)
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1428 := z.EncBinary()
				_ = yym1428
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1429 := z.EncBinary()
				_ = yym1429
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1431 := z.EncBinary()
				_ = yym1431
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1432 := z.EncBinary()
				_ = yym1432
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1434 := z.EncBinary()
				_ = yym1434
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1435 := z.EncBinary()
				_ = yym1435
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1437 := z.EncBinary()
				_ = yym1437
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1438 := z.EncBinary()
				_ = yym1438
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1417[7] {
					yym1440 := z.EncBinary()
					_ = yym1440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1417[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1441 := z.EncBinary()
					_ = yym1441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1442 := z.DecBinary()
	_ = yym1442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1443 := r.ContainerType()
		if yyct1443 == codecSelferValueTypeMap1234 {
			yyl1443 := r.ReadMapStart()
			if yyl1443 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1443, d)
			}
		} else if yyct1443 == codecSelferValueTypeArray1234 {
			yyl1443 := r.ReadArrayStart()
			if yyl1443 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1444Slc
	var yyhl1444 bool = l >= 0
	for yyj1444 := 0; ; yyj1444++ {
		if yyhl1444 {
			if yyj1444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1444Slc = r.DecodeBytes(yys1444Slc, true, true)
		yys1444 := string(yys1444Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1444 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1446 := &x.State
				yyv1446.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1447 := &x.LastTerminationState
				yyv1447.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1444)
		} // end switch yys1444
	} // end for yyj1444
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1453 int
	var yyb1453 bool
	var yyhl1453 bool = l >= 0
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1455 := &x.State
		yyv1455.CodecDecodeSelf(d)
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1456 := &x.LastTerminationState
		yyv1456.CodecDecodeSelf(d)
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1453++
		if yyhl1453 {
			yyb1453 = yyj1453 > l
		} else {
			yyb1453 = r.CheckBreak()
		}
		if yyb1453 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1453-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1462 := z.EncBinary()
	_ = yym1462
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1463 := z.DecBinary()
	_ = yym1463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1464 := z.EncBinary()
	_ = yym1464
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1465 := z.DecBinary()
	_ = yym1465
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1466 := z.EncBinary()
		_ = yym1466
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1467 := !z.EncBinary()
			yy2arr1467 := z.EncBasicHandle().StructToArray
			var yyq1467 [6]bool
			_, _, _ = yysep1467, yyq1467, yy2arr1467
			const yyr1467 bool = false
			yyq1467[2] = true
			yyq1467[3] = true
			yyq1467[4] = x.Reason != ""
			yyq1467[5] = x.Message != ""
			var yynn1467 int
			if yyr1467 || yy2arr1467 {
				r.EncodeArrayStart(6)
			} else {
				yynn1467 = 2
				for _, b := range yyq1467 {
					if b {
						yynn1467++
					}
				}
				r.EncodeMapStart(yynn1467)
				yynn1467 = 0
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1467[2] {
					yy1471 := &x.LastProbeTime
					yym1472 := z.EncBinary()
					_ = yym1472
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1471) {
					} else if yym1472 {
						z.EncBinaryMarshal(yy1471)
					} else if !yym1472 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1471)
					} else {
						z.EncFallback(yy1471)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1467[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1473 := &x.LastProbeTime
					yym1474 := z.EncBinary()
					_ = yym1474
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1473) {
					} else if yym1474 {
						z.EncBinaryMarshal(yy1473)
					} else if !yym1474 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1473)
					} else {
						z.EncFallback(yy1473)
					}
				}
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1467[3] {
					yy1476 := &x.LastTransitionTime
					yym1477 := z.EncBinary()
					_ = yym1477
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1476) {
					} else if yym1477 {
						z.EncBinaryMarshal(yy1476)
					} else if !yym1477 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1476)
					} else {
						z.EncFallback(yy1476)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1467[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1478 := &x.LastTransitionTime
					yym1479 := z.EncBinary()
					_ = yym1479
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1478) {
					} else if yym1479 {
						z.EncBinaryMarshal(yy1478)
					} else if !yym1479 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1478)
					} else {
						z.EncFallback(yy1478)
					}
				}
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1467[4] {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1467[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1467[5] {
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1467[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1485 := z.EncBinary()
					_ = yym1485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1486 := z.DecBinary()
	_ = yym1486
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1487 := r.ContainerType()
		if yyct1487 == codecSelferValueTypeMap1234 {
			yyl1487 := r.ReadMapStart()
			if yyl1487 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1487, d)
			}
		} else if yyct1487 == codecSelferValueTypeArray1234 {
			yyl1487 := r.ReadArrayStart()
			if yyl1487 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1487, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1488Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1488Slc
	var yyhl1488 bool = l >= 0
	for yyj1488 := 0; ; yyj1488++ {
		if yyhl1488 {
			if yyj1488 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1488Slc = r.DecodeBytes(yys1488Slc, true, true)
		yys1488 := string(yys1488Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1488 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1491 := &x.LastProbeTime
				yym1492 := z.DecBinary()
				_ = yym1492
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1491) {
				} else if yym1492 {
					z.DecBinaryUnmarshal(yyv1491)
				} else if !yym1492 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1491)
				} else {
					z.DecFallback(yyv1491, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1493 := &x.LastTransitionTime
				yym1494 := z.DecBinary()
				_ = yym1494
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1493) {
				} else if yym1494 {
					z.DecBinaryUnmarshal(yyv1493)
				} else if !yym1494 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1493)
				} else {
					z.DecFallback(yyv1493, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1488)
		} // end switch yys1488
	} // end for yyj1488
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1497 int
	var yyb1497 bool
	var yyhl1497 bool = l >= 0
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1500 := &x.LastProbeTime
		yym1501 := z.DecBinary()
		_ = yym1501
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1500) {
		} else if yym1501 {
			z.DecBinaryUnmarshal(yyv1500)
		} else if !yym1501 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1500)
		} else {
			z.DecFallback(yyv1500, false)
		}
	}
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1502 := &x.LastTransitionTime
		yym1503 := z.DecBinary()
		_ = yym1503
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1502) {
		} else if yym1503 {
			z.DecBinaryUnmarshal(yyv1502)
		} else if !yym1503 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1502)
		} else {
			z.DecFallback(yyv1502, false)
		}
	}
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1497++
		if yyhl1497 {
			yyb1497 = yyj1497 > l
		} else {
			yyb1497 = r.CheckBreak()
		}
		if yyb1497 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1497-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1506 := z.EncBinary()
	_ = yym1506
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1507 := z.DecBinary()
	_ = yym1507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1508 := z.EncBinary()
	_ = yym1508
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1509 := z.DecBinary()
	_ = yym1509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1510 := z.EncBinary()
		_ = yym1510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1511 := !z.EncBinary()
			yy2arr1511 := z.EncBasicHandle().StructToArray
			var yyq1511 [1]bool
			_, _, _ = yysep1511, yyq1511, yy2arr1511
			const yyr1511 bool = false
			var yynn1511 int
			if yyr1511 || yy2arr1511 {
				r.EncodeArrayStart(1)
			} else {
				yynn1511 = 1
				for _, b := range yyq1511 {
					if b {
						yynn1511++
					}
				}
				r.EncodeMapStart(yynn1511)
				yynn1511 = 0
			}
			if yyr1511 || yy2arr1511 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1513 := z.EncBinary()
					_ = yym1513
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1511 || yy2arr1511 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1515 := z.DecBinary()
	_ = yym1515
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1516 := r.ContainerType()
		if yyct1516 == codecSelferValueTypeMap1234 {
			yyl1516 := r.ReadMapStart()
			if yyl1516 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1516, d)
			}
		} else if yyct1516 == codecSelferValueTypeArray1234 {
			yyl1516 := r.ReadArrayStart()
			if yyl1516 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1516, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1517Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1517Slc
	var yyhl1517 bool = l >= 0
	for yyj1517 := 0; ; yyj1517++ {
		if yyhl1517 {
			if yyj1517 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1517Slc = r.DecodeBytes(yys1517Slc, true, true)
		yys1517 := string(yys1517Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1517 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1518 := &x.NodeSelectorTerms
				yym1519 := z.DecBinary()
				_ = yym1519
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1518), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1517)
		} // end switch yys1517
	} // end for yyj1517
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1520 int
	var yyb1520 bool
	var yyhl1520 bool = l >= 0
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1521 := &x.NodeSelectorTerms
		yym1522 := z.DecBinary()
		_ = yym1522
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1521), d)
		}
	}
	for {
		yyj1520++
		if yyhl1520 {
			yyb1520 = yyj1520 > l
		} else {
			yyb1520 = r.CheckBreak()
		}
		if yyb1520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1523 := z.EncBinary()
		_ = yym1523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1524 := !z.EncBinary()
			yy2arr1524 := z.EncBasicHandle().StructToArray
			var yyq1524 [1]bool
			_, _, _ = yysep1524, yyq1524, yy2arr1524
			const yyr1524 bool = false
			var yynn1524 int
			if yyr1524 || yy2arr1524 {
				r.EncodeArrayStart(1)
			} else {
				yynn1524 = 1
				for _, b := range yyq1524 {
					if b {
						yynn1524++
					}
				}
				r.EncodeMapStart(yynn1524)
				yynn1524 = 0
			}
			if yyr1524 || yy2arr1524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1526 := z.EncBinary()
					_ = yym1526
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1527 := z.EncBinary()
					_ = yym1527
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1524 || yy2arr1524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1528 := z.DecBinary()
	_ = yym1528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1529 := r.ContainerType()
		if yyct1529 == codecSelferValueTypeMap1234 {
			yyl1529 := r.ReadMapStart()
			if yyl1529 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1529, d)
			}
		} else if yyct1529 == codecSelferValueTypeArray1234 {
			yyl1529 := r.ReadArrayStart()
			if yyl1529 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1529, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1530Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1530Slc
	var yyhl1530 bool = l >= 0
	for yyj1530 := 0; ; yyj1530++ {
		if yyhl1530 {
			if yyj1530 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1530Slc = r.DecodeBytes(yys1530Slc, true, true)
		yys1530 := string(yys1530Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1530 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1531 := &x.MatchExpressions
				yym1532 := z.DecBinary()
				_ = yym1532
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1531), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1530)
		} // end switch yys1530
	} // end for yyj1530
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1533 int
	var yyb1533 bool
	var yyhl1533 bool = l >= 0
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1534 := &x.MatchExpressions
		yym1535 := z.DecBinary()
		_ = yym1535
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1534), d)
		}
	}
	for {
		yyj1533++
		if yyhl1533 {
			yyb1533 = yyj1533 > l
		} else {
			yyb1533 = r.CheckBreak()
		}
		if yyb1533 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1533-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1536 := z.EncBinary()
		_ = yym1536
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1537 := !z.EncBinary()
			yy2arr1537 := z.EncBasicHandle().StructToArray
			var yyq1537 [3]bool
			_, _, _ = yysep1537, yyq1537, yy2arr1537
			const yyr1537 bool = false
			yyq1537[2] = len(x.Values) != 0
			var yynn1537 int
			if yyr1537 || yy2arr1537 {
				r.EncodeArrayStart(3)
			} else {
				yynn1537 = 2
				for _, b := range yyq1537 {
					if b {
						yynn1537++
					}
				}
				r.EncodeMapStart(yynn1537)
				yynn1537 = 0
			}
			if yyr1537 || yy2arr1537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1539 := z.EncBinary()
				_ = yym1539
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1540 := z.EncBinary()
				_ = yym1540
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1537 || yy2arr1537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1537 || yy2arr1537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1537[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1543 := z.EncBinary()
						_ = yym1543
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1537[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1544 := z.EncBinary()
						_ = yym1544
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1537 || yy2arr1537 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1545 := z.DecBinary()
	_ = yym1545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1546 := r.ContainerType()
		if yyct1546 == codecSelferValueTypeMap1234 {
			yyl1546 := r.ReadMapStart()
			if yyl1546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1546, d)
			}
		} else if yyct1546 == codecSelferValueTypeArray1234 {
			yyl1546 := r.ReadArrayStart()
			if yyl1546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1547Slc
	var yyhl1547 bool = l >= 0
	for yyj1547 := 0; ; yyj1547++ {
		if yyhl1547 {
			if yyj1547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1547Slc = r.DecodeBytes(yys1547Slc, true, true)
		yys1547 := string(yys1547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1547 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1550 := &x.Values
				yym1551 := z.DecBinary()
				_ = yym1551
				if false {
				} else {
					z.F.DecSliceStringX(yyv1550, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1547)
		} // end switch yys1547
	} // end for yyj1547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1552 int
	var yyb1552 bool
	var yyhl1552 bool = l >= 0
	yyj1552++
	if yyhl1552 {
		yyb1552 = yyj1552 > l
	} else {
		yyb1552 = r.CheckBreak()
	}
	if yyb1552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1552++
	if yyhl1552 {
		yyb1552 = yyj1552 > l
	} else {
		yyb1552 = r.CheckBreak()
	}
	if yyb1552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1552++
	if yyhl1552 {
		yyb1552 = yyj1552 > l
	} else {
		yyb1552 = r.CheckBreak()
	}
	if yyb1552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1555 := &x.Values
		yym1556 := z.DecBinary()
		_ = yym1556
		if false {
		} else {
			z.F.DecSliceStringX(yyv1555, false, d)
		}
	}
	for {
		yyj1552++
		if yyhl1552 {
			yyb1552 = yyj1552 > l
		} else {
			yyb1552 = r.CheckBreak()
		}
		if yyb1552 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1552-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1557 := z.EncBinary()
	_ = yym1557
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1558 := z.DecBinary()
	_ = yym1558
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1559 := z.EncBinary()
		_ = yym1559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1560 := !z.EncBinary()
			yy2arr1560 := z.EncBasicHandle().StructToArray
			var yyq1560 [3]bool
			_, _, _ = yysep1560, yyq1560, yy2arr1560
			const yyr1560 bool = false
			yyq1560[0] = x.NodeAffinity != nil
			yyq1560[1] = x.PodAffinity != nil
			yyq1560[2] = x.PodAntiAffinity != nil
			var yynn1560 int
			if yyr1560 || yy2arr1560 {
				r.EncodeArrayStart(3)
			} else {
				yynn1560 = 0
				for _, b := range yyq1560 {
					if b {
						yynn1560++
					}
				}
				r.EncodeMapStart(yynn1560)
				yynn1560 = 0
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1564 := z.DecBinary()
	_ = yym1564
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1565 := r.ContainerType()
		if yyct1565 == codecSelferValueTypeMap1234 {
			yyl1565 := r.ReadMapStart()
			if yyl1565 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1565, d)
			}
		} else if yyct1565 == codecSelferValueTypeArray1234 {
			yyl1565 := r.ReadArrayStart()
			if yyl1565 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1565, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1566Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1566Slc
	var yyhl1566 bool = l >= 0
	for yyj1566 := 0; ; yyj1566++ {
		if yyhl1566 {
			if yyj1566 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1566Slc = r.DecodeBytes(yys1566Slc, true, true)
		yys1566 := string(yys1566Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1566 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1566)
		} // end switch yys1566
	} // end for yyj1566
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1570 int
	var yyb1570 bool
	var yyhl1570 bool = l >= 0
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1570++
		if yyhl1570 {
			yyb1570 = yyj1570 > l
		} else {
			yyb1570 = r.CheckBreak()
		}
		if yyb1570 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1570-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1574 := z.EncBinary()
		_ = yym1574
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1575 := !z.EncBinary()
			yy2arr1575 := z.EncBasicHandle().StructToArray
			var yyq1575 [3]bool
			_, _, _ = yysep1575, yyq1575, yy2arr1575
			const yyr1575 bool = false
			yyq1575[0] = x.RequiredDuringSchedulingRequiredDuringExecution != nil
			yyq1575[1] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1575[2] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1575 int
			if yyr1575 || yy2arr1575 {
				r.EncodeArrayStart(3)
			} else {
				yynn1575 = 0
				for _, b := range yyq1575 {
					if b {
						yynn1575++
					}
				}
				r.EncodeMapStart(yynn1575)
				yynn1575 = 0
			}
			if yyr1575 || yy2arr1575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1575[0] {
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingRequiredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1575[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingRequiredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingRequiredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1575 || yy2arr1575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1575[1] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1575[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1575 || yy2arr1575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1575[2] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1579 := z.EncBinary()
						_ = yym1579
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1575[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1580 := z.EncBinary()
						_ = yym1580
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1575 || yy2arr1575 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1581 := z.DecBinary()
	_ = yym1581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1582 := r.ContainerType()
		if yyct1582 == codecSelferValueTypeMap1234 {
			yyl1582 := r.ReadMapStart()
			if yyl1582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1582, d)
			}
		} else if yyct1582 == codecSelferValueTypeArray1234 {
			yyl1582 := r.ReadArrayStart()
			if yyl1582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1583Slc
	var yyhl1583 bool = l >= 0
	for yyj1583 := 0; ; yyj1583++ {
		if yyhl1583 {
			if yyj1583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1583Slc = r.DecodeBytes(yys1583Slc, true, true)
		yys1583 := string(yys1583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1583 {
		case "requiredDuringSchedulingRequiredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingRequiredDuringExecution != nil {
					x.RequiredDuringSchedulingRequiredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
					x.RequiredDuringSchedulingRequiredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingRequiredDuringExecution.CodecDecodeSelf(d)
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1586 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1587 := z.DecBinary()
				_ = yym1587
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1586), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1583)
		} // end switch yys1583
	} // end for yyj1583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1588 int
	var yyb1588 bool
	var yyhl1588 bool = l >= 0
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingRequiredDuringExecution != nil {
			x.RequiredDuringSchedulingRequiredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
			x.RequiredDuringSchedulingRequiredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingRequiredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1591 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1592 := z.DecBinary()
		_ = yym1592
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1591), d)
		}
	}
	for {
		yyj1588++
		if yyhl1588 {
			yyb1588 = yyj1588 > l
		} else {
			yyb1588 = r.CheckBreak()
		}
		if yyb1588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1593 := z.EncBinary()
		_ = yym1593
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1594 := !z.EncBinary()
			yy2arr1594 := z.EncBasicHandle().StructToArray
			var yyq1594 [2]bool
			_, _, _ = yysep1594, yyq1594, yy2arr1594
			const yyr1594 bool = false
			var yynn1594 int
			if yyr1594 || yy2arr1594 {
				r.EncodeArrayStart(2)
			} else {
				yynn1594 = 2
				for _, b := range yyq1594 {
					if b {
						yynn1594++
					}
				}
				r.EncodeMapStart(yynn1594)
				yynn1594 = 0
			}
			if yyr1594 || yy2arr1594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1596 := z.EncBinary()
				_ = yym1596
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1597 := z.EncBinary()
				_ = yym1597
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1594 || yy2arr1594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1599 := &x.Preference
				yy1599.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1600 := &x.Preference
				yy1600.CodecEncodeSelf(e)
			}
			if yyr1594 || yy2arr1594 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1601 := z.DecBinary()
	_ = yym1601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1602 := r.ContainerType()
		if yyct1602 == codecSelferValueTypeMap1234 {
			yyl1602 := r.ReadMapStart()
			if yyl1602 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1602, d)
			}
		} else if yyct1602 == codecSelferValueTypeArray1234 {
			yyl1602 := r.ReadArrayStart()
			if yyl1602 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1603Slc
	var yyhl1603 bool = l >= 0
	for yyj1603 := 0; ; yyj1603++ {
		if yyhl1603 {
			if yyj1603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1603Slc = r.DecodeBytes(yys1603Slc, true, true)
		yys1603 := string(yys1603Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1603 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1605 := &x.Preference
				yyv1605.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1603)
		} // end switch yys1603
	} // end for yyj1603
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1606 int
	var yyb1606 bool
	var yyhl1606 bool = l >= 0
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1608 := &x.Preference
		yyv1608.CodecDecodeSelf(d)
	}
	for {
		yyj1606++
		if yyhl1606 {
			yyb1606 = yyj1606 > l
		} else {
			yyb1606 = r.CheckBreak()
		}
		if yyb1606 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1606-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1609 := z.EncBinary()
		_ = yym1609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1610 := !z.EncBinary()
			yy2arr1610 := z.EncBasicHandle().StructToArray
			var yyq1610 [2]bool
			_, _, _ = yysep1610, yyq1610, yy2arr1610
			const yyr1610 bool = false
			yyq1610[0] = len(x.MatchLabels) != 0
			yyq1610[1] = len(x.MatchExpressions) != 0
			var yynn1610 int
			if yyr1610 || yy2arr1610 {
				r.EncodeArrayStart(2)
			} else {
				yynn1610 = 0
				for _, b := range yyq1610 {
					if b {
						yynn1610++
					}
				}
				r.EncodeMapStart(yynn1610)
				yynn1610 = 0
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1610[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1612 := z.EncBinary()
						_ = yym1612
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1610[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1613 := z.EncBinary()
						_ = yym1613
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1610[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1615 := z.EncBinary()
						_ = yym1615
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1610[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1616 := z.EncBinary()
						_ = yym1616
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1617 := z.DecBinary()
	_ = yym1617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1618 := r.ContainerType()
		if yyct1618 == codecSelferValueTypeMap1234 {
			yyl1618 := r.ReadMapStart()
			if yyl1618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1618, d)
			}
		} else if yyct1618 == codecSelferValueTypeArray1234 {
			yyl1618 := r.ReadArrayStart()
			if yyl1618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1619Slc
	var yyhl1619 bool = l >= 0
	for yyj1619 := 0; ; yyj1619++ {
		if yyhl1619 {
			if yyj1619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1619Slc = r.DecodeBytes(yys1619Slc, true, true)
		yys1619 := string(yys1619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1619 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1620 := &x.MatchLabels
				yym1621 := z.DecBinary()
				_ = yym1621
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1620, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1622 := &x.MatchExpressions
				yym1623 := z.DecBinary()
				_ = yym1623
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1622), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1619)
		} // end switch yys1619
	} // end for yyj1619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1624 int
	var yyb1624 bool
	var yyhl1624 bool = l >= 0
	yyj1624++
	if yyhl1624 {
		yyb1624 = yyj1624 > l
	} else {
		yyb1624 = r.CheckBreak()
	}
	if yyb1624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1625 := &x.MatchLabels
		yym1626 := z.DecBinary()
		_ = yym1626
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1625, false, d)
		}
	}
	yyj1624++
	if yyhl1624 {
		yyb1624 = yyj1624 > l
	} else {
		yyb1624 = r.CheckBreak()
	}
	if yyb1624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1627 := &x.MatchExpressions
		yym1628 := z.DecBinary()
		_ = yym1628
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1627), d)
		}
	}
	for {
		yyj1624++
		if yyhl1624 {
			yyb1624 = yyj1624 > l
		} else {
			yyb1624 = r.CheckBreak()
		}
		if yyb1624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1629 := z.EncBinary()
		_ = yym1629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1630 := !z.EncBinary()
			yy2arr1630 := z.EncBasicHandle().StructToArray
			var yyq1630 [3]bool
			_, _, _ = yysep1630, yyq1630, yy2arr1630
			const yyr1630 bool = false
			yyq1630[2] = len(x.Values) != 0
			var yynn1630 int
			if yyr1630 || yy2arr1630 {
				r.EncodeArrayStart(3)
			} else {
				yynn1630 = 2
				for _, b := range yyq1630 {
					if b {
						yynn1630++
					}
				}
				r.EncodeMapStart(yynn1630)
				yynn1630 = 0
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1632 := z.EncBinary()
				_ = yym1632
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1633 := z.EncBinary()
				_ = yym1633
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1636 := z.EncBinary()
						_ = yym1636
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1637 := z.EncBinary()
						_ = yym1637
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1638 := z.DecBinary()
	_ = yym1638
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1639 := r.ContainerType()
		if yyct1639 == codecSelferValueTypeMap1234 {
			yyl1639 := r.ReadMapStart()
			if yyl1639 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1639, d)
			}
		} else if yyct1639 == codecSelferValueTypeArray1234 {
			yyl1639 := r.ReadArrayStart()
			if yyl1639 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1639, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1640Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1640Slc
	var yyhl1640 bool = l >= 0
	for yyj1640 := 0; ; yyj1640++ {
		if yyhl1640 {
			if yyj1640 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1640Slc = r.DecodeBytes(yys1640Slc, true, true)
		yys1640 := string(yys1640Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1640 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1643 := &x.Values
				yym1644 := z.DecBinary()
				_ = yym1644
				if false {
				} else {
					z.F.DecSliceStringX(yyv1643, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1640)
		} // end switch yys1640
	} // end for yyj1640
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1645 int
	var yyb1645 bool
	var yyhl1645 bool = l >= 0
	yyj1645++
	if yyhl1645 {
		yyb1645 = yyj1645 > l
	} else {
		yyb1645 = r.CheckBreak()
	}
	if yyb1645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1645++
	if yyhl1645 {
		yyb1645 = yyj1645 > l
	} else {
		yyb1645 = r.CheckBreak()
	}
	if yyb1645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1645++
	if yyhl1645 {
		yyb1645 = yyj1645 > l
	} else {
		yyb1645 = r.CheckBreak()
	}
	if yyb1645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1648 := &x.Values
		yym1649 := z.DecBinary()
		_ = yym1649
		if false {
		} else {
			z.F.DecSliceStringX(yyv1648, false, d)
		}
	}
	for {
		yyj1645++
		if yyhl1645 {
			yyb1645 = yyj1645 > l
		} else {
			yyb1645 = r.CheckBreak()
		}
		if yyb1645 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1645-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1650 := z.EncBinary()
	_ = yym1650
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1651 := z.DecBinary()
	_ = yym1651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1652 := z.EncBinary()
		_ = yym1652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1653 := !z.EncBinary()
			yy2arr1653 := z.EncBasicHandle().StructToArray
			var yyq1653 [3]bool
			_, _, _ = yysep1653, yyq1653, yy2arr1653
			const yyr1653 bool = false
			yyq1653[0] = len(x.RequiredDuringSchedulingRequiredDuringExecution) != 0
			yyq1653[1] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1653[2] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1653 int
			if yyr1653 || yy2arr1653 {
				r.EncodeArrayStart(3)
			} else {
				yynn1653 = 0
				for _, b := range yyq1653 {
					if b {
						yynn1653++
					}
				}
				r.EncodeMapStart(yynn1653)
				yynn1653 = 0
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1653[0] {
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1655 := z.EncBinary()
						_ = yym1655
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingRequiredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1653[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingRequiredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1656 := z.EncBinary()
						_ = yym1656
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingRequiredDuringExecution), e)
						}
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1653[1] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1658 := z.EncBinary()
						_ = yym1658
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1653[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1659 := z.EncBinary()
						_ = yym1659
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1653[2] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1661 := z.EncBinary()
						_ = yym1661
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1653[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1662 := z.EncBinary()
						_ = yym1662
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1663 := z.DecBinary()
	_ = yym1663
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1664 := r.ContainerType()
		if yyct1664 == codecSelferValueTypeMap1234 {
			yyl1664 := r.ReadMapStart()
			if yyl1664 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1664, d)
			}
		} else if yyct1664 == codecSelferValueTypeArray1234 {
			yyl1664 := r.ReadArrayStart()
			if yyl1664 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1664, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1665Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1665Slc
	var yyhl1665 bool = l >= 0
	for yyj1665 := 0; ; yyj1665++ {
		if yyhl1665 {
			if yyj1665 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1665Slc = r.DecodeBytes(yys1665Slc, true, true)
		yys1665 := string(yys1665Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1665 {
		case "requiredDuringSchedulingRequiredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingRequiredDuringExecution = nil
			} else {
				yyv1666 := &x.RequiredDuringSchedulingRequiredDuringExecution
				yym1667 := z.DecBinary()
				_ = yym1667
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1666), d)
				}
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1668 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1669 := z.DecBinary()
				_ = yym1669
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1668), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1670 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1671 := z.DecBinary()
				_ = yym1671
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1670), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1665)
		} // end switch yys1665
	} // end for yyj1665
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1672 int
	var yyb1672 bool
	var yyhl1672 bool = l >= 0
	yyj1672++
	if yyhl1672 {
		yyb1672 = yyj1672 > l
	} else {
		yyb1672 = r.CheckBreak()
	}
	if yyb1672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingRequiredDuringExecution = nil
	} else {
		yyv1673 := &x.RequiredDuringSchedulingRequiredDuringExecution
		yym1674 := z.DecBinary()
		_ = yym1674
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1673), d)
		}
	}
	yyj1672++
	if yyhl1672 {
		yyb1672 = yyj1672 > l
	} else {
		yyb1672 = r.CheckBreak()
	}
	if yyb1672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1675 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1676 := z.DecBinary()
		_ = yym1676
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1675), d)
		}
	}
	yyj1672++
	if yyhl1672 {
		yyb1672 = yyj1672 > l
	} else {
		yyb1672 = r.CheckBreak()
	}
	if yyb1672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1677 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1678 := z.DecBinary()
		_ = yym1678
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1677), d)
		}
	}
	for {
		yyj1672++
		if yyhl1672 {
			yyb1672 = yyj1672 > l
		} else {
			yyb1672 = r.CheckBreak()
		}
		if yyb1672 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1672-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1679 := z.EncBinary()
		_ = yym1679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1680 := !z.EncBinary()
			yy2arr1680 := z.EncBasicHandle().StructToArray
			var yyq1680 [3]bool
			_, _, _ = yysep1680, yyq1680, yy2arr1680
			const yyr1680 bool = false
			yyq1680[0] = len(x.RequiredDuringSchedulingRequiredDuringExecution) != 0
			yyq1680[1] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1680[2] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1680 int
			if yyr1680 || yy2arr1680 {
				r.EncodeArrayStart(3)
			} else {
				yynn1680 = 0
				for _, b := range yyq1680 {
					if b {
						yynn1680++
					}
				}
				r.EncodeMapStart(yynn1680)
				yynn1680 = 0
			}
			if yyr1680 || yy2arr1680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1680[0] {
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1682 := z.EncBinary()
						_ = yym1682
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingRequiredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1680[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingRequiredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1683 := z.EncBinary()
						_ = yym1683
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingRequiredDuringExecution), e)
						}
					}
				}
			}
			if yyr1680 || yy2arr1680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1680[1] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1685 := z.EncBinary()
						_ = yym1685
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1680[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1686 := z.EncBinary()
						_ = yym1686
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1680 || yy2arr1680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1680[2] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1688 := z.EncBinary()
						_ = yym1688
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1680[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1689 := z.EncBinary()
						_ = yym1689
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1680 || yy2arr1680 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1690 := z.DecBinary()
	_ = yym1690
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1691 := r.ContainerType()
		if yyct1691 == codecSelferValueTypeMap1234 {
			yyl1691 := r.ReadMapStart()
			if yyl1691 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1691, d)
			}
		} else if yyct1691 == codecSelferValueTypeArray1234 {
			yyl1691 := r.ReadArrayStart()
			if yyl1691 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1691, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1692Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1692Slc
	var yyhl1692 bool = l >= 0
	for yyj1692 := 0; ; yyj1692++ {
		if yyhl1692 {
			if yyj1692 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1692Slc = r.DecodeBytes(yys1692Slc, true, true)
		yys1692 := string(yys1692Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1692 {
		case "requiredDuringSchedulingRequiredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingRequiredDuringExecution = nil
			} else {
				yyv1693 := &x.RequiredDuringSchedulingRequiredDuringExecution
				yym1694 := z.DecBinary()
				_ = yym1694
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1693), d)
				}
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1695 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1696 := z.DecBinary()
				_ = yym1696
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1695), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1697 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1698 := z.DecBinary()
				_ = yym1698
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1697), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1692)
		} // end switch yys1692
	} // end for yyj1692
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1699 int
	var yyb1699 bool
	var yyhl1699 bool = l >= 0
	yyj1699++
	if yyhl1699 {
		yyb1699 = yyj1699 > l
	} else {
		yyb1699 = r.CheckBreak()
	}
	if yyb1699 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingRequiredDuringExecution = nil
	} else {
		yyv1700 := &x.RequiredDuringSchedulingRequiredDuringExecution
		yym1701 := z.DecBinary()
		_ = yym1701
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1700), d)
		}
	}
	yyj1699++
	if yyhl1699 {
		yyb1699 = yyj1699 > l
	} else {
		yyb1699 = r.CheckBreak()
	}
	if yyb1699 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1702 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1703 := z.DecBinary()
		_ = yym1703
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1702), d)
		}
	}
	yyj1699++
	if yyhl1699 {
		yyb1699 = yyj1699 > l
	} else {
		yyb1699 = r.CheckBreak()
	}
	if yyb1699 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1704 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1705 := z.DecBinary()
		_ = yym1705
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1704), d)
		}
	}
	for {
		yyj1699++
		if yyhl1699 {
			yyb1699 = yyj1699 > l
		} else {
			yyb1699 = r.CheckBreak()
		}
		if yyb1699 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1699-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1706 := z.EncBinary()
		_ = yym1706
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1707 := !z.EncBinary()
			yy2arr1707 := z.EncBasicHandle().StructToArray
			var yyq1707 [2]bool
			_, _, _ = yysep1707, yyq1707, yy2arr1707
			const yyr1707 bool = false
			var yynn1707 int
			if yyr1707 || yy2arr1707 {
				r.EncodeArrayStart(2)
			} else {
				yynn1707 = 2
				for _, b := range yyq1707 {
					if b {
						yynn1707++
					}
				}
				r.EncodeMapStart(yynn1707)
				yynn1707 = 0
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1709 := z.EncBinary()
				_ = yym1709
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1710 := z.EncBinary()
				_ = yym1710
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1712 := &x.PodAffinityTerm
				yy1712.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1713 := &x.PodAffinityTerm
				yy1713.CodecEncodeSelf(e)
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1714 := z.DecBinary()
	_ = yym1714
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1715 := r.ContainerType()
		if yyct1715 == codecSelferValueTypeMap1234 {
			yyl1715 := r.ReadMapStart()
			if yyl1715 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1715, d)
			}
		} else if yyct1715 == codecSelferValueTypeArray1234 {
			yyl1715 := r.ReadArrayStart()
			if yyl1715 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1715, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1716Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1716Slc
	var yyhl1716 bool = l >= 0
	for yyj1716 := 0; ; yyj1716++ {
		if yyhl1716 {
			if yyj1716 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1716Slc = r.DecodeBytes(yys1716Slc, true, true)
		yys1716 := string(yys1716Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1716 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1718 := &x.PodAffinityTerm
				yyv1718.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1716)
		} // end switch yys1716
	} // end for yyj1716
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1719 int
	var yyb1719 bool
	var yyhl1719 bool = l >= 0
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1721 := &x.PodAffinityTerm
		yyv1721.CodecDecodeSelf(d)
	}
	for {
		yyj1719++
		if yyhl1719 {
			yyb1719 = yyj1719 > l
		} else {
			yyb1719 = r.CheckBreak()
		}
		if yyb1719 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1719-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1722 := z.EncBinary()
		_ = yym1722
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1723 := !z.EncBinary()
			yy2arr1723 := z.EncBasicHandle().StructToArray
			var yyq1723 [3]bool
			_, _, _ = yysep1723, yyq1723, yy2arr1723
			const yyr1723 bool = false
			yyq1723[0] = x.LabelSelector != nil
			yyq1723[2] = x.TopologyKey != ""
			var yynn1723 int
			if yyr1723 || yy2arr1723 {
				r.EncodeArrayStart(3)
			} else {
				yynn1723 = 1
				for _, b := range yyq1723 {
					if b {
						yynn1723++
					}
				}
				r.EncodeMapStart(yynn1723)
				yynn1723 = 0
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1723[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						x.LabelSelector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1723[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						x.LabelSelector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Namespaces), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1727 := z.EncBinary()
					_ = yym1727
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Namespaces), e)
					}
				}
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1723[2] {
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1723[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1730 := z.EncBinary()
					_ = yym1730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1731 := z.DecBinary()
	_ = yym1731
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1732 := r.ContainerType()
		if yyct1732 == codecSelferValueTypeMap1234 {
			yyl1732 := r.ReadMapStart()
			if yyl1732 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1732, d)
			}
		} else if yyct1732 == codecSelferValueTypeArray1234 {
			yyl1732 := r.ReadArrayStart()
			if yyl1732 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1732, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1733Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1733Slc
	var yyhl1733 bool = l >= 0
	for yyj1733 := 0; ; yyj1733++ {
		if yyhl1733 {
			if yyj1733 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1733Slc = r.DecodeBytes(yys1733Slc, true, true)
		yys1733 := string(yys1733Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1733 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(LabelSelector)
				}
				x.LabelSelector.CodecDecodeSelf(d)
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1735 := &x.Namespaces
				yym1736 := z.DecBinary()
				_ = yym1736
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv1735), d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1733)
		} // end switch yys1733
	} // end for yyj1733
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1738 int
	var yyb1738 bool
	var yyhl1738 bool = l >= 0
	yyj1738++
	if yyhl1738 {
		yyb1738 = yyj1738 > l
	} else {
		yyb1738 = r.CheckBreak()
	}
	if yyb1738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(LabelSelector)
		}
		x.LabelSelector.CodecDecodeSelf(d)
	}
	yyj1738++
	if yyhl1738 {
		yyb1738 = yyj1738 > l
	} else {
		yyb1738 = r.CheckBreak()
	}
	if yyb1738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1740 := &x.Namespaces
		yym1741 := z.DecBinary()
		_ = yym1741
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv1740), d)
		}
	}
	yyj1738++
	if yyhl1738 {
		yyb1738 = yyj1738 > l
	} else {
		yyb1738 = r.CheckBreak()
	}
	if yyb1738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1738++
		if yyhl1738 {
			yyb1738 = yyj1738 > l
		} else {
			yyb1738 = r.CheckBreak()
		}
		if yyb1738 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1738-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1743 := z.EncBinary()
		_ = yym1743
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1744 := !z.EncBinary()
			yy2arr1744 := z.EncBasicHandle().StructToArray
			var yyq1744 [16]bool
			_, _, _ = yysep1744, yyq1744, yy2arr1744
			const yyr1744 bool = false
			yyq1744[0] = len(x.Volumes) != 0
			yyq1744[2] = x.RestartPolicy != ""
			yyq1744[3] = x.TerminationGracePeriodSeconds != nil
			yyq1744[4] = x.ActiveDeadlineSeconds != nil
			yyq1744[5] = x.DNSPolicy != ""
			yyq1744[6] = len(x.NodeSelector) != 0
			yyq1744[7] = x.Affinity != nil
			yyq1744[8] = x.ServiceAccountName != ""
			yyq1744[9] = x.DeprecatedServiceAccount != ""
			yyq1744[10] = x.NodeName != ""
			yyq1744[11] = x.HostNetwork != false
			yyq1744[12] = x.HostPID != false
			yyq1744[13] = x.HostIPC != false
			yyq1744[14] = x.SecurityContext != nil
			yyq1744[15] = len(x.ImagePullSecrets) != 0
			var yynn1744 int
			if yyr1744 || yy2arr1744 {
				r.EncodeArrayStart(16)
			} else {
				yynn1744 = 1
				for _, b := range yyq1744 {
					if b {
						yynn1744++
					}
				}
				r.EncodeMapStart(yynn1744)
				yynn1744 = 0
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1746 := z.EncBinary()
						_ = yym1746
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1744[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1747 := z.EncBinary()
						_ = yym1747
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1749 := z.EncBinary()
					_ = yym1749
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1750 := z.EncBinary()
					_ = yym1750
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1744[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1753 := *x.TerminationGracePeriodSeconds
						yym1754 := z.EncBinary()
						_ = yym1754
						if false {
						} else {
							r.EncodeInt(int64(yy1753))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1744[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1755 := *x.TerminationGracePeriodSeconds
						yym1756 := z.EncBinary()
						_ = yym1756
						if false {
						} else {
							r.EncodeInt(int64(yy1755))
						}
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1758 := *x.ActiveDeadlineSeconds
						yym1759 := z.EncBinary()
						_ = yym1759
						if false {
						} else {
							r.EncodeInt(int64(yy1758))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1744[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1760 := *x.ActiveDeadlineSeconds
						yym1761 := z.EncBinary()
						_ = yym1761
						if false {
						} else {
							r.EncodeInt(int64(yy1760))
						}
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1744[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1764 := z.EncBinary()
						_ = yym1764
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1744[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1765 := z.EncBinary()
						_ = yym1765
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[7] {
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1744[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("affinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[8] {
					yym1768 := z.EncBinary()
					_ = yym1768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1744[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1769 := z.EncBinary()
					_ = yym1769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[9] {
					yym1771 := z.EncBinary()
					_ = yym1771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1744[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[10] {
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1744[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1775 := z.EncBinary()
					_ = yym1775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[11] {
					yym1777 := z.EncBinary()
					_ = yym1777
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1744[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1778 := z.EncBinary()
					_ = yym1778
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[12] {
					yym1780 := z.EncBinary()
					_ = yym1780
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1744[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1781 := z.EncBinary()
					_ = yym1781
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[13] {
					yym1783 := z.EncBinary()
					_ = yym1783
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1744[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1784 := z.EncBinary()
					_ = yym1784
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1744[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1744[15] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1787 := z.EncBinary()
						_ = yym1787
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1744[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1788 := z.EncBinary()
						_ = yym1788
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1789 := z.DecBinary()
	_ = yym1789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1790 := r.ContainerType()
		if yyct1790 == codecSelferValueTypeMap1234 {
			yyl1790 := r.ReadMapStart()
			if yyl1790 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1790, d)
			}
		} else if yyct1790 == codecSelferValueTypeArray1234 {
			yyl1790 := r.ReadArrayStart()
			if yyl1790 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1791Slc
	var yyhl1791 bool = l >= 0
	for yyj1791 := 0; ; yyj1791++ {
		if yyhl1791 {
			if yyj1791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1791Slc = r.DecodeBytes(yys1791Slc, true, true)
		yys1791 := string(yys1791Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1791 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1792 := &x.Volumes
				yym1793 := z.DecBinary()
				_ = yym1793
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1792), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1794 := &x.Containers
				yym1795 := z.DecBinary()
				_ = yym1795
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1794), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1798 := z.DecBinary()
				_ = yym1798
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1800 := z.DecBinary()
				_ = yym1800
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1802 := &x.NodeSelector
				yym1803 := z.DecBinary()
				_ = yym1803
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1802, false, d)
				}
			}
		case "affinity":
			if r.TryDecodeAsNil() {
				if x.Affinity != nil {
					x.Affinity = nil
				}
			} else {
				if x.Affinity == nil {
					x.Affinity = new(Affinity)
				}
				x.Affinity.CodecDecodeSelf(d)
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1812 := &x.ImagePullSecrets
				yym1813 := z.DecBinary()
				_ = yym1813
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1812), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1791)
		} // end switch yys1791
	} // end for yyj1791
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1814 int
	var yyb1814 bool
	var yyhl1814 bool = l >= 0
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1815 := &x.Volumes
		yym1816 := z.DecBinary()
		_ = yym1816
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1815), d)
		}
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1817 := &x.Containers
		yym1818 := z.DecBinary()
		_ = yym1818
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1817), d)
		}
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1821 := z.DecBinary()
		_ = yym1821
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1823 := z.DecBinary()
		_ = yym1823
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1825 := &x.NodeSelector
		yym1826 := z.DecBinary()
		_ = yym1826
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1825, false, d)
		}
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Affinity != nil {
			x.Affinity = nil
		}
	} else {
		if x.Affinity == nil {
			x.Affinity = new(Affinity)
		}
		x.Affinity.CodecDecodeSelf(d)
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1835 := &x.ImagePullSecrets
		yym1836 := z.DecBinary()
		_ = yym1836
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1835), d)
		}
	}
	for {
		yyj1814++
		if yyhl1814 {
			yyb1814 = yyj1814 > l
		} else {
			yyb1814 = r.CheckBreak()
		}
		if yyb1814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1837 := z.EncBinary()
		_ = yym1837
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1838 := !z.EncBinary()
			yy2arr1838 := z.EncBasicHandle().StructToArray
			var yyq1838 [5]bool
			_, _, _ = yysep1838, yyq1838, yy2arr1838
			const yyr1838 bool = false
			yyq1838[0] = x.SELinuxOptions != nil
			yyq1838[1] = x.RunAsUser != nil
			yyq1838[2] = x.RunAsNonRoot != nil
			yyq1838[3] = len(x.SupplementalGroups) != 0
			yyq1838[4] = x.FSGroup != nil
			var yynn1838 int
			if yyr1838 || yy2arr1838 {
				r.EncodeArrayStart(5)
			} else {
				yynn1838 = 0
				for _, b := range yyq1838 {
					if b {
						yynn1838++
					}
				}
				r.EncodeMapStart(yynn1838)
				yynn1838 = 0
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1838[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1841 := *x.RunAsUser
						yym1842 := z.EncBinary()
						_ = yym1842
						if false {
						} else {
							r.EncodeInt(int64(yy1841))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1838[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1843 := *x.RunAsUser
						yym1844 := z.EncBinary()
						_ = yym1844
						if false {
						} else {
							r.EncodeInt(int64(yy1843))
						}
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1846 := *x.RunAsNonRoot
						yym1847 := z.EncBinary()
						_ = yym1847
						if false {
						} else {
							r.EncodeBool(bool(yy1846))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1838[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1848 := *x.RunAsNonRoot
						yym1849 := z.EncBinary()
						_ = yym1849
						if false {
						} else {
							r.EncodeBool(bool(yy1848))
						}
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1851 := z.EncBinary()
						_ = yym1851
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1838[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1852 := z.EncBinary()
						_ = yym1852
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1854 := *x.FSGroup
						yym1855 := z.EncBinary()
						_ = yym1855
						if false {
						} else {
							r.EncodeInt(int64(yy1854))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1838[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1856 := *x.FSGroup
						yym1857 := z.EncBinary()
						_ = yym1857
						if false {
						} else {
							r.EncodeInt(int64(yy1856))
						}
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1858 := z.DecBinary()
	_ = yym1858
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1859 := r.ContainerType()
		if yyct1859 == codecSelferValueTypeMap1234 {
			yyl1859 := r.ReadMapStart()
			if yyl1859 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1859, d)
			}
		} else if yyct1859 == codecSelferValueTypeArray1234 {
			yyl1859 := r.ReadArrayStart()
			if yyl1859 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1859, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1860Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1860Slc
	var yyhl1860 bool = l >= 0
	for yyj1860 := 0; ; yyj1860++ {
		if yyhl1860 {
			if yyj1860 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1860Slc = r.DecodeBytes(yys1860Slc, true, true)
		yys1860 := string(yys1860Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1860 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1863 := z.DecBinary()
				_ = yym1863
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1865 := z.DecBinary()
				_ = yym1865
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1866 := &x.SupplementalGroups
				yym1867 := z.DecBinary()
				_ = yym1867
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1866, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1869 := z.DecBinary()
				_ = yym1869
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1860)
		} // end switch yys1860
	} // end for yyj1860
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1870 int
	var yyb1870 bool
	var yyhl1870 bool = l >= 0
	yyj1870++
	if yyhl1870 {
		yyb1870 = yyj1870 > l
	} else {
		yyb1870 = r.CheckBreak()
	}
	if yyb1870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1870++
	if yyhl1870 {
		yyb1870 = yyj1870 > l
	} else {
		yyb1870 = r.CheckBreak()
	}
	if yyb1870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1873 := z.DecBinary()
		_ = yym1873
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1870++
	if yyhl1870 {
		yyb1870 = yyj1870 > l
	} else {
		yyb1870 = r.CheckBreak()
	}
	if yyb1870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1875 := z.DecBinary()
		_ = yym1875
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1870++
	if yyhl1870 {
		yyb1870 = yyj1870 > l
	} else {
		yyb1870 = r.CheckBreak()
	}
	if yyb1870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1876 := &x.SupplementalGroups
		yym1877 := z.DecBinary()
		_ = yym1877
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1876, false, d)
		}
	}
	yyj1870++
	if yyhl1870 {
		yyb1870 = yyj1870 > l
	} else {
		yyb1870 = r.CheckBreak()
	}
	if yyb1870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1879 := z.DecBinary()
		_ = yym1879
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1870++
		if yyhl1870 {
			yyb1870 = yyj1870 > l
		} else {
			yyb1870 = r.CheckBreak()
		}
		if yyb1870 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1870-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1880 := z.EncBinary()
		_ = yym1880
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1881 := !z.EncBinary()
			yy2arr1881 := z.EncBasicHandle().StructToArray
			var yyq1881 [8]bool
			_, _, _ = yysep1881, yyq1881, yy2arr1881
			const yyr1881 bool = false
			yyq1881[0] = x.Phase != ""
			yyq1881[1] = len(x.Conditions) != 0
			yyq1881[2] = x.Message != ""
			yyq1881[3] = x.Reason != ""
			yyq1881[4] = x.HostIP != ""
			yyq1881[5] = x.PodIP != ""
			yyq1881[6] = x.StartTime != nil
			yyq1881[7] = len(x.ContainerStatuses) != 0
			var yynn1881 int
			if yyr1881 || yy2arr1881 {
				r.EncodeArrayStart(8)
			} else {
				yynn1881 = 0
				for _, b := range yyq1881 {
					if b {
						yynn1881++
					}
				}
				r.EncodeMapStart(yynn1881)
				yynn1881 = 0
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1881[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1881[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1881[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1884 := z.EncBinary()
						_ = yym1884
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1881[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1885 := z.EncBinary()
						_ = yym1885
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1881[2] {
					yym1887 := z.EncBinary()
					_ = yym1887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1881[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1888 := z.EncBinary()
					_ = yym1888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1881[3] {
					yym1890 := z.EncBinary()
					_ = yym1890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1881[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1891 := z.EncBinary()
					_ = yym1891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1881[4] {
					yym1893 := z.EncBinary()
					_ = yym1893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1881[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1894 := z.EncBinary()
					_ = yym1894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1881[5] {
					yym1896 := z.EncBinary()
					_ = yym1896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1881[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1897 := z.EncBinary()
					_ = yym1897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1881[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1899 := z.EncBinary()
						_ = yym1899
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1899 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1899 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1881[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1900 := z.EncBinary()
						_ = yym1900
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1900 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1900 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1881[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1902 := z.EncBinary()
						_ = yym1902
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1881[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1903 := z.EncBinary()
						_ = yym1903
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1904 := z.DecBinary()
	_ = yym1904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1905 := r.ContainerType()
		if yyct1905 == codecSelferValueTypeMap1234 {
			yyl1905 := r.ReadMapStart()
			if yyl1905 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1905, d)
			}
		} else if yyct1905 == codecSelferValueTypeArray1234 {
			yyl1905 := r.ReadArrayStart()
			if yyl1905 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1906Slc
	var yyhl1906 bool = l >= 0
	for yyj1906 := 0; ; yyj1906++ {
		if yyhl1906 {
			if yyj1906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1906Slc = r.DecodeBytes(yys1906Slc, true, true)
		yys1906 := string(yys1906Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1906 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1908 := &x.Conditions
				yym1909 := z.DecBinary()
				_ = yym1909
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1908), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1915 := z.DecBinary()
				_ = yym1915
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1915 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1915 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1916 := &x.ContainerStatuses
				yym1917 := z.DecBinary()
				_ = yym1917
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1916), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1906)
		} // end switch yys1906
	} // end for yyj1906
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1918 int
	var yyb1918 bool
	var yyhl1918 bool = l >= 0
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1920 := &x.Conditions
		yym1921 := z.DecBinary()
		_ = yym1921
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1920), d)
		}
	}
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1927 := z.DecBinary()
		_ = yym1927
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1927 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1927 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1918++
	if yyhl1918 {
		yyb1918 = yyj1918 > l
	} else {
		yyb1918 = r.CheckBreak()
	}
	if yyb1918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1928 := &x.ContainerStatuses
		yym1929 := z.DecBinary()
		_ = yym1929
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1928), d)
		}
	}
	for {
		yyj1918++
		if yyhl1918 {
			yyb1918 = yyj1918 > l
		} else {
			yyb1918 = r.CheckBreak()
		}
		if yyb1918 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1918-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1930 := z.EncBinary()
		_ = yym1930
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1931 := !z.EncBinary()
			yy2arr1931 := z.EncBasicHandle().StructToArray
			var yyq1931 [4]bool
			_, _, _ = yysep1931, yyq1931, yy2arr1931
			const yyr1931 bool = false
			yyq1931[0] = true
			yyq1931[1] = true
			yyq1931[2] = x.Kind != ""
			yyq1931[3] = x.APIVersion != ""
			var yynn1931 int
			if yyr1931 || yy2arr1931 {
				r.EncodeArrayStart(4)
			} else {
				yynn1931 = 0
				for _, b := range yyq1931 {
					if b {
						yynn1931++
					}
				}
				r.EncodeMapStart(yynn1931)
				yynn1931 = 0
			}
			if yyr1931 || yy2arr1931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1931[0] {
					yy1933 := &x.ObjectMeta
					yy1933.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1931[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1934 := &x.ObjectMeta
					yy1934.CodecEncodeSelf(e)
				}
			}
			if yyr1931 || yy2arr1931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1931[1] {
					yy1936 := &x.Status
					yy1936.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1931[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1937 := &x.Status
					yy1937.CodecEncodeSelf(e)
				}
			}
			if yyr1931 || yy2arr1931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1931[2] {
					yym1939 := z.EncBinary()
					_ = yym1939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1931[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1940 := z.EncBinary()
					_ = yym1940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1931 || yy2arr1931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1931[3] {
					yym1942 := z.EncBinary()
					_ = yym1942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1931[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1943 := z.EncBinary()
					_ = yym1943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1931 || yy2arr1931 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1944 := z.DecBinary()
	_ = yym1944
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1945 := r.ContainerType()
		if yyct1945 == codecSelferValueTypeMap1234 {
			yyl1945 := r.ReadMapStart()
			if yyl1945 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1945, d)
			}
		} else if yyct1945 == codecSelferValueTypeArray1234 {
			yyl1945 := r.ReadArrayStart()
			if yyl1945 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1945, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1946Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1946Slc
	var yyhl1946 bool = l >= 0
	for yyj1946 := 0; ; yyj1946++ {
		if yyhl1946 {
			if yyj1946 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1946Slc = r.DecodeBytes(yys1946Slc, true, true)
		yys1946 := string(yys1946Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1946 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1947 := &x.ObjectMeta
				yyv1947.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1948 := &x.Status
				yyv1948.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1946)
		} // end switch yys1946
	} // end for yyj1946
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1951 int
	var yyb1951 bool
	var yyhl1951 bool = l >= 0
	yyj1951++
	if yyhl1951 {
		yyb1951 = yyj1951 > l
	} else {
		yyb1951 = r.CheckBreak()
	}
	if yyb1951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1952 := &x.ObjectMeta
		yyv1952.CodecDecodeSelf(d)
	}
	yyj1951++
	if yyhl1951 {
		yyb1951 = yyj1951 > l
	} else {
		yyb1951 = r.CheckBreak()
	}
	if yyb1951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1953 := &x.Status
		yyv1953.CodecDecodeSelf(d)
	}
	yyj1951++
	if yyhl1951 {
		yyb1951 = yyj1951 > l
	} else {
		yyb1951 = r.CheckBreak()
	}
	if yyb1951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1951++
	if yyhl1951 {
		yyb1951 = yyj1951 > l
	} else {
		yyb1951 = r.CheckBreak()
	}
	if yyb1951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj1951++
		if yyhl1951 {
			yyb1951 = yyj1951 > l
		} else {
			yyb1951 = r.CheckBreak()
		}
		if yyb1951 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1951-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1956 := z.EncBinary()
		_ = yym1956
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1957 := !z.EncBinary()
			yy2arr1957 := z.EncBasicHandle().StructToArray
			var yyq1957 [5]bool
			_, _, _ = yysep1957, yyq1957, yy2arr1957
			const yyr1957 bool = false
			yyq1957[0] = true
			yyq1957[1] = true
			yyq1957[2] = true
			yyq1957[3] = x.Kind != ""
			yyq1957[4] = x.APIVersion != ""
			var yynn1957 int
			if yyr1957 || yy2arr1957 {
				r.EncodeArrayStart(5)
			} else {
				yynn1957 = 0
				for _, b := range yyq1957 {
					if b {
						yynn1957++
					}
				}
				r.EncodeMapStart(yynn1957)
				yynn1957 = 0
			}
			if yyr1957 || yy2arr1957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1957[0] {
					yy1959 := &x.ObjectMeta
					yy1959.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1957[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1960 := &x.ObjectMeta
					yy1960.CodecEncodeSelf(e)
				}
			}
			if yyr1957 || yy2arr1957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1957[1] {
					yy1962 := &x.Spec
					yy1962.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1957[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1963 := &x.Spec
					yy1963.CodecEncodeSelf(e)
				}
			}
			if yyr1957 || yy2arr1957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1957[2] {
					yy1965 := &x.Status
					yy1965.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1957[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1966 := &x.Status
					yy1966.CodecEncodeSelf(e)
				}
			}
			if yyr1957 || yy2arr1957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1957[3] {
					yym1968 := z.EncBinary()
					_ = yym1968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1957[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1969 := z.EncBinary()
					_ = yym1969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1957 || yy2arr1957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1957[4] {
					yym1971 := z.EncBinary()
					_ = yym1971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1957[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1972 := z.EncBinary()
					_ = yym1972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1957 || yy2arr1957 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1973 := z.DecBinary()
	_ = yym1973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1974 := r.ContainerType()
		if yyct1974 == codecSelferValueTypeMap1234 {
			yyl1974 := r.ReadMapStart()
			if yyl1974 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1974, d)
			}
		} else if yyct1974 == codecSelferValueTypeArray1234 {
			yyl1974 := r.ReadArrayStart()
			if yyl1974 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1974, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1975Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1975Slc
	var yyhl1975 bool = l >= 0
	for yyj1975 := 0; ; yyj1975++ {
		if yyhl1975 {
			if yyj1975 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1975Slc = r.DecodeBytes(yys1975Slc, true, true)
		yys1975 := string(yys1975Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1975 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1976 := &x.ObjectMeta
				yyv1976.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1977 := &x.Spec
				yyv1977.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1978 := &x.Status
				yyv1978.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1975)
		} // end switch yys1975
	} // end for yyj1975
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1981 int
	var yyb1981 bool
	var yyhl1981 bool = l >= 0
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1982 := &x.ObjectMeta
		yyv1982.CodecDecodeSelf(d)
	}
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1983 := &x.Spec
		yyv1983.CodecDecodeSelf(d)
	}
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1984 := &x.Status
		yyv1984.CodecDecodeSelf(d)
	}
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj1981++
		if yyhl1981 {
			yyb1981 = yyj1981 > l
		} else {
			yyb1981 = r.CheckBreak()
		}
		if yyb1981 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1981-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1987 := z.EncBinary()
		_ = yym1987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1988 := !z.EncBinary()
			yy2arr1988 := z.EncBasicHandle().StructToArray
			var yyq1988 [4]bool
			_, _, _ = yysep1988, yyq1988, yy2arr1988
			const yyr1988 bool = false
			yyq1988[0] = true
			yyq1988[2] = x.Kind != ""
			yyq1988[3] = x.APIVersion != ""
			var yynn1988 int
			if yyr1988 || yy2arr1988 {
				r.EncodeArrayStart(4)
			} else {
				yynn1988 = 1
				for _, b := range yyq1988 {
					if b {
						yynn1988++
					}
				}
				r.EncodeMapStart(yynn1988)
				yynn1988 = 0
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1988[0] {
					yy1990 := &x.ListMeta
					yym1991 := z.EncBinary()
					_ = yym1991
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1990) {
					} else {
						z.EncFallback(yy1990)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1988[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1992 := &x.ListMeta
					yym1993 := z.EncBinary()
					_ = yym1993
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1992) {
					} else {
						z.EncFallback(yy1992)
					}
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1996 := z.EncBinary()
					_ = yym1996
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1988[2] {
					yym1998 := z.EncBinary()
					_ = yym1998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1988[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1999 := z.EncBinary()
					_ = yym1999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1988[3] {
					yym2001 := z.EncBinary()
					_ = yym2001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1988[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2002 := z.EncBinary()
					_ = yym2002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2003 := z.DecBinary()
	_ = yym2003
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2004 := r.ContainerType()
		if yyct2004 == codecSelferValueTypeMap1234 {
			yyl2004 := r.ReadMapStart()
			if yyl2004 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2004, d)
			}
		} else if yyct2004 == codecSelferValueTypeArray1234 {
			yyl2004 := r.ReadArrayStart()
			if yyl2004 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2004, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2005Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2005Slc
	var yyhl2005 bool = l >= 0
	for yyj2005 := 0; ; yyj2005++ {
		if yyhl2005 {
			if yyj2005 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2005Slc = r.DecodeBytes(yys2005Slc, true, true)
		yys2005 := string(yys2005Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2005 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2006 := &x.ListMeta
				yym2007 := z.DecBinary()
				_ = yym2007
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2006) {
				} else {
					z.DecFallback(yyv2006, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2008 := &x.Items
				yym2009 := z.DecBinary()
				_ = yym2009
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2008), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2005)
		} // end switch yys2005
	} // end for yyj2005
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2012 int
	var yyb2012 bool
	var yyhl2012 bool = l >= 0
	yyj2012++
	if yyhl2012 {
		yyb2012 = yyj2012 > l
	} else {
		yyb2012 = r.CheckBreak()
	}
	if yyb2012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2013 := &x.ListMeta
		yym2014 := z.DecBinary()
		_ = yym2014
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2013) {
		} else {
			z.DecFallback(yyv2013, false)
		}
	}
	yyj2012++
	if yyhl2012 {
		yyb2012 = yyj2012 > l
	} else {
		yyb2012 = r.CheckBreak()
	}
	if yyb2012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2015 := &x.Items
		yym2016 := z.DecBinary()
		_ = yym2016
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2015), d)
		}
	}
	yyj2012++
	if yyhl2012 {
		yyb2012 = yyj2012 > l
	} else {
		yyb2012 = r.CheckBreak()
	}
	if yyb2012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2012++
	if yyhl2012 {
		yyb2012 = yyj2012 > l
	} else {
		yyb2012 = r.CheckBreak()
	}
	if yyb2012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2012++
		if yyhl2012 {
			yyb2012 = yyj2012 > l
		} else {
			yyb2012 = r.CheckBreak()
		}
		if yyb2012 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2012-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2019 := z.EncBinary()
		_ = yym2019
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2020 := !z.EncBinary()
			yy2arr2020 := z.EncBasicHandle().StructToArray
			var yyq2020 [2]bool
			_, _, _ = yysep2020, yyq2020, yy2arr2020
			const yyr2020 bool = false
			yyq2020[0] = true
			yyq2020[1] = true
			var yynn2020 int
			if yyr2020 || yy2arr2020 {
				r.EncodeArrayStart(2)
			} else {
				yynn2020 = 0
				for _, b := range yyq2020 {
					if b {
						yynn2020++
					}
				}
				r.EncodeMapStart(yynn2020)
				yynn2020 = 0
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2020[0] {
					yy2022 := &x.ObjectMeta
					yy2022.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2020[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2023 := &x.ObjectMeta
					yy2023.CodecEncodeSelf(e)
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2020[1] {
					yy2025 := &x.Spec
					yy2025.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2020[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2026 := &x.Spec
					yy2026.CodecEncodeSelf(e)
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2027 := z.DecBinary()
	_ = yym2027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2028 := r.ContainerType()
		if yyct2028 == codecSelferValueTypeMap1234 {
			yyl2028 := r.ReadMapStart()
			if yyl2028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2028, d)
			}
		} else if yyct2028 == codecSelferValueTypeArray1234 {
			yyl2028 := r.ReadArrayStart()
			if yyl2028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2029Slc
	var yyhl2029 bool = l >= 0
	for yyj2029 := 0; ; yyj2029++ {
		if yyhl2029 {
			if yyj2029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2029Slc = r.DecodeBytes(yys2029Slc, true, true)
		yys2029 := string(yys2029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2029 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2030 := &x.ObjectMeta
				yyv2030.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2031 := &x.Spec
				yyv2031.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2029)
		} // end switch yys2029
	} // end for yyj2029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2032 int
	var yyb2032 bool
	var yyhl2032 bool = l >= 0
	yyj2032++
	if yyhl2032 {
		yyb2032 = yyj2032 > l
	} else {
		yyb2032 = r.CheckBreak()
	}
	if yyb2032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2033 := &x.ObjectMeta
		yyv2033.CodecDecodeSelf(d)
	}
	yyj2032++
	if yyhl2032 {
		yyb2032 = yyj2032 > l
	} else {
		yyb2032 = r.CheckBreak()
	}
	if yyb2032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2034 := &x.Spec
		yyv2034.CodecDecodeSelf(d)
	}
	for {
		yyj2032++
		if yyhl2032 {
			yyb2032 = yyj2032 > l
		} else {
			yyb2032 = r.CheckBreak()
		}
		if yyb2032 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2032-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2035 := z.EncBinary()
		_ = yym2035
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2036 := !z.EncBinary()
			yy2arr2036 := z.EncBasicHandle().StructToArray
			var yyq2036 [4]bool
			_, _, _ = yysep2036, yyq2036, yy2arr2036
			const yyr2036 bool = false
			yyq2036[0] = true
			yyq2036[1] = true
			yyq2036[2] = x.Kind != ""
			yyq2036[3] = x.APIVersion != ""
			var yynn2036 int
			if yyr2036 || yy2arr2036 {
				r.EncodeArrayStart(4)
			} else {
				yynn2036 = 0
				for _, b := range yyq2036 {
					if b {
						yynn2036++
					}
				}
				r.EncodeMapStart(yynn2036)
				yynn2036 = 0
			}
			if yyr2036 || yy2arr2036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2036[0] {
					yy2038 := &x.ObjectMeta
					yy2038.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2036[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2039 := &x.ObjectMeta
					yy2039.CodecEncodeSelf(e)
				}
			}
			if yyr2036 || yy2arr2036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2036[1] {
					yy2041 := &x.Template
					yy2041.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2036[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2042 := &x.Template
					yy2042.CodecEncodeSelf(e)
				}
			}
			if yyr2036 || yy2arr2036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2036[2] {
					yym2044 := z.EncBinary()
					_ = yym2044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2036[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2045 := z.EncBinary()
					_ = yym2045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2036 || yy2arr2036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2036[3] {
					yym2047 := z.EncBinary()
					_ = yym2047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2036[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2048 := z.EncBinary()
					_ = yym2048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2036 || yy2arr2036 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2049 := z.DecBinary()
	_ = yym2049
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2050 := r.ContainerType()
		if yyct2050 == codecSelferValueTypeMap1234 {
			yyl2050 := r.ReadMapStart()
			if yyl2050 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2050, d)
			}
		} else if yyct2050 == codecSelferValueTypeArray1234 {
			yyl2050 := r.ReadArrayStart()
			if yyl2050 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2050, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2051Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2051Slc
	var yyhl2051 bool = l >= 0
	for yyj2051 := 0; ; yyj2051++ {
		if yyhl2051 {
			if yyj2051 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2051Slc = r.DecodeBytes(yys2051Slc, true, true)
		yys2051 := string(yys2051Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2051 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2052 := &x.ObjectMeta
				yyv2052.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2053 := &x.Template
				yyv2053.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2051)
		} // end switch yys2051
	} // end for yyj2051
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2056 int
	var yyb2056 bool
	var yyhl2056 bool = l >= 0
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2057 := &x.ObjectMeta
		yyv2057.CodecDecodeSelf(d)
	}
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2058 := &x.Template
		yyv2058.CodecDecodeSelf(d)
	}
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2056++
		if yyhl2056 {
			yyb2056 = yyj2056 > l
		} else {
			yyb2056 = r.CheckBreak()
		}
		if yyb2056 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2056-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2061 := z.EncBinary()
		_ = yym2061
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2062 := !z.EncBinary()
			yy2arr2062 := z.EncBasicHandle().StructToArray
			var yyq2062 [4]bool
			_, _, _ = yysep2062, yyq2062, yy2arr2062
			const yyr2062 bool = false
			yyq2062[0] = true
			yyq2062[2] = x.Kind != ""
			yyq2062[3] = x.APIVersion != ""
			var yynn2062 int
			if yyr2062 || yy2arr2062 {
				r.EncodeArrayStart(4)
			} else {
				yynn2062 = 1
				for _, b := range yyq2062 {
					if b {
						yynn2062++
					}
				}
				r.EncodeMapStart(yynn2062)
				yynn2062 = 0
			}
			if yyr2062 || yy2arr2062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2062[0] {
					yy2064 := &x.ListMeta
					yym2065 := z.EncBinary()
					_ = yym2065
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2064) {
					} else {
						z.EncFallback(yy2064)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2062[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2066 := &x.ListMeta
					yym2067 := z.EncBinary()
					_ = yym2067
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2066) {
					} else {
						z.EncFallback(yy2066)
					}
				}
			}
			if yyr2062 || yy2arr2062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2070 := z.EncBinary()
					_ = yym2070
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2062 || yy2arr2062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2062[2] {
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2062[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2073 := z.EncBinary()
					_ = yym2073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2062 || yy2arr2062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2062[3] {
					yym2075 := z.EncBinary()
					_ = yym2075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2062[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2076 := z.EncBinary()
					_ = yym2076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2062 || yy2arr2062 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2077 := z.DecBinary()
	_ = yym2077
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2078 := r.ContainerType()
		if yyct2078 == codecSelferValueTypeMap1234 {
			yyl2078 := r.ReadMapStart()
			if yyl2078 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2078, d)
			}
		} else if yyct2078 == codecSelferValueTypeArray1234 {
			yyl2078 := r.ReadArrayStart()
			if yyl2078 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2078, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2079Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2079Slc
	var yyhl2079 bool = l >= 0
	for yyj2079 := 0; ; yyj2079++ {
		if yyhl2079 {
			if yyj2079 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2079Slc = r.DecodeBytes(yys2079Slc, true, true)
		yys2079 := string(yys2079Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2079 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2080 := &x.ListMeta
				yym2081 := z.DecBinary()
				_ = yym2081
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2080) {
				} else {
					z.DecFallback(yyv2080, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2082 := &x.Items
				yym2083 := z.DecBinary()
				_ = yym2083
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2082), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2079)
		} // end switch yys2079
	} // end for yyj2079
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2086 int
	var yyb2086 bool
	var yyhl2086 bool = l >= 0
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2087 := &x.ListMeta
		yym2088 := z.DecBinary()
		_ = yym2088
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2087) {
		} else {
			z.DecFallback(yyv2087, false)
		}
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2089 := &x.Items
		yym2090 := z.DecBinary()
		_ = yym2090
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2089), d)
		}
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2086++
		if yyhl2086 {
			yyb2086 = yyj2086 > l
		} else {
			yyb2086 = r.CheckBreak()
		}
		if yyb2086 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2086-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2093 := z.EncBinary()
		_ = yym2093
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2094 := !z.EncBinary()
			yy2arr2094 := z.EncBasicHandle().StructToArray
			var yyq2094 [3]bool
			_, _, _ = yysep2094, yyq2094, yy2arr2094
			const yyr2094 bool = false
			yyq2094[0] = x.Replicas != nil
			yyq2094[1] = len(x.Selector) != 0
			yyq2094[2] = x.Template != nil
			var yynn2094 int
			if yyr2094 || yy2arr2094 {
				r.EncodeArrayStart(3)
			} else {
				yynn2094 = 0
				for _, b := range yyq2094 {
					if b {
						yynn2094++
					}
				}
				r.EncodeMapStart(yynn2094)
				yynn2094 = 0
			}
			if yyr2094 || yy2arr2094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2094[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2096 := *x.Replicas
						yym2097 := z.EncBinary()
						_ = yym2097
						if false {
						} else {
							r.EncodeInt(int64(yy2096))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2094[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2098 := *x.Replicas
						yym2099 := z.EncBinary()
						_ = yym2099
						if false {
						} else {
							r.EncodeInt(int64(yy2098))
						}
					}
				}
			}
			if yyr2094 || yy2arr2094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2094[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2101 := z.EncBinary()
						_ = yym2101
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2094[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2102 := z.EncBinary()
						_ = yym2102
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2094 || yy2arr2094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2094[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2094[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2094 || yy2arr2094 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2104 := z.DecBinary()
	_ = yym2104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2105 := r.ContainerType()
		if yyct2105 == codecSelferValueTypeMap1234 {
			yyl2105 := r.ReadMapStart()
			if yyl2105 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2105, d)
			}
		} else if yyct2105 == codecSelferValueTypeArray1234 {
			yyl2105 := r.ReadArrayStart()
			if yyl2105 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2106Slc
	var yyhl2106 bool = l >= 0
	for yyj2106 := 0; ; yyj2106++ {
		if yyhl2106 {
			if yyj2106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2106Slc = r.DecodeBytes(yys2106Slc, true, true)
		yys2106 := string(yys2106Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2106 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2108 := z.DecBinary()
				_ = yym2108
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2109 := &x.Selector
				yym2110 := z.DecBinary()
				_ = yym2110
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2109, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2106)
		} // end switch yys2106
	} // end for yyj2106
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2112 int
	var yyb2112 bool
	var yyhl2112 bool = l >= 0
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2114 := z.DecBinary()
		_ = yym2114
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2115 := &x.Selector
		yym2116 := z.DecBinary()
		_ = yym2116
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2115, false, d)
		}
	}
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2112++
		if yyhl2112 {
			yyb2112 = yyj2112 > l
		} else {
			yyb2112 = r.CheckBreak()
		}
		if yyb2112 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2112-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2118 := z.EncBinary()
		_ = yym2118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2119 := !z.EncBinary()
			yy2arr2119 := z.EncBasicHandle().StructToArray
			var yyq2119 [2]bool
			_, _, _ = yysep2119, yyq2119, yy2arr2119
			const yyr2119 bool = false
			yyq2119[1] = x.ObservedGeneration != 0
			var yynn2119 int
			if yyr2119 || yy2arr2119 {
				r.EncodeArrayStart(2)
			} else {
				yynn2119 = 1
				for _, b := range yyq2119 {
					if b {
						yynn2119++
					}
				}
				r.EncodeMapStart(yynn2119)
				yynn2119 = 0
			}
			if yyr2119 || yy2arr2119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2121 := z.EncBinary()
				_ = yym2121
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2122 := z.EncBinary()
				_ = yym2122
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2119 || yy2arr2119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2119[1] {
					yym2124 := z.EncBinary()
					_ = yym2124
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2119[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2125 := z.EncBinary()
					_ = yym2125
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2119 || yy2arr2119 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2126 := z.DecBinary()
	_ = yym2126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2127 := r.ContainerType()
		if yyct2127 == codecSelferValueTypeMap1234 {
			yyl2127 := r.ReadMapStart()
			if yyl2127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2127, d)
			}
		} else if yyct2127 == codecSelferValueTypeArray1234 {
			yyl2127 := r.ReadArrayStart()
			if yyl2127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2128Slc
	var yyhl2128 bool = l >= 0
	for yyj2128 := 0; ; yyj2128++ {
		if yyhl2128 {
			if yyj2128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2128Slc = r.DecodeBytes(yys2128Slc, true, true)
		yys2128 := string(yys2128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2128 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2128)
		} // end switch yys2128
	} // end for yyj2128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2131 int
	var yyb2131 bool
	var yyhl2131 bool = l >= 0
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2131++
		if yyhl2131 {
			yyb2131 = yyj2131 > l
		} else {
			yyb2131 = r.CheckBreak()
		}
		if yyb2131 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2131-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2134 := z.EncBinary()
		_ = yym2134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2135 := !z.EncBinary()
			yy2arr2135 := z.EncBasicHandle().StructToArray
			var yyq2135 [5]bool
			_, _, _ = yysep2135, yyq2135, yy2arr2135
			const yyr2135 bool = false
			yyq2135[0] = true
			yyq2135[1] = true
			yyq2135[2] = true
			yyq2135[3] = x.Kind != ""
			yyq2135[4] = x.APIVersion != ""
			var yynn2135 int
			if yyr2135 || yy2arr2135 {
				r.EncodeArrayStart(5)
			} else {
				yynn2135 = 0
				for _, b := range yyq2135 {
					if b {
						yynn2135++
					}
				}
				r.EncodeMapStart(yynn2135)
				yynn2135 = 0
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2135[0] {
					yy2137 := &x.ObjectMeta
					yy2137.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2135[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2138 := &x.ObjectMeta
					yy2138.CodecEncodeSelf(e)
				}
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2135[1] {
					yy2140 := &x.Spec
					yy2140.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2135[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2141 := &x.Spec
					yy2141.CodecEncodeSelf(e)
				}
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2135[2] {
					yy2143 := &x.Status
					yy2143.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2135[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2144 := &x.Status
					yy2144.CodecEncodeSelf(e)
				}
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2135[3] {
					yym2146 := z.EncBinary()
					_ = yym2146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2135[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2147 := z.EncBinary()
					_ = yym2147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2135[4] {
					yym2149 := z.EncBinary()
					_ = yym2149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2135[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2150 := z.EncBinary()
					_ = yym2150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2151 := z.DecBinary()
	_ = yym2151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2152 := r.ContainerType()
		if yyct2152 == codecSelferValueTypeMap1234 {
			yyl2152 := r.ReadMapStart()
			if yyl2152 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2152, d)
			}
		} else if yyct2152 == codecSelferValueTypeArray1234 {
			yyl2152 := r.ReadArrayStart()
			if yyl2152 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2152, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2153Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2153Slc
	var yyhl2153 bool = l >= 0
	for yyj2153 := 0; ; yyj2153++ {
		if yyhl2153 {
			if yyj2153 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2153Slc = r.DecodeBytes(yys2153Slc, true, true)
		yys2153 := string(yys2153Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2153 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2154 := &x.ObjectMeta
				yyv2154.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2155 := &x.Spec
				yyv2155.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2156 := &x.Status
				yyv2156.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2153)
		} // end switch yys2153
	} // end for yyj2153
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2159 int
	var yyb2159 bool
	var yyhl2159 bool = l >= 0
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2160 := &x.ObjectMeta
		yyv2160.CodecDecodeSelf(d)
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2161 := &x.Spec
		yyv2161.CodecDecodeSelf(d)
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2162 := &x.Status
		yyv2162.CodecDecodeSelf(d)
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2159++
		if yyhl2159 {
			yyb2159 = yyj2159 > l
		} else {
			yyb2159 = r.CheckBreak()
		}
		if yyb2159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2165 := z.EncBinary()
		_ = yym2165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2166 := !z.EncBinary()
			yy2arr2166 := z.EncBasicHandle().StructToArray
			var yyq2166 [4]bool
			_, _, _ = yysep2166, yyq2166, yy2arr2166
			const yyr2166 bool = false
			yyq2166[0] = true
			yyq2166[2] = x.Kind != ""
			yyq2166[3] = x.APIVersion != ""
			var yynn2166 int
			if yyr2166 || yy2arr2166 {
				r.EncodeArrayStart(4)
			} else {
				yynn2166 = 1
				for _, b := range yyq2166 {
					if b {
						yynn2166++
					}
				}
				r.EncodeMapStart(yynn2166)
				yynn2166 = 0
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2166[0] {
					yy2168 := &x.ListMeta
					yym2169 := z.EncBinary()
					_ = yym2169
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2168) {
					} else {
						z.EncFallback(yy2168)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2166[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2170 := &x.ListMeta
					yym2171 := z.EncBinary()
					_ = yym2171
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2170) {
					} else {
						z.EncFallback(yy2170)
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2173 := z.EncBinary()
					_ = yym2173
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2174 := z.EncBinary()
					_ = yym2174
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2166[2] {
					yym2176 := z.EncBinary()
					_ = yym2176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2166[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2177 := z.EncBinary()
					_ = yym2177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2166[3] {
					yym2179 := z.EncBinary()
					_ = yym2179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2166[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2181 := z.DecBinary()
	_ = yym2181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2182 := r.ContainerType()
		if yyct2182 == codecSelferValueTypeMap1234 {
			yyl2182 := r.ReadMapStart()
			if yyl2182 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2182, d)
			}
		} else if yyct2182 == codecSelferValueTypeArray1234 {
			yyl2182 := r.ReadArrayStart()
			if yyl2182 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2182, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2183Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2183Slc
	var yyhl2183 bool = l >= 0
	for yyj2183 := 0; ; yyj2183++ {
		if yyhl2183 {
			if yyj2183 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2183Slc = r.DecodeBytes(yys2183Slc, true, true)
		yys2183 := string(yys2183Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2183 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2184 := &x.ListMeta
				yym2185 := z.DecBinary()
				_ = yym2185
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2184) {
				} else {
					z.DecFallback(yyv2184, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2186 := &x.Items
				yym2187 := z.DecBinary()
				_ = yym2187
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2186), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2183)
		} // end switch yys2183
	} // end for yyj2183
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2190 int
	var yyb2190 bool
	var yyhl2190 bool = l >= 0
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2191 := &x.ListMeta
		yym2192 := z.DecBinary()
		_ = yym2192
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2191) {
		} else {
			z.DecFallback(yyv2191, false)
		}
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2193 := &x.Items
		yym2194 := z.DecBinary()
		_ = yym2194
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2193), d)
		}
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2190++
		if yyhl2190 {
			yyb2190 = yyj2190 > l
		} else {
			yyb2190 = r.CheckBreak()
		}
		if yyb2190 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2190-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2197 := z.EncBinary()
	_ = yym2197
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2198 := z.DecBinary()
	_ = yym2198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2199 := z.EncBinary()
	_ = yym2199
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2200 := z.DecBinary()
	_ = yym2200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2201 := z.EncBinary()
		_ = yym2201
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2202 := !z.EncBinary()
			yy2arr2202 := z.EncBasicHandle().StructToArray
			var yyq2202 [1]bool
			_, _, _ = yysep2202, yyq2202, yy2arr2202
			const yyr2202 bool = false
			yyq2202[0] = true
			var yynn2202 int
			if yyr2202 || yy2arr2202 {
				r.EncodeArrayStart(1)
			} else {
				yynn2202 = 0
				for _, b := range yyq2202 {
					if b {
						yynn2202++
					}
				}
				r.EncodeMapStart(yynn2202)
				yynn2202 = 0
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2202[0] {
					yy2204 := &x.LoadBalancer
					yy2204.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2202[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2205 := &x.LoadBalancer
					yy2205.CodecEncodeSelf(e)
				}
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2206 := z.DecBinary()
	_ = yym2206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2207 := r.ContainerType()
		if yyct2207 == codecSelferValueTypeMap1234 {
			yyl2207 := r.ReadMapStart()
			if yyl2207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2207, d)
			}
		} else if yyct2207 == codecSelferValueTypeArray1234 {
			yyl2207 := r.ReadArrayStart()
			if yyl2207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2208Slc
	var yyhl2208 bool = l >= 0
	for yyj2208 := 0; ; yyj2208++ {
		if yyhl2208 {
			if yyj2208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2208Slc = r.DecodeBytes(yys2208Slc, true, true)
		yys2208 := string(yys2208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2208 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2209 := &x.LoadBalancer
				yyv2209.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2208)
		} // end switch yys2208
	} // end for yyj2208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2210 int
	var yyb2210 bool
	var yyhl2210 bool = l >= 0
	yyj2210++
	if yyhl2210 {
		yyb2210 = yyj2210 > l
	} else {
		yyb2210 = r.CheckBreak()
	}
	if yyb2210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2211 := &x.LoadBalancer
		yyv2211.CodecDecodeSelf(d)
	}
	for {
		yyj2210++
		if yyhl2210 {
			yyb2210 = yyj2210 > l
		} else {
			yyb2210 = r.CheckBreak()
		}
		if yyb2210 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2210-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2212 := z.EncBinary()
		_ = yym2212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2213 := !z.EncBinary()
			yy2arr2213 := z.EncBasicHandle().StructToArray
			var yyq2213 [1]bool
			_, _, _ = yysep2213, yyq2213, yy2arr2213
			const yyr2213 bool = false
			yyq2213[0] = len(x.Ingress) != 0
			var yynn2213 int
			if yyr2213 || yy2arr2213 {
				r.EncodeArrayStart(1)
			} else {
				yynn2213 = 0
				for _, b := range yyq2213 {
					if b {
						yynn2213++
					}
				}
				r.EncodeMapStart(yynn2213)
				yynn2213 = 0
			}
			if yyr2213 || yy2arr2213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2213[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2215 := z.EncBinary()
						_ = yym2215
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2213[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2216 := z.EncBinary()
						_ = yym2216
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2213 || yy2arr2213 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2217 := z.DecBinary()
	_ = yym2217
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2218 := r.ContainerType()
		if yyct2218 == codecSelferValueTypeMap1234 {
			yyl2218 := r.ReadMapStart()
			if yyl2218 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2218, d)
			}
		} else if yyct2218 == codecSelferValueTypeArray1234 {
			yyl2218 := r.ReadArrayStart()
			if yyl2218 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2218, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2219Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2219Slc
	var yyhl2219 bool = l >= 0
	for yyj2219 := 0; ; yyj2219++ {
		if yyhl2219 {
			if yyj2219 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2219Slc = r.DecodeBytes(yys2219Slc, true, true)
		yys2219 := string(yys2219Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2219 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2220 := &x.Ingress
				yym2221 := z.DecBinary()
				_ = yym2221
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2220), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2219)
		} // end switch yys2219
	} // end for yyj2219
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2222 int
	var yyb2222 bool
	var yyhl2222 bool = l >= 0
	yyj2222++
	if yyhl2222 {
		yyb2222 = yyj2222 > l
	} else {
		yyb2222 = r.CheckBreak()
	}
	if yyb2222 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2223 := &x.Ingress
		yym2224 := z.DecBinary()
		_ = yym2224
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2223), d)
		}
	}
	for {
		yyj2222++
		if yyhl2222 {
			yyb2222 = yyj2222 > l
		} else {
			yyb2222 = r.CheckBreak()
		}
		if yyb2222 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2222-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2225 := z.EncBinary()
		_ = yym2225
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2226 := !z.EncBinary()
			yy2arr2226 := z.EncBasicHandle().StructToArray
			var yyq2226 [2]bool
			_, _, _ = yysep2226, yyq2226, yy2arr2226
			const yyr2226 bool = false
			yyq2226[0] = x.IP != ""
			yyq2226[1] = x.Hostname != ""
			var yynn2226 int
			if yyr2226 || yy2arr2226 {
				r.EncodeArrayStart(2)
			} else {
				yynn2226 = 0
				for _, b := range yyq2226 {
					if b {
						yynn2226++
					}
				}
				r.EncodeMapStart(yynn2226)
				yynn2226 = 0
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2226[0] {
					yym2228 := z.EncBinary()
					_ = yym2228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2226[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2229 := z.EncBinary()
					_ = yym2229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2226[1] {
					yym2231 := z.EncBinary()
					_ = yym2231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2226[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2232 := z.EncBinary()
					_ = yym2232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2233 := z.DecBinary()
	_ = yym2233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2234 := r.ContainerType()
		if yyct2234 == codecSelferValueTypeMap1234 {
			yyl2234 := r.ReadMapStart()
			if yyl2234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2234, d)
			}
		} else if yyct2234 == codecSelferValueTypeArray1234 {
			yyl2234 := r.ReadArrayStart()
			if yyl2234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2235Slc
	var yyhl2235 bool = l >= 0
	for yyj2235 := 0; ; yyj2235++ {
		if yyhl2235 {
			if yyj2235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2235Slc = r.DecodeBytes(yys2235Slc, true, true)
		yys2235 := string(yys2235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2235 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2235)
		} // end switch yys2235
	} // end for yyj2235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2238 int
	var yyb2238 bool
	var yyhl2238 bool = l >= 0
	yyj2238++
	if yyhl2238 {
		yyb2238 = yyj2238 > l
	} else {
		yyb2238 = r.CheckBreak()
	}
	if yyb2238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2238++
	if yyhl2238 {
		yyb2238 = yyj2238 > l
	} else {
		yyb2238 = r.CheckBreak()
	}
	if yyb2238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2238++
		if yyhl2238 {
			yyb2238 = yyj2238 > l
		} else {
			yyb2238 = r.CheckBreak()
		}
		if yyb2238 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2238-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2241 := z.EncBinary()
		_ = yym2241
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2242 := !z.EncBinary()
			yy2arr2242 := z.EncBasicHandle().StructToArray
			var yyq2242 [8]bool
			_, _, _ = yysep2242, yyq2242, yy2arr2242
			const yyr2242 bool = false
			yyq2242[1] = len(x.Selector) != 0
			yyq2242[2] = x.ClusterIP != ""
			yyq2242[3] = x.Type != ""
			yyq2242[4] = len(x.ExternalIPs) != 0
			yyq2242[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2242[6] = x.SessionAffinity != ""
			yyq2242[7] = x.LoadBalancerIP != ""
			var yynn2242 int
			if yyr2242 || yy2arr2242 {
				r.EncodeArrayStart(8)
			} else {
				yynn2242 = 1
				for _, b := range yyq2242 {
					if b {
						yynn2242++
					}
				}
				r.EncodeMapStart(yynn2242)
				yynn2242 = 0
			}
			if yyr2242 || yy2arr2242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2244 := z.EncBinary()
					_ = yym2244
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2245 := z.EncBinary()
					_ = yym2245
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2242 || yy2arr2242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2242[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2247 := z.EncBinary()
						_ = yym2247
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2242[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2248 := z.EncBinary()
						_ = yym2248
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2242 || yy2arr2242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2242[2] {
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2242[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2251 := z.EncBinary()
					_ = yym2251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2242 || yy2arr2242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2242[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2242[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2242 || yy2arr2242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2242[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2254 := z.EncBinary()
						_ = yym2254
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2242[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2255 := z.EncBinary()
						_ = yym2255
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2242 || yy2arr2242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2242[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2257 := z.EncBinary()
						_ = yym2257
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2242[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2258 := z.EncBinary()
						_ = yym2258
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2242 || yy2arr2242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2242[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2242[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2242 || yy2arr2242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2242[7] {
					yym2261 := z.EncBinary()
					_ = yym2261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2242[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2262 := z.EncBinary()
					_ = yym2262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2242 || yy2arr2242 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2263 := z.DecBinary()
	_ = yym2263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2264 := r.ContainerType()
		if yyct2264 == codecSelferValueTypeMap1234 {
			yyl2264 := r.ReadMapStart()
			if yyl2264 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2264, d)
			}
		} else if yyct2264 == codecSelferValueTypeArray1234 {
			yyl2264 := r.ReadArrayStart()
			if yyl2264 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2264, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2265Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2265Slc
	var yyhl2265 bool = l >= 0
	for yyj2265 := 0; ; yyj2265++ {
		if yyhl2265 {
			if yyj2265 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2265Slc = r.DecodeBytes(yys2265Slc, true, true)
		yys2265 := string(yys2265Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2265 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2266 := &x.Ports
				yym2267 := z.DecBinary()
				_ = yym2267
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2266), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2268 := &x.Selector
				yym2269 := z.DecBinary()
				_ = yym2269
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2268, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2272 := &x.ExternalIPs
				yym2273 := z.DecBinary()
				_ = yym2273
				if false {
				} else {
					z.F.DecSliceStringX(yyv2272, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2274 := &x.DeprecatedPublicIPs
				yym2275 := z.DecBinary()
				_ = yym2275
				if false {
				} else {
					z.F.DecSliceStringX(yyv2274, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2265)
		} // end switch yys2265
	} // end for yyj2265
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2278 int
	var yyb2278 bool
	var yyhl2278 bool = l >= 0
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2279 := &x.Ports
		yym2280 := z.DecBinary()
		_ = yym2280
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2279), d)
		}
	}
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2281 := &x.Selector
		yym2282 := z.DecBinary()
		_ = yym2282
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2281, false, d)
		}
	}
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2285 := &x.ExternalIPs
		yym2286 := z.DecBinary()
		_ = yym2286
		if false {
		} else {
			z.F.DecSliceStringX(yyv2285, false, d)
		}
	}
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2287 := &x.DeprecatedPublicIPs
		yym2288 := z.DecBinary()
		_ = yym2288
		if false {
		} else {
			z.F.DecSliceStringX(yyv2287, false, d)
		}
	}
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2278++
	if yyhl2278 {
		yyb2278 = yyj2278 > l
	} else {
		yyb2278 = r.CheckBreak()
	}
	if yyb2278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj2278++
		if yyhl2278 {
			yyb2278 = yyj2278 > l
		} else {
			yyb2278 = r.CheckBreak()
		}
		if yyb2278 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2278-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2291 := z.EncBinary()
		_ = yym2291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2292 := !z.EncBinary()
			yy2arr2292 := z.EncBasicHandle().StructToArray
			var yyq2292 [5]bool
			_, _, _ = yysep2292, yyq2292, yy2arr2292
			const yyr2292 bool = false
			yyq2292[0] = x.Name != ""
			yyq2292[1] = x.Protocol != ""
			yyq2292[3] = true
			yyq2292[4] = x.NodePort != 0
			var yynn2292 int
			if yyr2292 || yy2arr2292 {
				r.EncodeArrayStart(5)
			} else {
				yynn2292 = 1
				for _, b := range yyq2292 {
					if b {
						yynn2292++
					}
				}
				r.EncodeMapStart(yynn2292)
				yynn2292 = 0
			}
			if yyr2292 || yy2arr2292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2292[0] {
					yym2294 := z.EncBinary()
					_ = yym2294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2292[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2295 := z.EncBinary()
					_ = yym2295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2292 || yy2arr2292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2292[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2292[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2292 || yy2arr2292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2298 := z.EncBinary()
				_ = yym2298
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2299 := z.EncBinary()
				_ = yym2299
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2292 || yy2arr2292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2292[3] {
					yy2301 := &x.TargetPort
					yym2302 := z.EncBinary()
					_ = yym2302
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2301) {
					} else if !yym2302 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2301)
					} else {
						z.EncFallback(yy2301)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2292[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2303 := &x.TargetPort
					yym2304 := z.EncBinary()
					_ = yym2304
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2303) {
					} else if !yym2304 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2303)
					} else {
						z.EncFallback(yy2303)
					}
				}
			}
			if yyr2292 || yy2arr2292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2292[4] {
					yym2306 := z.EncBinary()
					_ = yym2306
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2292[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2307 := z.EncBinary()
					_ = yym2307
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2292 || yy2arr2292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2308 := z.DecBinary()
	_ = yym2308
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2309 := r.ContainerType()
		if yyct2309 == codecSelferValueTypeMap1234 {
			yyl2309 := r.ReadMapStart()
			if yyl2309 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2309, d)
			}
		} else if yyct2309 == codecSelferValueTypeArray1234 {
			yyl2309 := r.ReadArrayStart()
			if yyl2309 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2309, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2310Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2310Slc
	var yyhl2310 bool = l >= 0
	for yyj2310 := 0; ; yyj2310++ {
		if yyhl2310 {
			if yyj2310 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2310Slc = r.DecodeBytes(yys2310Slc, true, true)
		yys2310 := string(yys2310Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2310 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv2314 := &x.TargetPort
				yym2315 := z.DecBinary()
				_ = yym2315
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2314) {
				} else if !yym2315 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2314)
				} else {
					z.DecFallback(yyv2314, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2310)
		} // end switch yys2310
	} // end for yyj2310
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2317 int
	var yyb2317 bool
	var yyhl2317 bool = l >= 0
	yyj2317++
	if yyhl2317 {
		yyb2317 = yyj2317 > l
	} else {
		yyb2317 = r.CheckBreak()
	}
	if yyb2317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2317++
	if yyhl2317 {
		yyb2317 = yyj2317 > l
	} else {
		yyb2317 = r.CheckBreak()
	}
	if yyb2317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2317++
	if yyhl2317 {
		yyb2317 = yyj2317 > l
	} else {
		yyb2317 = r.CheckBreak()
	}
	if yyb2317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2317++
	if yyhl2317 {
		yyb2317 = yyj2317 > l
	} else {
		yyb2317 = r.CheckBreak()
	}
	if yyb2317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv2321 := &x.TargetPort
		yym2322 := z.DecBinary()
		_ = yym2322
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2321) {
		} else if !yym2322 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2321)
		} else {
			z.DecFallback(yyv2321, false)
		}
	}
	yyj2317++
	if yyhl2317 {
		yyb2317 = yyj2317 > l
	} else {
		yyb2317 = r.CheckBreak()
	}
	if yyb2317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2317++
		if yyhl2317 {
			yyb2317 = yyj2317 > l
		} else {
			yyb2317 = r.CheckBreak()
		}
		if yyb2317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2324 := z.EncBinary()
		_ = yym2324
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2325 := !z.EncBinary()
			yy2arr2325 := z.EncBasicHandle().StructToArray
			var yyq2325 [5]bool
			_, _, _ = yysep2325, yyq2325, yy2arr2325
			const yyr2325 bool = false
			yyq2325[0] = true
			yyq2325[1] = true
			yyq2325[2] = true
			yyq2325[3] = x.Kind != ""
			yyq2325[4] = x.APIVersion != ""
			var yynn2325 int
			if yyr2325 || yy2arr2325 {
				r.EncodeArrayStart(5)
			} else {
				yynn2325 = 0
				for _, b := range yyq2325 {
					if b {
						yynn2325++
					}
				}
				r.EncodeMapStart(yynn2325)
				yynn2325 = 0
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[0] {
					yy2327 := &x.ObjectMeta
					yy2327.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2325[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2328 := &x.ObjectMeta
					yy2328.CodecEncodeSelf(e)
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[1] {
					yy2330 := &x.Spec
					yy2330.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2325[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2331 := &x.Spec
					yy2331.CodecEncodeSelf(e)
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[2] {
					yy2333 := &x.Status
					yy2333.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2325[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2334 := &x.Status
					yy2334.CodecEncodeSelf(e)
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[3] {
					yym2336 := z.EncBinary()
					_ = yym2336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2325[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2337 := z.EncBinary()
					_ = yym2337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[4] {
					yym2339 := z.EncBinary()
					_ = yym2339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2325[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2340 := z.EncBinary()
					_ = yym2340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2341 := z.DecBinary()
	_ = yym2341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2342 := r.ContainerType()
		if yyct2342 == codecSelferValueTypeMap1234 {
			yyl2342 := r.ReadMapStart()
			if yyl2342 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2342, d)
			}
		} else if yyct2342 == codecSelferValueTypeArray1234 {
			yyl2342 := r.ReadArrayStart()
			if yyl2342 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2342, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2343Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2343Slc
	var yyhl2343 bool = l >= 0
	for yyj2343 := 0; ; yyj2343++ {
		if yyhl2343 {
			if yyj2343 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2343Slc = r.DecodeBytes(yys2343Slc, true, true)
		yys2343 := string(yys2343Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2343 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2344 := &x.ObjectMeta
				yyv2344.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2345 := &x.Spec
				yyv2345.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2346 := &x.Status
				yyv2346.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2343)
		} // end switch yys2343
	} // end for yyj2343
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2349 int
	var yyb2349 bool
	var yyhl2349 bool = l >= 0
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2350 := &x.ObjectMeta
		yyv2350.CodecDecodeSelf(d)
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2351 := &x.Spec
		yyv2351.CodecDecodeSelf(d)
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2352 := &x.Status
		yyv2352.CodecDecodeSelf(d)
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2349++
		if yyhl2349 {
			yyb2349 = yyj2349 > l
		} else {
			yyb2349 = r.CheckBreak()
		}
		if yyb2349 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2349-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2355 := z.EncBinary()
		_ = yym2355
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2356 := !z.EncBinary()
			yy2arr2356 := z.EncBasicHandle().StructToArray
			var yyq2356 [4]bool
			_, _, _ = yysep2356, yyq2356, yy2arr2356
			const yyr2356 bool = false
			yyq2356[0] = true
			yyq2356[2] = x.Kind != ""
			yyq2356[3] = x.APIVersion != ""
			var yynn2356 int
			if yyr2356 || yy2arr2356 {
				r.EncodeArrayStart(4)
			} else {
				yynn2356 = 1
				for _, b := range yyq2356 {
					if b {
						yynn2356++
					}
				}
				r.EncodeMapStart(yynn2356)
				yynn2356 = 0
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2356[0] {
					yy2358 := &x.ListMeta
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2358) {
					} else {
						z.EncFallback(yy2358)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2356[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2360 := &x.ListMeta
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2360) {
					} else {
						z.EncFallback(yy2360)
					}
				}
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2356[2] {
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2356[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2367 := z.EncBinary()
					_ = yym2367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2356[3] {
					yym2369 := z.EncBinary()
					_ = yym2369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2356[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2370 := z.EncBinary()
					_ = yym2370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2371 := z.DecBinary()
	_ = yym2371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2372 := r.ContainerType()
		if yyct2372 == codecSelferValueTypeMap1234 {
			yyl2372 := r.ReadMapStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2372, d)
			}
		} else if yyct2372 == codecSelferValueTypeArray1234 {
			yyl2372 := r.ReadArrayStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2373Slc
	var yyhl2373 bool = l >= 0
	for yyj2373 := 0; ; yyj2373++ {
		if yyhl2373 {
			if yyj2373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2373Slc = r.DecodeBytes(yys2373Slc, true, true)
		yys2373 := string(yys2373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2373 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2374 := &x.ListMeta
				yym2375 := z.DecBinary()
				_ = yym2375
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2374) {
				} else {
					z.DecFallback(yyv2374, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2376 := &x.Items
				yym2377 := z.DecBinary()
				_ = yym2377
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2376), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2373)
		} // end switch yys2373
	} // end for yyj2373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2380 int
	var yyb2380 bool
	var yyhl2380 bool = l >= 0
	yyj2380++
	if yyhl2380 {
		yyb2380 = yyj2380 > l
	} else {
		yyb2380 = r.CheckBreak()
	}
	if yyb2380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2381 := &x.ListMeta
		yym2382 := z.DecBinary()
		_ = yym2382
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2381) {
		} else {
			z.DecFallback(yyv2381, false)
		}
	}
	yyj2380++
	if yyhl2380 {
		yyb2380 = yyj2380 > l
	} else {
		yyb2380 = r.CheckBreak()
	}
	if yyb2380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2383 := &x.Items
		yym2384 := z.DecBinary()
		_ = yym2384
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2383), d)
		}
	}
	yyj2380++
	if yyhl2380 {
		yyb2380 = yyj2380 > l
	} else {
		yyb2380 = r.CheckBreak()
	}
	if yyb2380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2380++
	if yyhl2380 {
		yyb2380 = yyj2380 > l
	} else {
		yyb2380 = r.CheckBreak()
	}
	if yyb2380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2380++
		if yyhl2380 {
			yyb2380 = yyj2380 > l
		} else {
			yyb2380 = r.CheckBreak()
		}
		if yyb2380 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2380-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2387 := z.EncBinary()
		_ = yym2387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2388 := !z.EncBinary()
			yy2arr2388 := z.EncBasicHandle().StructToArray
			var yyq2388 [5]bool
			_, _, _ = yysep2388, yyq2388, yy2arr2388
			const yyr2388 bool = false
			yyq2388[0] = true
			yyq2388[1] = len(x.Secrets) != 0
			yyq2388[2] = len(x.ImagePullSecrets) != 0
			yyq2388[3] = x.Kind != ""
			yyq2388[4] = x.APIVersion != ""
			var yynn2388 int
			if yyr2388 || yy2arr2388 {
				r.EncodeArrayStart(5)
			} else {
				yynn2388 = 0
				for _, b := range yyq2388 {
					if b {
						yynn2388++
					}
				}
				r.EncodeMapStart(yynn2388)
				yynn2388 = 0
			}
			if yyr2388 || yy2arr2388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2388[0] {
					yy2390 := &x.ObjectMeta
					yy2390.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2388[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2391 := &x.ObjectMeta
					yy2391.CodecEncodeSelf(e)
				}
			}
			if yyr2388 || yy2arr2388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2388[1] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2393 := z.EncBinary()
						_ = yym2393
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2388[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2394 := z.EncBinary()
						_ = yym2394
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2388 || yy2arr2388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2388[2] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2396 := z.EncBinary()
						_ = yym2396
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2388[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2397 := z.EncBinary()
						_ = yym2397
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2388 || yy2arr2388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2388[3] {
					yym2399 := z.EncBinary()
					_ = yym2399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2388[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2388 || yy2arr2388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2388[4] {
					yym2402 := z.EncBinary()
					_ = yym2402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2388[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2403 := z.EncBinary()
					_ = yym2403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2388 || yy2arr2388 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2404 := z.DecBinary()
	_ = yym2404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2405 := r.ContainerType()
		if yyct2405 == codecSelferValueTypeMap1234 {
			yyl2405 := r.ReadMapStart()
			if yyl2405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2405, d)
			}
		} else if yyct2405 == codecSelferValueTypeArray1234 {
			yyl2405 := r.ReadArrayStart()
			if yyl2405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2406Slc
	var yyhl2406 bool = l >= 0
	for yyj2406 := 0; ; yyj2406++ {
		if yyhl2406 {
			if yyj2406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2406Slc = r.DecodeBytes(yys2406Slc, true, true)
		yys2406 := string(yys2406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2406 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2407 := &x.ObjectMeta
				yyv2407.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2408 := &x.Secrets
				yym2409 := z.DecBinary()
				_ = yym2409
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2408), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2410 := &x.ImagePullSecrets
				yym2411 := z.DecBinary()
				_ = yym2411
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2410), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2406)
		} // end switch yys2406
	} // end for yyj2406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2414 int
	var yyb2414 bool
	var yyhl2414 bool = l >= 0
	yyj2414++
	if yyhl2414 {
		yyb2414 = yyj2414 > l
	} else {
		yyb2414 = r.CheckBreak()
	}
	if yyb2414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2415 := &x.ObjectMeta
		yyv2415.CodecDecodeSelf(d)
	}
	yyj2414++
	if yyhl2414 {
		yyb2414 = yyj2414 > l
	} else {
		yyb2414 = r.CheckBreak()
	}
	if yyb2414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2416 := &x.Secrets
		yym2417 := z.DecBinary()
		_ = yym2417
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2416), d)
		}
	}
	yyj2414++
	if yyhl2414 {
		yyb2414 = yyj2414 > l
	} else {
		yyb2414 = r.CheckBreak()
	}
	if yyb2414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2418 := &x.ImagePullSecrets
		yym2419 := z.DecBinary()
		_ = yym2419
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2418), d)
		}
	}
	yyj2414++
	if yyhl2414 {
		yyb2414 = yyj2414 > l
	} else {
		yyb2414 = r.CheckBreak()
	}
	if yyb2414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2414++
	if yyhl2414 {
		yyb2414 = yyj2414 > l
	} else {
		yyb2414 = r.CheckBreak()
	}
	if yyb2414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2414++
		if yyhl2414 {
			yyb2414 = yyj2414 > l
		} else {
			yyb2414 = r.CheckBreak()
		}
		if yyb2414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2422 := z.EncBinary()
		_ = yym2422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2423 := !z.EncBinary()
			yy2arr2423 := z.EncBasicHandle().StructToArray
			var yyq2423 [4]bool
			_, _, _ = yysep2423, yyq2423, yy2arr2423
			const yyr2423 bool = false
			yyq2423[0] = true
			yyq2423[2] = x.Kind != ""
			yyq2423[3] = x.APIVersion != ""
			var yynn2423 int
			if yyr2423 || yy2arr2423 {
				r.EncodeArrayStart(4)
			} else {
				yynn2423 = 1
				for _, b := range yyq2423 {
					if b {
						yynn2423++
					}
				}
				r.EncodeMapStart(yynn2423)
				yynn2423 = 0
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[0] {
					yy2425 := &x.ListMeta
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2425) {
					} else {
						z.EncFallback(yy2425)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2427 := &x.ListMeta
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2427) {
					} else {
						z.EncFallback(yy2427)
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2430 := z.EncBinary()
					_ = yym2430
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2431 := z.EncBinary()
					_ = yym2431
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[2] {
					yym2433 := z.EncBinary()
					_ = yym2433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2423[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2434 := z.EncBinary()
					_ = yym2434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[3] {
					yym2436 := z.EncBinary()
					_ = yym2436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2423[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2437 := z.EncBinary()
					_ = yym2437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2438 := z.DecBinary()
	_ = yym2438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2439 := r.ContainerType()
		if yyct2439 == codecSelferValueTypeMap1234 {
			yyl2439 := r.ReadMapStart()
			if yyl2439 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2439, d)
			}
		} else if yyct2439 == codecSelferValueTypeArray1234 {
			yyl2439 := r.ReadArrayStart()
			if yyl2439 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2439, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2440Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2440Slc
	var yyhl2440 bool = l >= 0
	for yyj2440 := 0; ; yyj2440++ {
		if yyhl2440 {
			if yyj2440 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2440Slc = r.DecodeBytes(yys2440Slc, true, true)
		yys2440 := string(yys2440Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2440 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2441 := &x.ListMeta
				yym2442 := z.DecBinary()
				_ = yym2442
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2441) {
				} else {
					z.DecFallback(yyv2441, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2443 := &x.Items
				yym2444 := z.DecBinary()
				_ = yym2444
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2443), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2440)
		} // end switch yys2440
	} // end for yyj2440
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2447 int
	var yyb2447 bool
	var yyhl2447 bool = l >= 0
	yyj2447++
	if yyhl2447 {
		yyb2447 = yyj2447 > l
	} else {
		yyb2447 = r.CheckBreak()
	}
	if yyb2447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2448 := &x.ListMeta
		yym2449 := z.DecBinary()
		_ = yym2449
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2448) {
		} else {
			z.DecFallback(yyv2448, false)
		}
	}
	yyj2447++
	if yyhl2447 {
		yyb2447 = yyj2447 > l
	} else {
		yyb2447 = r.CheckBreak()
	}
	if yyb2447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2450 := &x.Items
		yym2451 := z.DecBinary()
		_ = yym2451
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2450), d)
		}
	}
	yyj2447++
	if yyhl2447 {
		yyb2447 = yyj2447 > l
	} else {
		yyb2447 = r.CheckBreak()
	}
	if yyb2447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2447++
	if yyhl2447 {
		yyb2447 = yyj2447 > l
	} else {
		yyb2447 = r.CheckBreak()
	}
	if yyb2447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2447++
		if yyhl2447 {
			yyb2447 = yyj2447 > l
		} else {
			yyb2447 = r.CheckBreak()
		}
		if yyb2447 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2447-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2454 := z.EncBinary()
		_ = yym2454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2455 := !z.EncBinary()
			yy2arr2455 := z.EncBasicHandle().StructToArray
			var yyq2455 [4]bool
			_, _, _ = yysep2455, yyq2455, yy2arr2455
			const yyr2455 bool = false
			yyq2455[0] = true
			yyq2455[2] = x.Kind != ""
			yyq2455[3] = x.APIVersion != ""
			var yynn2455 int
			if yyr2455 || yy2arr2455 {
				r.EncodeArrayStart(4)
			} else {
				yynn2455 = 1
				for _, b := range yyq2455 {
					if b {
						yynn2455++
					}
				}
				r.EncodeMapStart(yynn2455)
				yynn2455 = 0
			}
			if yyr2455 || yy2arr2455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2455[0] {
					yy2457 := &x.ObjectMeta
					yy2457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2455[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2458 := &x.ObjectMeta
					yy2458.CodecEncodeSelf(e)
				}
			}
			if yyr2455 || yy2arr2455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2461 := z.EncBinary()
					_ = yym2461
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2455 || yy2arr2455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2455[2] {
					yym2463 := z.EncBinary()
					_ = yym2463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2455[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2464 := z.EncBinary()
					_ = yym2464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2455 || yy2arr2455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2455[3] {
					yym2466 := z.EncBinary()
					_ = yym2466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2455[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2467 := z.EncBinary()
					_ = yym2467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2455 || yy2arr2455 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2468 := z.DecBinary()
	_ = yym2468
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2469 := r.ContainerType()
		if yyct2469 == codecSelferValueTypeMap1234 {
			yyl2469 := r.ReadMapStart()
			if yyl2469 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2469, d)
			}
		} else if yyct2469 == codecSelferValueTypeArray1234 {
			yyl2469 := r.ReadArrayStart()
			if yyl2469 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2469, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2470Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2470Slc
	var yyhl2470 bool = l >= 0
	for yyj2470 := 0; ; yyj2470++ {
		if yyhl2470 {
			if yyj2470 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2470Slc = r.DecodeBytes(yys2470Slc, true, true)
		yys2470 := string(yys2470Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2470 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2471 := &x.ObjectMeta
				yyv2471.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2472 := &x.Subsets
				yym2473 := z.DecBinary()
				_ = yym2473
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2472), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2470)
		} // end switch yys2470
	} // end for yyj2470
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2476 int
	var yyb2476 bool
	var yyhl2476 bool = l >= 0
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2477 := &x.ObjectMeta
		yyv2477.CodecDecodeSelf(d)
	}
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2478 := &x.Subsets
		yym2479 := z.DecBinary()
		_ = yym2479
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2478), d)
		}
	}
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2476++
		if yyhl2476 {
			yyb2476 = yyj2476 > l
		} else {
			yyb2476 = r.CheckBreak()
		}
		if yyb2476 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2476-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2482 := z.EncBinary()
		_ = yym2482
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2483 := !z.EncBinary()
			yy2arr2483 := z.EncBasicHandle().StructToArray
			var yyq2483 [3]bool
			_, _, _ = yysep2483, yyq2483, yy2arr2483
			const yyr2483 bool = false
			yyq2483[0] = len(x.Addresses) != 0
			yyq2483[1] = len(x.NotReadyAddresses) != 0
			yyq2483[2] = len(x.Ports) != 0
			var yynn2483 int
			if yyr2483 || yy2arr2483 {
				r.EncodeArrayStart(3)
			} else {
				yynn2483 = 0
				for _, b := range yyq2483 {
					if b {
						yynn2483++
					}
				}
				r.EncodeMapStart(yynn2483)
				yynn2483 = 0
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2483[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2485 := z.EncBinary()
						_ = yym2485
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2483[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2486 := z.EncBinary()
						_ = yym2486
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2483[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2488 := z.EncBinary()
						_ = yym2488
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2483[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2489 := z.EncBinary()
						_ = yym2489
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2483[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2491 := z.EncBinary()
						_ = yym2491
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2483[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2492 := z.EncBinary()
						_ = yym2492
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2493 := z.DecBinary()
	_ = yym2493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2494 := r.ContainerType()
		if yyct2494 == codecSelferValueTypeMap1234 {
			yyl2494 := r.ReadMapStart()
			if yyl2494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2494, d)
			}
		} else if yyct2494 == codecSelferValueTypeArray1234 {
			yyl2494 := r.ReadArrayStart()
			if yyl2494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2495Slc
	var yyhl2495 bool = l >= 0
	for yyj2495 := 0; ; yyj2495++ {
		if yyhl2495 {
			if yyj2495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2495Slc = r.DecodeBytes(yys2495Slc, true, true)
		yys2495 := string(yys2495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2495 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2496 := &x.Addresses
				yym2497 := z.DecBinary()
				_ = yym2497
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2496), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2498 := &x.NotReadyAddresses
				yym2499 := z.DecBinary()
				_ = yym2499
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2498), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2500 := &x.Ports
				yym2501 := z.DecBinary()
				_ = yym2501
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2500), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2495)
		} // end switch yys2495
	} // end for yyj2495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2502 int
	var yyb2502 bool
	var yyhl2502 bool = l >= 0
	yyj2502++
	if yyhl2502 {
		yyb2502 = yyj2502 > l
	} else {
		yyb2502 = r.CheckBreak()
	}
	if yyb2502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2503 := &x.Addresses
		yym2504 := z.DecBinary()
		_ = yym2504
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2503), d)
		}
	}
	yyj2502++
	if yyhl2502 {
		yyb2502 = yyj2502 > l
	} else {
		yyb2502 = r.CheckBreak()
	}
	if yyb2502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2505 := &x.NotReadyAddresses
		yym2506 := z.DecBinary()
		_ = yym2506
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2505), d)
		}
	}
	yyj2502++
	if yyhl2502 {
		yyb2502 = yyj2502 > l
	} else {
		yyb2502 = r.CheckBreak()
	}
	if yyb2502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2507 := &x.Ports
		yym2508 := z.DecBinary()
		_ = yym2508
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2507), d)
		}
	}
	for {
		yyj2502++
		if yyhl2502 {
			yyb2502 = yyj2502 > l
		} else {
			yyb2502 = r.CheckBreak()
		}
		if yyb2502 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2502-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2509 := z.EncBinary()
		_ = yym2509
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2510 := !z.EncBinary()
			yy2arr2510 := z.EncBasicHandle().StructToArray
			var yyq2510 [2]bool
			_, _, _ = yysep2510, yyq2510, yy2arr2510
			const yyr2510 bool = false
			yyq2510[1] = x.TargetRef != nil
			var yynn2510 int
			if yyr2510 || yy2arr2510 {
				r.EncodeArrayStart(2)
			} else {
				yynn2510 = 1
				for _, b := range yyq2510 {
					if b {
						yynn2510++
					}
				}
				r.EncodeMapStart(yynn2510)
				yynn2510 = 0
			}
			if yyr2510 || yy2arr2510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2512 := z.EncBinary()
				_ = yym2512
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2513 := z.EncBinary()
				_ = yym2513
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2510 || yy2arr2510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2510[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2510[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2510 || yy2arr2510 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2515 := z.DecBinary()
	_ = yym2515
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2516 := r.ContainerType()
		if yyct2516 == codecSelferValueTypeMap1234 {
			yyl2516 := r.ReadMapStart()
			if yyl2516 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2516, d)
			}
		} else if yyct2516 == codecSelferValueTypeArray1234 {
			yyl2516 := r.ReadArrayStart()
			if yyl2516 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2516, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2517Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2517Slc
	var yyhl2517 bool = l >= 0
	for yyj2517 := 0; ; yyj2517++ {
		if yyhl2517 {
			if yyj2517 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2517Slc = r.DecodeBytes(yys2517Slc, true, true)
		yys2517 := string(yys2517Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2517 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2517)
		} // end switch yys2517
	} // end for yyj2517
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2520 int
	var yyb2520 bool
	var yyhl2520 bool = l >= 0
	yyj2520++
	if yyhl2520 {
		yyb2520 = yyj2520 > l
	} else {
		yyb2520 = r.CheckBreak()
	}
	if yyb2520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2520++
	if yyhl2520 {
		yyb2520 = yyj2520 > l
	} else {
		yyb2520 = r.CheckBreak()
	}
	if yyb2520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2520++
		if yyhl2520 {
			yyb2520 = yyj2520 > l
		} else {
			yyb2520 = r.CheckBreak()
		}
		if yyb2520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2523 := z.EncBinary()
		_ = yym2523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2524 := !z.EncBinary()
			yy2arr2524 := z.EncBasicHandle().StructToArray
			var yyq2524 [3]bool
			_, _, _ = yysep2524, yyq2524, yy2arr2524
			const yyr2524 bool = false
			yyq2524[0] = x.Name != ""
			yyq2524[2] = x.Protocol != ""
			var yynn2524 int
			if yyr2524 || yy2arr2524 {
				r.EncodeArrayStart(3)
			} else {
				yynn2524 = 1
				for _, b := range yyq2524 {
					if b {
						yynn2524++
					}
				}
				r.EncodeMapStart(yynn2524)
				yynn2524 = 0
			}
			if yyr2524 || yy2arr2524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2524[0] {
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2524[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2524 || yy2arr2524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2529 := z.EncBinary()
				_ = yym2529
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2530 := z.EncBinary()
				_ = yym2530
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2524 || yy2arr2524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2524[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2524[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2524 || yy2arr2524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2532 := z.DecBinary()
	_ = yym2532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2533 := r.ContainerType()
		if yyct2533 == codecSelferValueTypeMap1234 {
			yyl2533 := r.ReadMapStart()
			if yyl2533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2533, d)
			}
		} else if yyct2533 == codecSelferValueTypeArray1234 {
			yyl2533 := r.ReadArrayStart()
			if yyl2533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2534Slc
	var yyhl2534 bool = l >= 0
	for yyj2534 := 0; ; yyj2534++ {
		if yyhl2534 {
			if yyj2534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2534Slc = r.DecodeBytes(yys2534Slc, true, true)
		yys2534 := string(yys2534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2534 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2534)
		} // end switch yys2534
	} // end for yyj2534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2538 int
	var yyb2538 bool
	var yyhl2538 bool = l >= 0
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2538++
		if yyhl2538 {
			yyb2538 = yyj2538 > l
		} else {
			yyb2538 = r.CheckBreak()
		}
		if yyb2538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2542 := z.EncBinary()
		_ = yym2542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2543 := !z.EncBinary()
			yy2arr2543 := z.EncBasicHandle().StructToArray
			var yyq2543 [4]bool
			_, _, _ = yysep2543, yyq2543, yy2arr2543
			const yyr2543 bool = false
			yyq2543[0] = true
			yyq2543[2] = x.Kind != ""
			yyq2543[3] = x.APIVersion != ""
			var yynn2543 int
			if yyr2543 || yy2arr2543 {
				r.EncodeArrayStart(4)
			} else {
				yynn2543 = 1
				for _, b := range yyq2543 {
					if b {
						yynn2543++
					}
				}
				r.EncodeMapStart(yynn2543)
				yynn2543 = 0
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[0] {
					yy2545 := &x.ListMeta
					yym2546 := z.EncBinary()
					_ = yym2546
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2545) {
					} else {
						z.EncFallback(yy2545)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2543[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2547 := &x.ListMeta
					yym2548 := z.EncBinary()
					_ = yym2548
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2547) {
					} else {
						z.EncFallback(yy2547)
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2550 := z.EncBinary()
					_ = yym2550
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[2] {
					yym2553 := z.EncBinary()
					_ = yym2553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2543[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2554 := z.EncBinary()
					_ = yym2554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[3] {
					yym2556 := z.EncBinary()
					_ = yym2556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2543[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2557 := z.EncBinary()
					_ = yym2557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2558 := z.DecBinary()
	_ = yym2558
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2559 := r.ContainerType()
		if yyct2559 == codecSelferValueTypeMap1234 {
			yyl2559 := r.ReadMapStart()
			if yyl2559 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2559, d)
			}
		} else if yyct2559 == codecSelferValueTypeArray1234 {
			yyl2559 := r.ReadArrayStart()
			if yyl2559 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2559, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2560Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2560Slc
	var yyhl2560 bool = l >= 0
	for yyj2560 := 0; ; yyj2560++ {
		if yyhl2560 {
			if yyj2560 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2560Slc = r.DecodeBytes(yys2560Slc, true, true)
		yys2560 := string(yys2560Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2560 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2561 := &x.ListMeta
				yym2562 := z.DecBinary()
				_ = yym2562
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2561) {
				} else {
					z.DecFallback(yyv2561, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2563 := &x.Items
				yym2564 := z.DecBinary()
				_ = yym2564
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2563), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2560)
		} // end switch yys2560
	} // end for yyj2560
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2567 int
	var yyb2567 bool
	var yyhl2567 bool = l >= 0
	yyj2567++
	if yyhl2567 {
		yyb2567 = yyj2567 > l
	} else {
		yyb2567 = r.CheckBreak()
	}
	if yyb2567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2568 := &x.ListMeta
		yym2569 := z.DecBinary()
		_ = yym2569
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2568) {
		} else {
			z.DecFallback(yyv2568, false)
		}
	}
	yyj2567++
	if yyhl2567 {
		yyb2567 = yyj2567 > l
	} else {
		yyb2567 = r.CheckBreak()
	}
	if yyb2567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2570 := &x.Items
		yym2571 := z.DecBinary()
		_ = yym2571
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2570), d)
		}
	}
	yyj2567++
	if yyhl2567 {
		yyb2567 = yyj2567 > l
	} else {
		yyb2567 = r.CheckBreak()
	}
	if yyb2567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2567++
	if yyhl2567 {
		yyb2567 = yyj2567 > l
	} else {
		yyb2567 = r.CheckBreak()
	}
	if yyb2567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2567++
		if yyhl2567 {
			yyb2567 = yyj2567 > l
		} else {
			yyb2567 = r.CheckBreak()
		}
		if yyb2567 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2567-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2574 := z.EncBinary()
		_ = yym2574
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2575 := !z.EncBinary()
			yy2arr2575 := z.EncBasicHandle().StructToArray
			var yyq2575 [4]bool
			_, _, _ = yysep2575, yyq2575, yy2arr2575
			const yyr2575 bool = false
			yyq2575[0] = x.PodCIDR != ""
			yyq2575[1] = x.ExternalID != ""
			yyq2575[2] = x.ProviderID != ""
			yyq2575[3] = x.Unschedulable != false
			var yynn2575 int
			if yyr2575 || yy2arr2575 {
				r.EncodeArrayStart(4)
			} else {
				yynn2575 = 0
				for _, b := range yyq2575 {
					if b {
						yynn2575++
					}
				}
				r.EncodeMapStart(yynn2575)
				yynn2575 = 0
			}
			if yyr2575 || yy2arr2575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2575[0] {
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2575[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2578 := z.EncBinary()
					_ = yym2578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2575 || yy2arr2575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2575[1] {
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2575[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2581 := z.EncBinary()
					_ = yym2581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2575 || yy2arr2575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2575[2] {
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2575[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2584 := z.EncBinary()
					_ = yym2584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2575 || yy2arr2575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2575[3] {
					yym2586 := z.EncBinary()
					_ = yym2586
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2575[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2575 || yy2arr2575 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2588 := z.DecBinary()
	_ = yym2588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2589 := r.ContainerType()
		if yyct2589 == codecSelferValueTypeMap1234 {
			yyl2589 := r.ReadMapStart()
			if yyl2589 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2589, d)
			}
		} else if yyct2589 == codecSelferValueTypeArray1234 {
			yyl2589 := r.ReadArrayStart()
			if yyl2589 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2589, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2590Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2590Slc
	var yyhl2590 bool = l >= 0
	for yyj2590 := 0; ; yyj2590++ {
		if yyhl2590 {
			if yyj2590 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2590Slc = r.DecodeBytes(yys2590Slc, true, true)
		yys2590 := string(yys2590Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2590 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2590)
		} // end switch yys2590
	} // end for yyj2590
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2595 int
	var yyb2595 bool
	var yyhl2595 bool = l >= 0
	yyj2595++
	if yyhl2595 {
		yyb2595 = yyj2595 > l
	} else {
		yyb2595 = r.CheckBreak()
	}
	if yyb2595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2595++
	if yyhl2595 {
		yyb2595 = yyj2595 > l
	} else {
		yyb2595 = r.CheckBreak()
	}
	if yyb2595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2595++
	if yyhl2595 {
		yyb2595 = yyj2595 > l
	} else {
		yyb2595 = r.CheckBreak()
	}
	if yyb2595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2595++
	if yyhl2595 {
		yyb2595 = yyj2595 > l
	} else {
		yyb2595 = r.CheckBreak()
	}
	if yyb2595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2595++
		if yyhl2595 {
			yyb2595 = yyj2595 > l
		} else {
			yyb2595 = r.CheckBreak()
		}
		if yyb2595 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2595-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2600 := z.EncBinary()
		_ = yym2600
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2601 := !z.EncBinary()
			yy2arr2601 := z.EncBasicHandle().StructToArray
			var yyq2601 [1]bool
			_, _, _ = yysep2601, yyq2601, yy2arr2601
			const yyr2601 bool = false
			var yynn2601 int
			if yyr2601 || yy2arr2601 {
				r.EncodeArrayStart(1)
			} else {
				yynn2601 = 1
				for _, b := range yyq2601 {
					if b {
						yynn2601++
					}
				}
				r.EncodeMapStart(yynn2601)
				yynn2601 = 0
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2603 := z.EncBinary()
				_ = yym2603
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2604 := z.EncBinary()
				_ = yym2604
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2605 := z.DecBinary()
	_ = yym2605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2606 := r.ContainerType()
		if yyct2606 == codecSelferValueTypeMap1234 {
			yyl2606 := r.ReadMapStart()
			if yyl2606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2606, d)
			}
		} else if yyct2606 == codecSelferValueTypeArray1234 {
			yyl2606 := r.ReadArrayStart()
			if yyl2606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2607Slc
	var yyhl2607 bool = l >= 0
	for yyj2607 := 0; ; yyj2607++ {
		if yyhl2607 {
			if yyj2607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2607Slc = r.DecodeBytes(yys2607Slc, true, true)
		yys2607 := string(yys2607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2607 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2607)
		} // end switch yys2607
	} // end for yyj2607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2609 int
	var yyb2609 bool
	var yyhl2609 bool = l >= 0
	yyj2609++
	if yyhl2609 {
		yyb2609 = yyj2609 > l
	} else {
		yyb2609 = r.CheckBreak()
	}
	if yyb2609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2609++
		if yyhl2609 {
			yyb2609 = yyj2609 > l
		} else {
			yyb2609 = r.CheckBreak()
		}
		if yyb2609 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2609-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2611 := z.EncBinary()
		_ = yym2611
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2612 := !z.EncBinary()
			yy2arr2612 := z.EncBasicHandle().StructToArray
			var yyq2612 [1]bool
			_, _, _ = yysep2612, yyq2612, yy2arr2612
			const yyr2612 bool = false
			yyq2612[0] = true
			var yynn2612 int
			if yyr2612 || yy2arr2612 {
				r.EncodeArrayStart(1)
			} else {
				yynn2612 = 0
				for _, b := range yyq2612 {
					if b {
						yynn2612++
					}
				}
				r.EncodeMapStart(yynn2612)
				yynn2612 = 0
			}
			if yyr2612 || yy2arr2612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2612[0] {
					yy2614 := &x.KubeletEndpoint
					yy2614.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2612[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2615 := &x.KubeletEndpoint
					yy2615.CodecEncodeSelf(e)
				}
			}
			if yyr2612 || yy2arr2612 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2616 := z.DecBinary()
	_ = yym2616
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2617 := r.ContainerType()
		if yyct2617 == codecSelferValueTypeMap1234 {
			yyl2617 := r.ReadMapStart()
			if yyl2617 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2617, d)
			}
		} else if yyct2617 == codecSelferValueTypeArray1234 {
			yyl2617 := r.ReadArrayStart()
			if yyl2617 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2617, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2618Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2618Slc
	var yyhl2618 bool = l >= 0
	for yyj2618 := 0; ; yyj2618++ {
		if yyhl2618 {
			if yyj2618 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2618Slc = r.DecodeBytes(yys2618Slc, true, true)
		yys2618 := string(yys2618Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2618 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2619 := &x.KubeletEndpoint
				yyv2619.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2618)
		} // end switch yys2618
	} // end for yyj2618
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2620 int
	var yyb2620 bool
	var yyhl2620 bool = l >= 0
	yyj2620++
	if yyhl2620 {
		yyb2620 = yyj2620 > l
	} else {
		yyb2620 = r.CheckBreak()
	}
	if yyb2620 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2621 := &x.KubeletEndpoint
		yyv2621.CodecDecodeSelf(d)
	}
	for {
		yyj2620++
		if yyhl2620 {
			yyb2620 = yyj2620 > l
		} else {
			yyb2620 = r.CheckBreak()
		}
		if yyb2620 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2620-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2622 := z.EncBinary()
		_ = yym2622
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2623 := !z.EncBinary()
			yy2arr2623 := z.EncBasicHandle().StructToArray
			var yyq2623 [8]bool
			_, _, _ = yysep2623, yyq2623, yy2arr2623
			const yyr2623 bool = false
			var yynn2623 int
			if yyr2623 || yy2arr2623 {
				r.EncodeArrayStart(8)
			} else {
				yynn2623 = 8
				for _, b := range yyq2623 {
					if b {
						yynn2623++
					}
				}
				r.EncodeMapStart(yynn2623)
				yynn2623 = 0
			}
			if yyr2623 || yy2arr2623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2625 := z.EncBinary()
				_ = yym2625
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2626 := z.EncBinary()
				_ = yym2626
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2623 || yy2arr2623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2628 := z.EncBinary()
				_ = yym2628
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2629 := z.EncBinary()
				_ = yym2629
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2623 || yy2arr2623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2631 := z.EncBinary()
				_ = yym2631
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2632 := z.EncBinary()
				_ = yym2632
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2623 || yy2arr2623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2634 := z.EncBinary()
				_ = yym2634
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2635 := z.EncBinary()
				_ = yym2635
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2623 || yy2arr2623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2637 := z.EncBinary()
				_ = yym2637
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2638 := z.EncBinary()
				_ = yym2638
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2623 || yy2arr2623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2640 := z.EncBinary()
				_ = yym2640
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2641 := z.EncBinary()
				_ = yym2641
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2623 || yy2arr2623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2643 := z.EncBinary()
				_ = yym2643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2644 := z.EncBinary()
				_ = yym2644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2623 || yy2arr2623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2646 := z.EncBinary()
				_ = yym2646
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2647 := z.EncBinary()
				_ = yym2647
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2623 || yy2arr2623 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2648 := z.DecBinary()
	_ = yym2648
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2649 := r.ContainerType()
		if yyct2649 == codecSelferValueTypeMap1234 {
			yyl2649 := r.ReadMapStart()
			if yyl2649 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2649, d)
			}
		} else if yyct2649 == codecSelferValueTypeArray1234 {
			yyl2649 := r.ReadArrayStart()
			if yyl2649 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2649, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2650Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2650Slc
	var yyhl2650 bool = l >= 0
	for yyj2650 := 0; ; yyj2650++ {
		if yyhl2650 {
			if yyj2650 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2650Slc = r.DecodeBytes(yys2650Slc, true, true)
		yys2650 := string(yys2650Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2650 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2650)
		} // end switch yys2650
	} // end for yyj2650
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2659 int
	var yyb2659 bool
	var yyhl2659 bool = l >= 0
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2659++
	if yyhl2659 {
		yyb2659 = yyj2659 > l
	} else {
		yyb2659 = r.CheckBreak()
	}
	if yyb2659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2659++
		if yyhl2659 {
			yyb2659 = yyj2659 > l
		} else {
			yyb2659 = r.CheckBreak()
		}
		if yyb2659 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2659-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2668 := z.EncBinary()
		_ = yym2668
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2669 := !z.EncBinary()
			yy2arr2669 := z.EncBasicHandle().StructToArray
			var yyq2669 [8]bool
			_, _, _ = yysep2669, yyq2669, yy2arr2669
			const yyr2669 bool = false
			yyq2669[0] = len(x.Capacity) != 0
			yyq2669[1] = len(x.Allocatable) != 0
			yyq2669[2] = x.Phase != ""
			yyq2669[3] = len(x.Conditions) != 0
			yyq2669[4] = len(x.Addresses) != 0
			yyq2669[5] = true
			yyq2669[6] = true
			var yynn2669 int
			if yyr2669 || yy2arr2669 {
				r.EncodeArrayStart(8)
			} else {
				yynn2669 = 1
				for _, b := range yyq2669 {
					if b {
						yynn2669++
					}
				}
				r.EncodeMapStart(yynn2669)
				yynn2669 = 0
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2669[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2669[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2669[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2669[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2669[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2669[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2669[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2674 := z.EncBinary()
						_ = yym2674
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2669[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2675 := z.EncBinary()
						_ = yym2675
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2669[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2677 := z.EncBinary()
						_ = yym2677
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2669[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2678 := z.EncBinary()
						_ = yym2678
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2669[5] {
					yy2680 := &x.DaemonEndpoints
					yy2680.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2669[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2681 := &x.DaemonEndpoints
					yy2681.CodecEncodeSelf(e)
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2669[6] {
					yy2683 := &x.NodeInfo
					yy2683.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2669[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2684 := &x.NodeInfo
					yy2684.CodecEncodeSelf(e)
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2686 := z.EncBinary()
					_ = yym2686
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("images"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2687 := z.EncBinary()
					_ = yym2687
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2688 := z.DecBinary()
	_ = yym2688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2689 := r.ContainerType()
		if yyct2689 == codecSelferValueTypeMap1234 {
			yyl2689 := r.ReadMapStart()
			if yyl2689 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2689, d)
			}
		} else if yyct2689 == codecSelferValueTypeArray1234 {
			yyl2689 := r.ReadArrayStart()
			if yyl2689 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2689, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2690Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2690Slc
	var yyhl2690 bool = l >= 0
	for yyj2690 := 0; ; yyj2690++ {
		if yyhl2690 {
			if yyj2690 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2690Slc = r.DecodeBytes(yys2690Slc, true, true)
		yys2690 := string(yys2690Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2690 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2691 := &x.Capacity
				yyv2691.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2692 := &x.Allocatable
				yyv2692.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2694 := &x.Conditions
				yym2695 := z.DecBinary()
				_ = yym2695
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2694), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2696 := &x.Addresses
				yym2697 := z.DecBinary()
				_ = yym2697
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2696), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2698 := &x.DaemonEndpoints
				yyv2698.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2699 := &x.NodeInfo
				yyv2699.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2700 := &x.Images
				yym2701 := z.DecBinary()
				_ = yym2701
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2700), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2690)
		} // end switch yys2690
	} // end for yyj2690
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2702 int
	var yyb2702 bool
	var yyhl2702 bool = l >= 0
	yyj2702++
	if yyhl2702 {
		yyb2702 = yyj2702 > l
	} else {
		yyb2702 = r.CheckBreak()
	}
	if yyb2702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2703 := &x.Capacity
		yyv2703.CodecDecodeSelf(d)
	}
	yyj2702++
	if yyhl2702 {
		yyb2702 = yyj2702 > l
	} else {
		yyb2702 = r.CheckBreak()
	}
	if yyb2702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2704 := &x.Allocatable
		yyv2704.CodecDecodeSelf(d)
	}
	yyj2702++
	if yyhl2702 {
		yyb2702 = yyj2702 > l
	} else {
		yyb2702 = r.CheckBreak()
	}
	if yyb2702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2702++
	if yyhl2702 {
		yyb2702 = yyj2702 > l
	} else {
		yyb2702 = r.CheckBreak()
	}
	if yyb2702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2706 := &x.Conditions
		yym2707 := z.DecBinary()
		_ = yym2707
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2706), d)
		}
	}
	yyj2702++
	if yyhl2702 {
		yyb2702 = yyj2702 > l
	} else {
		yyb2702 = r.CheckBreak()
	}
	if yyb2702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2708 := &x.Addresses
		yym2709 := z.DecBinary()
		_ = yym2709
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2708), d)
		}
	}
	yyj2702++
	if yyhl2702 {
		yyb2702 = yyj2702 > l
	} else {
		yyb2702 = r.CheckBreak()
	}
	if yyb2702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2710 := &x.DaemonEndpoints
		yyv2710.CodecDecodeSelf(d)
	}
	yyj2702++
	if yyhl2702 {
		yyb2702 = yyj2702 > l
	} else {
		yyb2702 = r.CheckBreak()
	}
	if yyb2702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2711 := &x.NodeInfo
		yyv2711.CodecDecodeSelf(d)
	}
	yyj2702++
	if yyhl2702 {
		yyb2702 = yyj2702 > l
	} else {
		yyb2702 = r.CheckBreak()
	}
	if yyb2702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2712 := &x.Images
		yym2713 := z.DecBinary()
		_ = yym2713
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2712), d)
		}
	}
	for {
		yyj2702++
		if yyhl2702 {
			yyb2702 = yyj2702 > l
		} else {
			yyb2702 = r.CheckBreak()
		}
		if yyb2702 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2702-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2714 := z.EncBinary()
		_ = yym2714
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2715 := !z.EncBinary()
			yy2arr2715 := z.EncBasicHandle().StructToArray
			var yyq2715 [2]bool
			_, _, _ = yysep2715, yyq2715, yy2arr2715
			const yyr2715 bool = false
			yyq2715[1] = x.Size != 0
			var yynn2715 int
			if yyr2715 || yy2arr2715 {
				r.EncodeArrayStart(2)
			} else {
				yynn2715 = 1
				for _, b := range yyq2715 {
					if b {
						yynn2715++
					}
				}
				r.EncodeMapStart(yynn2715)
				yynn2715 = 0
			}
			if yyr2715 || yy2arr2715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2717 := z.EncBinary()
					_ = yym2717
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repoTags"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			}
			if yyr2715 || yy2arr2715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2715[1] {
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2715[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("size"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				}
			}
			if yyr2715 || yy2arr2715 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2722 := z.DecBinary()
	_ = yym2722
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2723 := r.ContainerType()
		if yyct2723 == codecSelferValueTypeMap1234 {
			yyl2723 := r.ReadMapStart()
			if yyl2723 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2723, d)
			}
		} else if yyct2723 == codecSelferValueTypeArray1234 {
			yyl2723 := r.ReadArrayStart()
			if yyl2723 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2723, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2724Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2724Slc
	var yyhl2724 bool = l >= 0
	for yyj2724 := 0; ; yyj2724++ {
		if yyhl2724 {
			if yyj2724 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2724Slc = r.DecodeBytes(yys2724Slc, true, true)
		yys2724 := string(yys2724Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2724 {
		case "repoTags":
			if r.TryDecodeAsNil() {
				x.RepoTags = nil
			} else {
				yyv2725 := &x.RepoTags
				yym2726 := z.DecBinary()
				_ = yym2726
				if false {
				} else {
					z.F.DecSliceStringX(yyv2725, false, d)
				}
			}
		case "size":
			if r.TryDecodeAsNil() {
				x.Size = 0
			} else {
				x.Size = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2724)
		} // end switch yys2724
	} // end for yyj2724
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2728 int
	var yyb2728 bool
	var yyhl2728 bool = l >= 0
	yyj2728++
	if yyhl2728 {
		yyb2728 = yyj2728 > l
	} else {
		yyb2728 = r.CheckBreak()
	}
	if yyb2728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RepoTags = nil
	} else {
		yyv2729 := &x.RepoTags
		yym2730 := z.DecBinary()
		_ = yym2730
		if false {
		} else {
			z.F.DecSliceStringX(yyv2729, false, d)
		}
	}
	yyj2728++
	if yyhl2728 {
		yyb2728 = yyj2728 > l
	} else {
		yyb2728 = r.CheckBreak()
	}
	if yyb2728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Size = 0
	} else {
		x.Size = int64(r.DecodeInt(64))
	}
	for {
		yyj2728++
		if yyhl2728 {
			yyb2728 = yyj2728 > l
		} else {
			yyb2728 = r.CheckBreak()
		}
		if yyb2728 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2728-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2732 := z.EncBinary()
	_ = yym2732
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2733 := z.DecBinary()
	_ = yym2733
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2734 := z.EncBinary()
	_ = yym2734
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2735 := z.DecBinary()
	_ = yym2735
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2736 := z.EncBinary()
		_ = yym2736
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2737 := !z.EncBinary()
			yy2arr2737 := z.EncBasicHandle().StructToArray
			var yyq2737 [6]bool
			_, _, _ = yysep2737, yyq2737, yy2arr2737
			const yyr2737 bool = false
			yyq2737[2] = true
			yyq2737[3] = true
			yyq2737[4] = x.Reason != ""
			yyq2737[5] = x.Message != ""
			var yynn2737 int
			if yyr2737 || yy2arr2737 {
				r.EncodeArrayStart(6)
			} else {
				yynn2737 = 2
				for _, b := range yyq2737 {
					if b {
						yynn2737++
					}
				}
				r.EncodeMapStart(yynn2737)
				yynn2737 = 0
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2737[2] {
					yy2741 := &x.LastHeartbeatTime
					yym2742 := z.EncBinary()
					_ = yym2742
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2741) {
					} else if yym2742 {
						z.EncBinaryMarshal(yy2741)
					} else if !yym2742 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2741)
					} else {
						z.EncFallback(yy2741)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2737[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2743 := &x.LastHeartbeatTime
					yym2744 := z.EncBinary()
					_ = yym2744
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2743) {
					} else if yym2744 {
						z.EncBinaryMarshal(yy2743)
					} else if !yym2744 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2743)
					} else {
						z.EncFallback(yy2743)
					}
				}
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2737[3] {
					yy2746 := &x.LastTransitionTime
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2746) {
					} else if yym2747 {
						z.EncBinaryMarshal(yy2746)
					} else if !yym2747 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2746)
					} else {
						z.EncFallback(yy2746)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2737[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2748 := &x.LastTransitionTime
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2748) {
					} else if yym2749 {
						z.EncBinaryMarshal(yy2748)
					} else if !yym2749 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2748)
					} else {
						z.EncFallback(yy2748)
					}
				}
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2737[4] {
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2737[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2737[5] {
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2737[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2756 := z.DecBinary()
	_ = yym2756
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2757 := r.ContainerType()
		if yyct2757 == codecSelferValueTypeMap1234 {
			yyl2757 := r.ReadMapStart()
			if yyl2757 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2757, d)
			}
		} else if yyct2757 == codecSelferValueTypeArray1234 {
			yyl2757 := r.ReadArrayStart()
			if yyl2757 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2757, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2758Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2758Slc
	var yyhl2758 bool = l >= 0
	for yyj2758 := 0; ; yyj2758++ {
		if yyhl2758 {
			if yyj2758 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2758Slc = r.DecodeBytes(yys2758Slc, true, true)
		yys2758 := string(yys2758Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2758 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2761 := &x.LastHeartbeatTime
				yym2762 := z.DecBinary()
				_ = yym2762
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2761) {
				} else if yym2762 {
					z.DecBinaryUnmarshal(yyv2761)
				} else if !yym2762 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2761)
				} else {
					z.DecFallback(yyv2761, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2763 := &x.LastTransitionTime
				yym2764 := z.DecBinary()
				_ = yym2764
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2763) {
				} else if yym2764 {
					z.DecBinaryUnmarshal(yyv2763)
				} else if !yym2764 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2763)
				} else {
					z.DecFallback(yyv2763, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2758)
		} // end switch yys2758
	} // end for yyj2758
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2767 int
	var yyb2767 bool
	var yyhl2767 bool = l >= 0
	yyj2767++
	if yyhl2767 {
		yyb2767 = yyj2767 > l
	} else {
		yyb2767 = r.CheckBreak()
	}
	if yyb2767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2767++
	if yyhl2767 {
		yyb2767 = yyj2767 > l
	} else {
		yyb2767 = r.CheckBreak()
	}
	if yyb2767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2767++
	if yyhl2767 {
		yyb2767 = yyj2767 > l
	} else {
		yyb2767 = r.CheckBreak()
	}
	if yyb2767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2770 := &x.LastHeartbeatTime
		yym2771 := z.DecBinary()
		_ = yym2771
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2770) {
		} else if yym2771 {
			z.DecBinaryUnmarshal(yyv2770)
		} else if !yym2771 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2770)
		} else {
			z.DecFallback(yyv2770, false)
		}
	}
	yyj2767++
	if yyhl2767 {
		yyb2767 = yyj2767 > l
	} else {
		yyb2767 = r.CheckBreak()
	}
	if yyb2767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2772 := &x.LastTransitionTime
		yym2773 := z.DecBinary()
		_ = yym2773
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2772) {
		} else if yym2773 {
			z.DecBinaryUnmarshal(yyv2772)
		} else if !yym2773 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2772)
		} else {
			z.DecFallback(yyv2772, false)
		}
	}
	yyj2767++
	if yyhl2767 {
		yyb2767 = yyj2767 > l
	} else {
		yyb2767 = r.CheckBreak()
	}
	if yyb2767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2767++
	if yyhl2767 {
		yyb2767 = yyj2767 > l
	} else {
		yyb2767 = r.CheckBreak()
	}
	if yyb2767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2767++
		if yyhl2767 {
			yyb2767 = yyj2767 > l
		} else {
			yyb2767 = r.CheckBreak()
		}
		if yyb2767 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2767-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2776 := z.EncBinary()
	_ = yym2776
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2777 := z.DecBinary()
	_ = yym2777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2778 := z.EncBinary()
		_ = yym2778
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2779 := !z.EncBinary()
			yy2arr2779 := z.EncBasicHandle().StructToArray
			var yyq2779 [2]bool
			_, _, _ = yysep2779, yyq2779, yy2arr2779
			const yyr2779 bool = false
			var yynn2779 int
			if yyr2779 || yy2arr2779 {
				r.EncodeArrayStart(2)
			} else {
				yynn2779 = 2
				for _, b := range yyq2779 {
					if b {
						yynn2779++
					}
				}
				r.EncodeMapStart(yynn2779)
				yynn2779 = 0
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2782 := z.EncBinary()
				_ = yym2782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2783 := z.EncBinary()
				_ = yym2783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2784 := z.DecBinary()
	_ = yym2784
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2785 := r.ContainerType()
		if yyct2785 == codecSelferValueTypeMap1234 {
			yyl2785 := r.ReadMapStart()
			if yyl2785 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2785, d)
			}
		} else if yyct2785 == codecSelferValueTypeArray1234 {
			yyl2785 := r.ReadArrayStart()
			if yyl2785 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2785, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2786Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2786Slc
	var yyhl2786 bool = l >= 0
	for yyj2786 := 0; ; yyj2786++ {
		if yyhl2786 {
			if yyj2786 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2786Slc = r.DecodeBytes(yys2786Slc, true, true)
		yys2786 := string(yys2786Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2786 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2786)
		} // end switch yys2786
	} // end for yyj2786
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2789 int
	var yyb2789 bool
	var yyhl2789 bool = l >= 0
	yyj2789++
	if yyhl2789 {
		yyb2789 = yyj2789 > l
	} else {
		yyb2789 = r.CheckBreak()
	}
	if yyb2789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2789++
	if yyhl2789 {
		yyb2789 = yyj2789 > l
	} else {
		yyb2789 = r.CheckBreak()
	}
	if yyb2789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2789++
		if yyhl2789 {
			yyb2789 = yyj2789 > l
		} else {
			yyb2789 = r.CheckBreak()
		}
		if yyb2789 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2789-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2792 := z.EncBinary()
	_ = yym2792
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2793 := z.DecBinary()
	_ = yym2793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2794 := z.EncBinary()
		_ = yym2794
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2795 := z.DecBinary()
	_ = yym2795
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2796 := z.EncBinary()
		_ = yym2796
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2797 := !z.EncBinary()
			yy2arr2797 := z.EncBasicHandle().StructToArray
			var yyq2797 [5]bool
			_, _, _ = yysep2797, yyq2797, yy2arr2797
			const yyr2797 bool = false
			yyq2797[0] = true
			yyq2797[1] = true
			yyq2797[2] = true
			yyq2797[3] = x.Kind != ""
			yyq2797[4] = x.APIVersion != ""
			var yynn2797 int
			if yyr2797 || yy2arr2797 {
				r.EncodeArrayStart(5)
			} else {
				yynn2797 = 0
				for _, b := range yyq2797 {
					if b {
						yynn2797++
					}
				}
				r.EncodeMapStart(yynn2797)
				yynn2797 = 0
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[0] {
					yy2799 := &x.ObjectMeta
					yy2799.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2797[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2800 := &x.ObjectMeta
					yy2800.CodecEncodeSelf(e)
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[1] {
					yy2802 := &x.Spec
					yy2802.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2797[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2803 := &x.Spec
					yy2803.CodecEncodeSelf(e)
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[2] {
					yy2805 := &x.Status
					yy2805.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2797[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2806 := &x.Status
					yy2806.CodecEncodeSelf(e)
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[3] {
					yym2808 := z.EncBinary()
					_ = yym2808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2797[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[4] {
					yym2811 := z.EncBinary()
					_ = yym2811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2797[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2813 := z.DecBinary()
	_ = yym2813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2814 := r.ContainerType()
		if yyct2814 == codecSelferValueTypeMap1234 {
			yyl2814 := r.ReadMapStart()
			if yyl2814 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2814, d)
			}
		} else if yyct2814 == codecSelferValueTypeArray1234 {
			yyl2814 := r.ReadArrayStart()
			if yyl2814 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2815Slc
	var yyhl2815 bool = l >= 0
	for yyj2815 := 0; ; yyj2815++ {
		if yyhl2815 {
			if yyj2815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2815Slc = r.DecodeBytes(yys2815Slc, true, true)
		yys2815 := string(yys2815Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2815 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2816 := &x.ObjectMeta
				yyv2816.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2817 := &x.Spec
				yyv2817.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2818 := &x.Status
				yyv2818.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2815)
		} // end switch yys2815
	} // end for yyj2815
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2821 int
	var yyb2821 bool
	var yyhl2821 bool = l >= 0
	yyj2821++
	if yyhl2821 {
		yyb2821 = yyj2821 > l
	} else {
		yyb2821 = r.CheckBreak()
	}
	if yyb2821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2822 := &x.ObjectMeta
		yyv2822.CodecDecodeSelf(d)
	}
	yyj2821++
	if yyhl2821 {
		yyb2821 = yyj2821 > l
	} else {
		yyb2821 = r.CheckBreak()
	}
	if yyb2821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2823 := &x.Spec
		yyv2823.CodecDecodeSelf(d)
	}
	yyj2821++
	if yyhl2821 {
		yyb2821 = yyj2821 > l
	} else {
		yyb2821 = r.CheckBreak()
	}
	if yyb2821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2824 := &x.Status
		yyv2824.CodecDecodeSelf(d)
	}
	yyj2821++
	if yyhl2821 {
		yyb2821 = yyj2821 > l
	} else {
		yyb2821 = r.CheckBreak()
	}
	if yyb2821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2821++
	if yyhl2821 {
		yyb2821 = yyj2821 > l
	} else {
		yyb2821 = r.CheckBreak()
	}
	if yyb2821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2821++
		if yyhl2821 {
			yyb2821 = yyj2821 > l
		} else {
			yyb2821 = r.CheckBreak()
		}
		if yyb2821 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2821-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2827 := z.EncBinary()
		_ = yym2827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2828 := !z.EncBinary()
			yy2arr2828 := z.EncBasicHandle().StructToArray
			var yyq2828 [4]bool
			_, _, _ = yysep2828, yyq2828, yy2arr2828
			const yyr2828 bool = false
			yyq2828[0] = true
			yyq2828[2] = x.Kind != ""
			yyq2828[3] = x.APIVersion != ""
			var yynn2828 int
			if yyr2828 || yy2arr2828 {
				r.EncodeArrayStart(4)
			} else {
				yynn2828 = 1
				for _, b := range yyq2828 {
					if b {
						yynn2828++
					}
				}
				r.EncodeMapStart(yynn2828)
				yynn2828 = 0
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[0] {
					yy2830 := &x.ListMeta
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2830) {
					} else {
						z.EncFallback(yy2830)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2828[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2832 := &x.ListMeta
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2832) {
					} else {
						z.EncFallback(yy2832)
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2835 := z.EncBinary()
					_ = yym2835
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2836 := z.EncBinary()
					_ = yym2836
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[2] {
					yym2838 := z.EncBinary()
					_ = yym2838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2828[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[3] {
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2828[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2843 := z.DecBinary()
	_ = yym2843
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2844 := r.ContainerType()
		if yyct2844 == codecSelferValueTypeMap1234 {
			yyl2844 := r.ReadMapStart()
			if yyl2844 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2844, d)
			}
		} else if yyct2844 == codecSelferValueTypeArray1234 {
			yyl2844 := r.ReadArrayStart()
			if yyl2844 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2844, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2845Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2845Slc
	var yyhl2845 bool = l >= 0
	for yyj2845 := 0; ; yyj2845++ {
		if yyhl2845 {
			if yyj2845 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2845Slc = r.DecodeBytes(yys2845Slc, true, true)
		yys2845 := string(yys2845Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2845 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2846 := &x.ListMeta
				yym2847 := z.DecBinary()
				_ = yym2847
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2846) {
				} else {
					z.DecFallback(yyv2846, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2848 := &x.Items
				yym2849 := z.DecBinary()
				_ = yym2849
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2848), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2845)
		} // end switch yys2845
	} // end for yyj2845
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2852 int
	var yyb2852 bool
	var yyhl2852 bool = l >= 0
	yyj2852++
	if yyhl2852 {
		yyb2852 = yyj2852 > l
	} else {
		yyb2852 = r.CheckBreak()
	}
	if yyb2852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2853 := &x.ListMeta
		yym2854 := z.DecBinary()
		_ = yym2854
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2853) {
		} else {
			z.DecFallback(yyv2853, false)
		}
	}
	yyj2852++
	if yyhl2852 {
		yyb2852 = yyj2852 > l
	} else {
		yyb2852 = r.CheckBreak()
	}
	if yyb2852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2855 := &x.Items
		yym2856 := z.DecBinary()
		_ = yym2856
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2855), d)
		}
	}
	yyj2852++
	if yyhl2852 {
		yyb2852 = yyj2852 > l
	} else {
		yyb2852 = r.CheckBreak()
	}
	if yyb2852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2852++
	if yyhl2852 {
		yyb2852 = yyj2852 > l
	} else {
		yyb2852 = r.CheckBreak()
	}
	if yyb2852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2852++
		if yyhl2852 {
			yyb2852 = yyj2852 > l
		} else {
			yyb2852 = r.CheckBreak()
		}
		if yyb2852 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2852-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2859 := z.EncBinary()
	_ = yym2859
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2860 := z.DecBinary()
	_ = yym2860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2861 := z.EncBinary()
		_ = yym2861
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2862 := !z.EncBinary()
			yy2arr2862 := z.EncBasicHandle().StructToArray
			var yyq2862 [1]bool
			_, _, _ = yysep2862, yyq2862, yy2arr2862
			const yyr2862 bool = false
			yyq2862[0] = len(x.Finalizers) != 0
			var yynn2862 int
			if yyr2862 || yy2arr2862 {
				r.EncodeArrayStart(1)
			} else {
				yynn2862 = 0
				for _, b := range yyq2862 {
					if b {
						yynn2862++
					}
				}
				r.EncodeMapStart(yynn2862)
				yynn2862 = 0
			}
			if yyr2862 || yy2arr2862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2862[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2864 := z.EncBinary()
						_ = yym2864
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2862[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2865 := z.EncBinary()
						_ = yym2865
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr2862 || yy2arr2862 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2866 := z.DecBinary()
	_ = yym2866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2867 := r.ContainerType()
		if yyct2867 == codecSelferValueTypeMap1234 {
			yyl2867 := r.ReadMapStart()
			if yyl2867 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2867, d)
			}
		} else if yyct2867 == codecSelferValueTypeArray1234 {
			yyl2867 := r.ReadArrayStart()
			if yyl2867 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2868Slc
	var yyhl2868 bool = l >= 0
	for yyj2868 := 0; ; yyj2868++ {
		if yyhl2868 {
			if yyj2868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2868Slc = r.DecodeBytes(yys2868Slc, true, true)
		yys2868 := string(yys2868Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2868 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2869 := &x.Finalizers
				yym2870 := z.DecBinary()
				_ = yym2870
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2869), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2868)
		} // end switch yys2868
	} // end for yyj2868
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2871 int
	var yyb2871 bool
	var yyhl2871 bool = l >= 0
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2872 := &x.Finalizers
		yym2873 := z.DecBinary()
		_ = yym2873
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2872), d)
		}
	}
	for {
		yyj2871++
		if yyhl2871 {
			yyb2871 = yyj2871 > l
		} else {
			yyb2871 = r.CheckBreak()
		}
		if yyb2871 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2871-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2874 := z.EncBinary()
		_ = yym2874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2875 := !z.EncBinary()
			yy2arr2875 := z.EncBasicHandle().StructToArray
			var yyq2875 [1]bool
			_, _, _ = yysep2875, yyq2875, yy2arr2875
			const yyr2875 bool = false
			yyq2875[0] = x.Phase != ""
			var yynn2875 int
			if yyr2875 || yy2arr2875 {
				r.EncodeArrayStart(1)
			} else {
				yynn2875 = 0
				for _, b := range yyq2875 {
					if b {
						yynn2875++
					}
				}
				r.EncodeMapStart(yynn2875)
				yynn2875 = 0
			}
			if yyr2875 || yy2arr2875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2875[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2875[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2875 || yy2arr2875 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2877 := z.DecBinary()
	_ = yym2877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2878 := r.ContainerType()
		if yyct2878 == codecSelferValueTypeMap1234 {
			yyl2878 := r.ReadMapStart()
			if yyl2878 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2878, d)
			}
		} else if yyct2878 == codecSelferValueTypeArray1234 {
			yyl2878 := r.ReadArrayStart()
			if yyl2878 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2878, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2879Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2879Slc
	var yyhl2879 bool = l >= 0
	for yyj2879 := 0; ; yyj2879++ {
		if yyhl2879 {
			if yyj2879 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2879Slc = r.DecodeBytes(yys2879Slc, true, true)
		yys2879 := string(yys2879Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2879 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2879)
		} // end switch yys2879
	} // end for yyj2879
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2881 int
	var yyb2881 bool
	var yyhl2881 bool = l >= 0
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2881++
		if yyhl2881 {
			yyb2881 = yyj2881 > l
		} else {
			yyb2881 = r.CheckBreak()
		}
		if yyb2881 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2881-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2883 := z.EncBinary()
	_ = yym2883
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2884 := z.DecBinary()
	_ = yym2884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2885 := z.EncBinary()
		_ = yym2885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2886 := !z.EncBinary()
			yy2arr2886 := z.EncBasicHandle().StructToArray
			var yyq2886 [5]bool
			_, _, _ = yysep2886, yyq2886, yy2arr2886
			const yyr2886 bool = false
			yyq2886[0] = true
			yyq2886[1] = true
			yyq2886[2] = true
			yyq2886[3] = x.Kind != ""
			yyq2886[4] = x.APIVersion != ""
			var yynn2886 int
			if yyr2886 || yy2arr2886 {
				r.EncodeArrayStart(5)
			} else {
				yynn2886 = 0
				for _, b := range yyq2886 {
					if b {
						yynn2886++
					}
				}
				r.EncodeMapStart(yynn2886)
				yynn2886 = 0
			}
			if yyr2886 || yy2arr2886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2886[0] {
					yy2888 := &x.ObjectMeta
					yy2888.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2886[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2889 := &x.ObjectMeta
					yy2889.CodecEncodeSelf(e)
				}
			}
			if yyr2886 || yy2arr2886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2886[1] {
					yy2891 := &x.Spec
					yy2891.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2886[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2892 := &x.Spec
					yy2892.CodecEncodeSelf(e)
				}
			}
			if yyr2886 || yy2arr2886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2886[2] {
					yy2894 := &x.Status
					yy2894.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2886[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2895 := &x.Status
					yy2895.CodecEncodeSelf(e)
				}
			}
			if yyr2886 || yy2arr2886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2886[3] {
					yym2897 := z.EncBinary()
					_ = yym2897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2886[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2886 || yy2arr2886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2886[4] {
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2886[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2901 := z.EncBinary()
					_ = yym2901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2886 || yy2arr2886 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2902 := z.DecBinary()
	_ = yym2902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2903 := r.ContainerType()
		if yyct2903 == codecSelferValueTypeMap1234 {
			yyl2903 := r.ReadMapStart()
			if yyl2903 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2903, d)
			}
		} else if yyct2903 == codecSelferValueTypeArray1234 {
			yyl2903 := r.ReadArrayStart()
			if yyl2903 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2904Slc
	var yyhl2904 bool = l >= 0
	for yyj2904 := 0; ; yyj2904++ {
		if yyhl2904 {
			if yyj2904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2904Slc = r.DecodeBytes(yys2904Slc, true, true)
		yys2904 := string(yys2904Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2904 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2905 := &x.ObjectMeta
				yyv2905.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2906 := &x.Spec
				yyv2906.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2907 := &x.Status
				yyv2907.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2904)
		} // end switch yys2904
	} // end for yyj2904
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2910 int
	var yyb2910 bool
	var yyhl2910 bool = l >= 0
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2911 := &x.ObjectMeta
		yyv2911.CodecDecodeSelf(d)
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2912 := &x.Spec
		yyv2912.CodecDecodeSelf(d)
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2913 := &x.Status
		yyv2913.CodecDecodeSelf(d)
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2910++
		if yyhl2910 {
			yyb2910 = yyj2910 > l
		} else {
			yyb2910 = r.CheckBreak()
		}
		if yyb2910 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2910-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2916 := z.EncBinary()
		_ = yym2916
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2917 := !z.EncBinary()
			yy2arr2917 := z.EncBasicHandle().StructToArray
			var yyq2917 [4]bool
			_, _, _ = yysep2917, yyq2917, yy2arr2917
			const yyr2917 bool = false
			yyq2917[0] = true
			yyq2917[2] = x.Kind != ""
			yyq2917[3] = x.APIVersion != ""
			var yynn2917 int
			if yyr2917 || yy2arr2917 {
				r.EncodeArrayStart(4)
			} else {
				yynn2917 = 1
				for _, b := range yyq2917 {
					if b {
						yynn2917++
					}
				}
				r.EncodeMapStart(yynn2917)
				yynn2917 = 0
			}
			if yyr2917 || yy2arr2917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2917[0] {
					yy2919 := &x.ListMeta
					yym2920 := z.EncBinary()
					_ = yym2920
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2919) {
					} else {
						z.EncFallback(yy2919)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2917[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2921 := &x.ListMeta
					yym2922 := z.EncBinary()
					_ = yym2922
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2921) {
					} else {
						z.EncFallback(yy2921)
					}
				}
			}
			if yyr2917 || yy2arr2917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2925 := z.EncBinary()
					_ = yym2925
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2917 || yy2arr2917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2917[2] {
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2917[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2928 := z.EncBinary()
					_ = yym2928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2917 || yy2arr2917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2917[3] {
					yym2930 := z.EncBinary()
					_ = yym2930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2917[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2917 || yy2arr2917 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2932 := z.DecBinary()
	_ = yym2932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2933 := r.ContainerType()
		if yyct2933 == codecSelferValueTypeMap1234 {
			yyl2933 := r.ReadMapStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2933, d)
			}
		} else if yyct2933 == codecSelferValueTypeArray1234 {
			yyl2933 := r.ReadArrayStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2934Slc
	var yyhl2934 bool = l >= 0
	for yyj2934 := 0; ; yyj2934++ {
		if yyhl2934 {
			if yyj2934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2934Slc = r.DecodeBytes(yys2934Slc, true, true)
		yys2934 := string(yys2934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2934 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2935 := &x.ListMeta
				yym2936 := z.DecBinary()
				_ = yym2936
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2935) {
				} else {
					z.DecFallback(yyv2935, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2937 := &x.Items
				yym2938 := z.DecBinary()
				_ = yym2938
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2937), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2934)
		} // end switch yys2934
	} // end for yyj2934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2941 int
	var yyb2941 bool
	var yyhl2941 bool = l >= 0
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2942 := &x.ListMeta
		yym2943 := z.DecBinary()
		_ = yym2943
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2942) {
		} else {
			z.DecFallback(yyv2942, false)
		}
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2944 := &x.Items
		yym2945 := z.DecBinary()
		_ = yym2945
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2944), d)
		}
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2941++
		if yyhl2941 {
			yyb2941 = yyj2941 > l
		} else {
			yyb2941 = r.CheckBreak()
		}
		if yyb2941 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2941-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2948 := z.EncBinary()
		_ = yym2948
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2949 := !z.EncBinary()
			yy2arr2949 := z.EncBasicHandle().StructToArray
			var yyq2949 [4]bool
			_, _, _ = yysep2949, yyq2949, yy2arr2949
			const yyr2949 bool = false
			yyq2949[0] = true
			yyq2949[2] = x.Kind != ""
			yyq2949[3] = x.APIVersion != ""
			var yynn2949 int
			if yyr2949 || yy2arr2949 {
				r.EncodeArrayStart(4)
			} else {
				yynn2949 = 1
				for _, b := range yyq2949 {
					if b {
						yynn2949++
					}
				}
				r.EncodeMapStart(yynn2949)
				yynn2949 = 0
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2949[0] {
					yy2951 := &x.ObjectMeta
					yy2951.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2949[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2952 := &x.ObjectMeta
					yy2952.CodecEncodeSelf(e)
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2954 := &x.Target
				yy2954.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2955 := &x.Target
				yy2955.CodecEncodeSelf(e)
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2949[2] {
					yym2957 := z.EncBinary()
					_ = yym2957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2949[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2958 := z.EncBinary()
					_ = yym2958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2949[3] {
					yym2960 := z.EncBinary()
					_ = yym2960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2949[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2961 := z.EncBinary()
					_ = yym2961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2962 := z.DecBinary()
	_ = yym2962
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2963 := r.ContainerType()
		if yyct2963 == codecSelferValueTypeMap1234 {
			yyl2963 := r.ReadMapStart()
			if yyl2963 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2963, d)
			}
		} else if yyct2963 == codecSelferValueTypeArray1234 {
			yyl2963 := r.ReadArrayStart()
			if yyl2963 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2963, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2964Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2964Slc
	var yyhl2964 bool = l >= 0
	for yyj2964 := 0; ; yyj2964++ {
		if yyhl2964 {
			if yyj2964 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2964Slc = r.DecodeBytes(yys2964Slc, true, true)
		yys2964 := string(yys2964Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2964 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2965 := &x.ObjectMeta
				yyv2965.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2966 := &x.Target
				yyv2966.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2964)
		} // end switch yys2964
	} // end for yyj2964
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2969 int
	var yyb2969 bool
	var yyhl2969 bool = l >= 0
	yyj2969++
	if yyhl2969 {
		yyb2969 = yyj2969 > l
	} else {
		yyb2969 = r.CheckBreak()
	}
	if yyb2969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2970 := &x.ObjectMeta
		yyv2970.CodecDecodeSelf(d)
	}
	yyj2969++
	if yyhl2969 {
		yyb2969 = yyj2969 > l
	} else {
		yyb2969 = r.CheckBreak()
	}
	if yyb2969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2971 := &x.Target
		yyv2971.CodecDecodeSelf(d)
	}
	yyj2969++
	if yyhl2969 {
		yyb2969 = yyj2969 > l
	} else {
		yyb2969 = r.CheckBreak()
	}
	if yyb2969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2969++
	if yyhl2969 {
		yyb2969 = yyj2969 > l
	} else {
		yyb2969 = r.CheckBreak()
	}
	if yyb2969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2969++
		if yyhl2969 {
			yyb2969 = yyj2969 > l
		} else {
			yyb2969 = r.CheckBreak()
		}
		if yyb2969 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2969-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2974 := z.EncBinary()
		_ = yym2974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2975 := !z.EncBinary()
			yy2arr2975 := z.EncBasicHandle().StructToArray
			var yyq2975 [3]bool
			_, _, _ = yysep2975, yyq2975, yy2arr2975
			const yyr2975 bool = false
			yyq2975[1] = x.Kind != ""
			yyq2975[2] = x.APIVersion != ""
			var yynn2975 int
			if yyr2975 || yy2arr2975 {
				r.EncodeArrayStart(3)
			} else {
				yynn2975 = 1
				for _, b := range yyq2975 {
					if b {
						yynn2975++
					}
				}
				r.EncodeMapStart(yynn2975)
				yynn2975 = 0
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2977 := *x.GracePeriodSeconds
					yym2978 := z.EncBinary()
					_ = yym2978
					if false {
					} else {
						r.EncodeInt(int64(yy2977))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2979 := *x.GracePeriodSeconds
					yym2980 := z.EncBinary()
					_ = yym2980
					if false {
					} else {
						r.EncodeInt(int64(yy2979))
					}
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[1] {
					yym2982 := z.EncBinary()
					_ = yym2982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2975[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2983 := z.EncBinary()
					_ = yym2983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[2] {
					yym2985 := z.EncBinary()
					_ = yym2985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2975[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2986 := z.EncBinary()
					_ = yym2986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2987 := z.DecBinary()
	_ = yym2987
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2988 := r.ContainerType()
		if yyct2988 == codecSelferValueTypeMap1234 {
			yyl2988 := r.ReadMapStart()
			if yyl2988 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2988, d)
			}
		} else if yyct2988 == codecSelferValueTypeArray1234 {
			yyl2988 := r.ReadArrayStart()
			if yyl2988 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2988, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2989Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2989Slc
	var yyhl2989 bool = l >= 0
	for yyj2989 := 0; ; yyj2989++ {
		if yyhl2989 {
			if yyj2989 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2989Slc = r.DecodeBytes(yys2989Slc, true, true)
		yys2989 := string(yys2989Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2989 {
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2991 := z.DecBinary()
				_ = yym2991
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2989)
		} // end switch yys2989
	} // end for yyj2989
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2994 int
	var yyb2994 bool
	var yyhl2994 bool = l >= 0
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2996 := z.DecBinary()
		_ = yym2996
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2994++
		if yyhl2994 {
			yyb2994 = yyj2994 > l
		} else {
			yyb2994 = r.CheckBreak()
		}
		if yyb2994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2999 := z.EncBinary()
		_ = yym2999
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3000 := !z.EncBinary()
			yy2arr3000 := z.EncBasicHandle().StructToArray
			var yyq3000 [4]bool
			_, _, _ = yysep3000, yyq3000, yy2arr3000
			const yyr3000 bool = false
			yyq3000[2] = x.Kind != ""
			yyq3000[3] = x.APIVersion != ""
			var yynn3000 int
			if yyr3000 || yy2arr3000 {
				r.EncodeArrayStart(4)
			} else {
				yynn3000 = 2
				for _, b := range yyq3000 {
					if b {
						yynn3000++
					}
				}
				r.EncodeMapStart(yynn3000)
				yynn3000 = 0
			}
			if yyr3000 || yy2arr3000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3002 := z.EncBinary()
				_ = yym3002
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3003 := z.EncBinary()
				_ = yym3003
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3000 || yy2arr3000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3005 := z.EncBinary()
				_ = yym3005
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3006 := z.EncBinary()
				_ = yym3006
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3000 || yy2arr3000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3000[2] {
					yym3008 := z.EncBinary()
					_ = yym3008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3000[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3009 := z.EncBinary()
					_ = yym3009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3000 || yy2arr3000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3000[3] {
					yym3011 := z.EncBinary()
					_ = yym3011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3000[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3012 := z.EncBinary()
					_ = yym3012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3000 || yy2arr3000 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3013 := z.DecBinary()
	_ = yym3013
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3014 := r.ContainerType()
		if yyct3014 == codecSelferValueTypeMap1234 {
			yyl3014 := r.ReadMapStart()
			if yyl3014 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3014, d)
			}
		} else if yyct3014 == codecSelferValueTypeArray1234 {
			yyl3014 := r.ReadArrayStart()
			if yyl3014 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3014, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3015Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3015Slc
	var yyhl3015 bool = l >= 0
	for yyj3015 := 0; ; yyj3015++ {
		if yyhl3015 {
			if yyj3015 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3015Slc = r.DecodeBytes(yys3015Slc, true, true)
		yys3015 := string(yys3015Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3015 {
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3015)
		} // end switch yys3015
	} // end for yyj3015
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3020 int
	var yyb3020 bool
	var yyhl3020 bool = l >= 0
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3020++
		if yyhl3020 {
			yyb3020 = yyj3020 > l
		} else {
			yyb3020 = r.CheckBreak()
		}
		if yyb3020 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3020-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3025 := z.EncBinary()
		_ = yym3025
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3026 := !z.EncBinary()
			yy2arr3026 := z.EncBasicHandle().StructToArray
			var yyq3026 [7]bool
			_, _, _ = yysep3026, yyq3026, yy2arr3026
			const yyr3026 bool = false
			yyq3026[0] = x.LabelSelector != ""
			yyq3026[1] = x.FieldSelector != ""
			yyq3026[2] = x.Watch != false
			yyq3026[3] = x.ResourceVersion != ""
			yyq3026[4] = x.TimeoutSeconds != nil
			yyq3026[5] = x.Kind != ""
			yyq3026[6] = x.APIVersion != ""
			var yynn3026 int
			if yyr3026 || yy2arr3026 {
				r.EncodeArrayStart(7)
			} else {
				yynn3026 = 0
				for _, b := range yyq3026 {
					if b {
						yynn3026++
					}
				}
				r.EncodeMapStart(yynn3026)
				yynn3026 = 0
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[0] {
					yym3028 := z.EncBinary()
					_ = yym3028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3026[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3029 := z.EncBinary()
					_ = yym3029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[1] {
					yym3031 := z.EncBinary()
					_ = yym3031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3026[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3032 := z.EncBinary()
					_ = yym3032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[2] {
					yym3034 := z.EncBinary()
					_ = yym3034
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3026[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3035 := z.EncBinary()
					_ = yym3035
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[3] {
					yym3037 := z.EncBinary()
					_ = yym3037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3026[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3038 := z.EncBinary()
					_ = yym3038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[4] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3040 := *x.TimeoutSeconds
						yym3041 := z.EncBinary()
						_ = yym3041
						if false {
						} else {
							r.EncodeInt(int64(yy3040))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3026[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3042 := *x.TimeoutSeconds
						yym3043 := z.EncBinary()
						_ = yym3043
						if false {
						} else {
							r.EncodeInt(int64(yy3042))
						}
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[5] {
					yym3045 := z.EncBinary()
					_ = yym3045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3026[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[6] {
					yym3048 := z.EncBinary()
					_ = yym3048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3026[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3049 := z.EncBinary()
					_ = yym3049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3050 := z.DecBinary()
	_ = yym3050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3051 := r.ContainerType()
		if yyct3051 == codecSelferValueTypeMap1234 {
			yyl3051 := r.ReadMapStart()
			if yyl3051 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3051, d)
			}
		} else if yyct3051 == codecSelferValueTypeArray1234 {
			yyl3051 := r.ReadArrayStart()
			if yyl3051 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3051, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3052Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3052Slc
	var yyhl3052 bool = l >= 0
	for yyj3052 := 0; ; yyj3052++ {
		if yyhl3052 {
			if yyj3052 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3052Slc = r.DecodeBytes(yys3052Slc, true, true)
		yys3052 := string(yys3052Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3052 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3058 := z.DecBinary()
				_ = yym3058
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3052)
		} // end switch yys3052
	} // end for yyj3052
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3061 int
	var yyb3061 bool
	var yyhl3061 bool = l >= 0
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3067 := z.DecBinary()
		_ = yym3067
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3061++
		if yyhl3061 {
			yyb3061 = yyj3061 > l
		} else {
			yyb3061 = r.CheckBreak()
		}
		if yyb3061 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3061-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3070 := z.EncBinary()
		_ = yym3070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3071 := !z.EncBinary()
			yy2arr3071 := z.EncBasicHandle().StructToArray
			var yyq3071 [10]bool
			_, _, _ = yysep3071, yyq3071, yy2arr3071
			const yyr3071 bool = false
			yyq3071[0] = x.Container != ""
			yyq3071[1] = x.Follow != false
			yyq3071[2] = x.Previous != false
			yyq3071[3] = x.SinceSeconds != nil
			yyq3071[4] = x.SinceTime != nil
			yyq3071[5] = x.Timestamps != false
			yyq3071[6] = x.TailLines != nil
			yyq3071[7] = x.LimitBytes != nil
			yyq3071[8] = x.Kind != ""
			yyq3071[9] = x.APIVersion != ""
			var yynn3071 int
			if yyr3071 || yy2arr3071 {
				r.EncodeArrayStart(10)
			} else {
				yynn3071 = 0
				for _, b := range yyq3071 {
					if b {
						yynn3071++
					}
				}
				r.EncodeMapStart(yynn3071)
				yynn3071 = 0
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[0] {
					yym3073 := z.EncBinary()
					_ = yym3073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3071[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3074 := z.EncBinary()
					_ = yym3074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[1] {
					yym3076 := z.EncBinary()
					_ = yym3076
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3071[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3077 := z.EncBinary()
					_ = yym3077
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[2] {
					yym3079 := z.EncBinary()
					_ = yym3079
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3071[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3080 := z.EncBinary()
					_ = yym3080
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[3] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3082 := *x.SinceSeconds
						yym3083 := z.EncBinary()
						_ = yym3083
						if false {
						} else {
							r.EncodeInt(int64(yy3082))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3071[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3084 := *x.SinceSeconds
						yym3085 := z.EncBinary()
						_ = yym3085
						if false {
						} else {
							r.EncodeInt(int64(yy3084))
						}
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[4] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3087 := z.EncBinary()
						_ = yym3087
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3087 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3087 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3071[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3088 := z.EncBinary()
						_ = yym3088
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3088 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3088 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[5] {
					yym3090 := z.EncBinary()
					_ = yym3090
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3071[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3091 := z.EncBinary()
					_ = yym3091
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[6] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3093 := *x.TailLines
						yym3094 := z.EncBinary()
						_ = yym3094
						if false {
						} else {
							r.EncodeInt(int64(yy3093))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3071[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3095 := *x.TailLines
						yym3096 := z.EncBinary()
						_ = yym3096
						if false {
						} else {
							r.EncodeInt(int64(yy3095))
						}
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[7] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3098 := *x.LimitBytes
						yym3099 := z.EncBinary()
						_ = yym3099
						if false {
						} else {
							r.EncodeInt(int64(yy3098))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3071[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3100 := *x.LimitBytes
						yym3101 := z.EncBinary()
						_ = yym3101
						if false {
						} else {
							r.EncodeInt(int64(yy3100))
						}
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[8] {
					yym3103 := z.EncBinary()
					_ = yym3103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3071[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3104 := z.EncBinary()
					_ = yym3104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[9] {
					yym3106 := z.EncBinary()
					_ = yym3106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3071[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3107 := z.EncBinary()
					_ = yym3107
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3108 := z.DecBinary()
	_ = yym3108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3109 := r.ContainerType()
		if yyct3109 == codecSelferValueTypeMap1234 {
			yyl3109 := r.ReadMapStart()
			if yyl3109 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3109, d)
			}
		} else if yyct3109 == codecSelferValueTypeArray1234 {
			yyl3109 := r.ReadArrayStart()
			if yyl3109 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3110Slc
	var yyhl3110 bool = l >= 0
	for yyj3110 := 0; ; yyj3110++ {
		if yyhl3110 {
			if yyj3110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3110Slc = r.DecodeBytes(yys3110Slc, true, true)
		yys3110 := string(yys3110Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3110 {
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3115 := z.DecBinary()
				_ = yym3115
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3117 := z.DecBinary()
				_ = yym3117
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3117 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3117 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3120 := z.DecBinary()
				_ = yym3120
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3122 := z.DecBinary()
				_ = yym3122
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3110)
		} // end switch yys3110
	} // end for yyj3110
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3125 int
	var yyb3125 bool
	var yyhl3125 bool = l >= 0
	yyj3125++
	if yyhl3125 {
		yyb3125 = yyj3125 > l
	} else {
		yyb3125 = r.CheckBreak()
	}
	if yyb3125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3125++
	if yyhl3125 {
		yyb3125 = yyj3125 > l
	} else {
		yyb3125 = r.CheckBreak()
	}
	if yyb3125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3125++
	if yyhl3125 {
		yyb3125 = yyj3125 > l
	} else {
		yyb3125 = r.CheckBreak()
	}
	if yyb3125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3125++
	if yyhl3125 {
		yyb3125 = yyj3125 > l
	} else {
		yyb3125 = r.CheckBreak()
	}
	if yyb3125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3130 := z.DecBinary()
		_ = yym3130
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3125++
	if yyhl3125 {
		yyb3125 = yyj3125 > l
	} else {
		yyb3125 = r.CheckBreak()
	}
	if yyb3125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3132 := z.DecBinary()
		_ = yym3132
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3132 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3132 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3125++
	if yyhl3125 {
		yyb3125 = yyj3125 > l
	} else {
		yyb3125 = r.CheckBreak()
	}
	if yyb3125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3125++
	if yyhl3125 {
		yyb3125 = yyj3125 > l
	} else {
		yyb3125 = r.CheckBreak()
	}
	if yyb3125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3135 := z.DecBinary()
		_ = yym3135
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3125++
	if yyhl3125 {
		yyb3125 = yyj3125 > l
	} else {
		yyb3125 = r.CheckBreak()
	}
	if yyb3125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3137 := z.DecBinary()
		_ = yym3137
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	yyj3125++
	if yyhl3125 {
		yyb3125 = yyj3125 > l
	} else {
		yyb3125 = r.CheckBreak()
	}
	if yyb3125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3125++
	if yyhl3125 {
		yyb3125 = yyj3125 > l
	} else {
		yyb3125 = r.CheckBreak()
	}
	if yyb3125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3125++
		if yyhl3125 {
			yyb3125 = yyj3125 > l
		} else {
			yyb3125 = r.CheckBreak()
		}
		if yyb3125 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3125-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3140 := z.EncBinary()
		_ = yym3140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3141 := !z.EncBinary()
			yy2arr3141 := z.EncBasicHandle().StructToArray
			var yyq3141 [7]bool
			_, _, _ = yysep3141, yyq3141, yy2arr3141
			const yyr3141 bool = false
			yyq3141[0] = x.Stdin != false
			yyq3141[1] = x.Stdout != false
			yyq3141[2] = x.Stderr != false
			yyq3141[3] = x.TTY != false
			yyq3141[4] = x.Container != ""
			yyq3141[5] = x.Kind != ""
			yyq3141[6] = x.APIVersion != ""
			var yynn3141 int
			if yyr3141 || yy2arr3141 {
				r.EncodeArrayStart(7)
			} else {
				yynn3141 = 0
				for _, b := range yyq3141 {
					if b {
						yynn3141++
					}
				}
				r.EncodeMapStart(yynn3141)
				yynn3141 = 0
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[0] {
					yym3143 := z.EncBinary()
					_ = yym3143
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3144 := z.EncBinary()
					_ = yym3144
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[1] {
					yym3146 := z.EncBinary()
					_ = yym3146
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3147 := z.EncBinary()
					_ = yym3147
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[2] {
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3141[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3150 := z.EncBinary()
					_ = yym3150
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[3] {
					yym3152 := z.EncBinary()
					_ = yym3152
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3141[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[4] {
					yym3155 := z.EncBinary()
					_ = yym3155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3141[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[5] {
					yym3158 := z.EncBinary()
					_ = yym3158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3141[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[6] {
					yym3161 := z.EncBinary()
					_ = yym3161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3141[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3162 := z.EncBinary()
					_ = yym3162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3163 := z.DecBinary()
	_ = yym3163
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3164 := r.ContainerType()
		if yyct3164 == codecSelferValueTypeMap1234 {
			yyl3164 := r.ReadMapStart()
			if yyl3164 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3164, d)
			}
		} else if yyct3164 == codecSelferValueTypeArray1234 {
			yyl3164 := r.ReadArrayStart()
			if yyl3164 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3164, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3165Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3165Slc
	var yyhl3165 bool = l >= 0
	for yyj3165 := 0; ; yyj3165++ {
		if yyhl3165 {
			if yyj3165 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3165Slc = r.DecodeBytes(yys3165Slc, true, true)
		yys3165 := string(yys3165Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3165 {
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3165)
		} // end switch yys3165
	} // end for yyj3165
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3173 int
	var yyb3173 bool
	var yyhl3173 bool = l >= 0
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3173++
		if yyhl3173 {
			yyb3173 = yyj3173 > l
		} else {
			yyb3173 = r.CheckBreak()
		}
		if yyb3173 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3173-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3181 := z.EncBinary()
		_ = yym3181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3182 := !z.EncBinary()
			yy2arr3182 := z.EncBasicHandle().StructToArray
			var yyq3182 [8]bool
			_, _, _ = yysep3182, yyq3182, yy2arr3182
			const yyr3182 bool = false
			yyq3182[0] = x.Stdin != false
			yyq3182[1] = x.Stdout != false
			yyq3182[2] = x.Stderr != false
			yyq3182[3] = x.TTY != false
			yyq3182[4] = x.Container != ""
			yyq3182[6] = x.Kind != ""
			yyq3182[7] = x.APIVersion != ""
			var yynn3182 int
			if yyr3182 || yy2arr3182 {
				r.EncodeArrayStart(8)
			} else {
				yynn3182 = 1
				for _, b := range yyq3182 {
					if b {
						yynn3182++
					}
				}
				r.EncodeMapStart(yynn3182)
				yynn3182 = 0
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[0] {
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3182[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[1] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[2] {
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3182[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[3] {
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3182[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3194 := z.EncBinary()
					_ = yym3194
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[4] {
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3182[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3197 := z.EncBinary()
					_ = yym3197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3200 := z.EncBinary()
					_ = yym3200
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[6] {
					yym3202 := z.EncBinary()
					_ = yym3202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3182[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3203 := z.EncBinary()
					_ = yym3203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[7] {
					yym3205 := z.EncBinary()
					_ = yym3205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3182[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3206 := z.EncBinary()
					_ = yym3206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3207 := z.DecBinary()
	_ = yym3207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3208 := r.ContainerType()
		if yyct3208 == codecSelferValueTypeMap1234 {
			yyl3208 := r.ReadMapStart()
			if yyl3208 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3208, d)
			}
		} else if yyct3208 == codecSelferValueTypeArray1234 {
			yyl3208 := r.ReadArrayStart()
			if yyl3208 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3209Slc
	var yyhl3209 bool = l >= 0
	for yyj3209 := 0; ; yyj3209++ {
		if yyhl3209 {
			if yyj3209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3209Slc = r.DecodeBytes(yys3209Slc, true, true)
		yys3209 := string(yys3209Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3209 {
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3215 := &x.Command
				yym3216 := z.DecBinary()
				_ = yym3216
				if false {
				} else {
					z.F.DecSliceStringX(yyv3215, false, d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3209)
		} // end switch yys3209
	} // end for yyj3209
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3219 int
	var yyb3219 bool
	var yyhl3219 bool = l >= 0
	yyj3219++
	if yyhl3219 {
		yyb3219 = yyj3219 > l
	} else {
		yyb3219 = r.CheckBreak()
	}
	if yyb3219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3219++
	if yyhl3219 {
		yyb3219 = yyj3219 > l
	} else {
		yyb3219 = r.CheckBreak()
	}
	if yyb3219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3219++
	if yyhl3219 {
		yyb3219 = yyj3219 > l
	} else {
		yyb3219 = r.CheckBreak()
	}
	if yyb3219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3219++
	if yyhl3219 {
		yyb3219 = yyj3219 > l
	} else {
		yyb3219 = r.CheckBreak()
	}
	if yyb3219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3219++
	if yyhl3219 {
		yyb3219 = yyj3219 > l
	} else {
		yyb3219 = r.CheckBreak()
	}
	if yyb3219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3219++
	if yyhl3219 {
		yyb3219 = yyj3219 > l
	} else {
		yyb3219 = r.CheckBreak()
	}
	if yyb3219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3225 := &x.Command
		yym3226 := z.DecBinary()
		_ = yym3226
		if false {
		} else {
			z.F.DecSliceStringX(yyv3225, false, d)
		}
	}
	yyj3219++
	if yyhl3219 {
		yyb3219 = yyj3219 > l
	} else {
		yyb3219 = r.CheckBreak()
	}
	if yyb3219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3219++
	if yyhl3219 {
		yyb3219 = yyj3219 > l
	} else {
		yyb3219 = r.CheckBreak()
	}
	if yyb3219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3219++
		if yyhl3219 {
			yyb3219 = yyj3219 > l
		} else {
			yyb3219 = r.CheckBreak()
		}
		if yyb3219 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3219-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3229 := z.EncBinary()
		_ = yym3229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3230 := !z.EncBinary()
			yy2arr3230 := z.EncBasicHandle().StructToArray
			var yyq3230 [3]bool
			_, _, _ = yysep3230, yyq3230, yy2arr3230
			const yyr3230 bool = false
			yyq3230[0] = x.Path != ""
			yyq3230[1] = x.Kind != ""
			yyq3230[2] = x.APIVersion != ""
			var yynn3230 int
			if yyr3230 || yy2arr3230 {
				r.EncodeArrayStart(3)
			} else {
				yynn3230 = 0
				for _, b := range yyq3230 {
					if b {
						yynn3230++
					}
				}
				r.EncodeMapStart(yynn3230)
				yynn3230 = 0
			}
			if yyr3230 || yy2arr3230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3230[0] {
					yym3232 := z.EncBinary()
					_ = yym3232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3230[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3233 := z.EncBinary()
					_ = yym3233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3230 || yy2arr3230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3230[1] {
					yym3235 := z.EncBinary()
					_ = yym3235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3230[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3236 := z.EncBinary()
					_ = yym3236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3230 || yy2arr3230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3230[2] {
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3230[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3239 := z.EncBinary()
					_ = yym3239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3230 || yy2arr3230 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3240 := z.DecBinary()
	_ = yym3240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3241 := r.ContainerType()
		if yyct3241 == codecSelferValueTypeMap1234 {
			yyl3241 := r.ReadMapStart()
			if yyl3241 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3241, d)
			}
		} else if yyct3241 == codecSelferValueTypeArray1234 {
			yyl3241 := r.ReadArrayStart()
			if yyl3241 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3242Slc
	var yyhl3242 bool = l >= 0
	for yyj3242 := 0; ; yyj3242++ {
		if yyhl3242 {
			if yyj3242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3242Slc = r.DecodeBytes(yys3242Slc, true, true)
		yys3242 := string(yys3242Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3242 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3242)
		} // end switch yys3242
	} // end for yyj3242
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3246 int
	var yyb3246 bool
	var yyhl3246 bool = l >= 0
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3246++
		if yyhl3246 {
			yyb3246 = yyj3246 > l
		} else {
			yyb3246 = r.CheckBreak()
		}
		if yyb3246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3250 := z.EncBinary()
		_ = yym3250
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3251 := !z.EncBinary()
			yy2arr3251 := z.EncBasicHandle().StructToArray
			var yyq3251 [7]bool
			_, _, _ = yysep3251, yyq3251, yy2arr3251
			const yyr3251 bool = false
			yyq3251[0] = x.Kind != ""
			yyq3251[1] = x.Namespace != ""
			yyq3251[2] = x.Name != ""
			yyq3251[3] = x.UID != ""
			yyq3251[4] = x.APIVersion != ""
			yyq3251[5] = x.ResourceVersion != ""
			yyq3251[6] = x.FieldPath != ""
			var yynn3251 int
			if yyr3251 || yy2arr3251 {
				r.EncodeArrayStart(7)
			} else {
				yynn3251 = 0
				for _, b := range yyq3251 {
					if b {
						yynn3251++
					}
				}
				r.EncodeMapStart(yynn3251)
				yynn3251 = 0
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[0] {
					yym3253 := z.EncBinary()
					_ = yym3253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3251[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3254 := z.EncBinary()
					_ = yym3254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[1] {
					yym3256 := z.EncBinary()
					_ = yym3256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3251[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[2] {
					yym3259 := z.EncBinary()
					_ = yym3259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3251[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[3] {
					yym3262 := z.EncBinary()
					_ = yym3262
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3251[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3263 := z.EncBinary()
					_ = yym3263
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[4] {
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3251[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[5] {
					yym3268 := z.EncBinary()
					_ = yym3268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3251[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[6] {
					yym3271 := z.EncBinary()
					_ = yym3271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3251[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3272 := z.EncBinary()
					_ = yym3272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3273 := z.DecBinary()
	_ = yym3273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3274 := r.ContainerType()
		if yyct3274 == codecSelferValueTypeMap1234 {
			yyl3274 := r.ReadMapStart()
			if yyl3274 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3274, d)
			}
		} else if yyct3274 == codecSelferValueTypeArray1234 {
			yyl3274 := r.ReadArrayStart()
			if yyl3274 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3275Slc
	var yyhl3275 bool = l >= 0
	for yyj3275 := 0; ; yyj3275++ {
		if yyhl3275 {
			if yyj3275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3275Slc = r.DecodeBytes(yys3275Slc, true, true)
		yys3275 := string(yys3275Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3275 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3275)
		} // end switch yys3275
	} // end for yyj3275
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3283 int
	var yyb3283 bool
	var yyhl3283 bool = l >= 0
	yyj3283++
	if yyhl3283 {
		yyb3283 = yyj3283 > l
	} else {
		yyb3283 = r.CheckBreak()
	}
	if yyb3283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3283++
	if yyhl3283 {
		yyb3283 = yyj3283 > l
	} else {
		yyb3283 = r.CheckBreak()
	}
	if yyb3283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3283++
	if yyhl3283 {
		yyb3283 = yyj3283 > l
	} else {
		yyb3283 = r.CheckBreak()
	}
	if yyb3283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3283++
	if yyhl3283 {
		yyb3283 = yyj3283 > l
	} else {
		yyb3283 = r.CheckBreak()
	}
	if yyb3283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3283++
	if yyhl3283 {
		yyb3283 = yyj3283 > l
	} else {
		yyb3283 = r.CheckBreak()
	}
	if yyb3283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3283++
	if yyhl3283 {
		yyb3283 = yyj3283 > l
	} else {
		yyb3283 = r.CheckBreak()
	}
	if yyb3283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3283++
	if yyhl3283 {
		yyb3283 = yyj3283 > l
	} else {
		yyb3283 = r.CheckBreak()
	}
	if yyb3283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3283++
		if yyhl3283 {
			yyb3283 = yyj3283 > l
		} else {
			yyb3283 = r.CheckBreak()
		}
		if yyb3283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3291 := z.EncBinary()
		_ = yym3291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3292 := !z.EncBinary()
			yy2arr3292 := z.EncBasicHandle().StructToArray
			var yyq3292 [1]bool
			_, _, _ = yysep3292, yyq3292, yy2arr3292
			const yyr3292 bool = false
			yyq3292[0] = x.Name != ""
			var yynn3292 int
			if yyr3292 || yy2arr3292 {
				r.EncodeArrayStart(1)
			} else {
				yynn3292 = 0
				for _, b := range yyq3292 {
					if b {
						yynn3292++
					}
				}
				r.EncodeMapStart(yynn3292)
				yynn3292 = 0
			}
			if yyr3292 || yy2arr3292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3292[0] {
					yym3294 := z.EncBinary()
					_ = yym3294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3292[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3292 || yy2arr3292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3296 := z.DecBinary()
	_ = yym3296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3297 := r.ContainerType()
		if yyct3297 == codecSelferValueTypeMap1234 {
			yyl3297 := r.ReadMapStart()
			if yyl3297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3297, d)
			}
		} else if yyct3297 == codecSelferValueTypeArray1234 {
			yyl3297 := r.ReadArrayStart()
			if yyl3297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3298Slc
	var yyhl3298 bool = l >= 0
	for yyj3298 := 0; ; yyj3298++ {
		if yyhl3298 {
			if yyj3298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3298Slc = r.DecodeBytes(yys3298Slc, true, true)
		yys3298 := string(yys3298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3298 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3298)
		} // end switch yys3298
	} // end for yyj3298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3300 int
	var yyb3300 bool
	var yyhl3300 bool = l >= 0
	yyj3300++
	if yyhl3300 {
		yyb3300 = yyj3300 > l
	} else {
		yyb3300 = r.CheckBreak()
	}
	if yyb3300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3300++
		if yyhl3300 {
			yyb3300 = yyj3300 > l
		} else {
			yyb3300 = r.CheckBreak()
		}
		if yyb3300 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3300-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3302 := z.EncBinary()
		_ = yym3302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3303 := !z.EncBinary()
			yy2arr3303 := z.EncBasicHandle().StructToArray
			var yyq3303 [3]bool
			_, _, _ = yysep3303, yyq3303, yy2arr3303
			const yyr3303 bool = false
			yyq3303[0] = true
			yyq3303[1] = x.Kind != ""
			yyq3303[2] = x.APIVersion != ""
			var yynn3303 int
			if yyr3303 || yy2arr3303 {
				r.EncodeArrayStart(3)
			} else {
				yynn3303 = 0
				for _, b := range yyq3303 {
					if b {
						yynn3303++
					}
				}
				r.EncodeMapStart(yynn3303)
				yynn3303 = 0
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[0] {
					yy3305 := &x.Reference
					yy3305.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3303[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3306 := &x.Reference
					yy3306.CodecEncodeSelf(e)
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[1] {
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3303[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[2] {
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3303[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3312 := z.EncBinary()
					_ = yym3312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3313 := z.DecBinary()
	_ = yym3313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3314 := r.ContainerType()
		if yyct3314 == codecSelferValueTypeMap1234 {
			yyl3314 := r.ReadMapStart()
			if yyl3314 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3314, d)
			}
		} else if yyct3314 == codecSelferValueTypeArray1234 {
			yyl3314 := r.ReadArrayStart()
			if yyl3314 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3315Slc
	var yyhl3315 bool = l >= 0
	for yyj3315 := 0; ; yyj3315++ {
		if yyhl3315 {
			if yyj3315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3315Slc = r.DecodeBytes(yys3315Slc, true, true)
		yys3315 := string(yys3315Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3315 {
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3316 := &x.Reference
				yyv3316.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3315)
		} // end switch yys3315
	} // end for yyj3315
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3319 int
	var yyb3319 bool
	var yyhl3319 bool = l >= 0
	yyj3319++
	if yyhl3319 {
		yyb3319 = yyj3319 > l
	} else {
		yyb3319 = r.CheckBreak()
	}
	if yyb3319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3320 := &x.Reference
		yyv3320.CodecDecodeSelf(d)
	}
	yyj3319++
	if yyhl3319 {
		yyb3319 = yyj3319 > l
	} else {
		yyb3319 = r.CheckBreak()
	}
	if yyb3319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3319++
	if yyhl3319 {
		yyb3319 = yyj3319 > l
	} else {
		yyb3319 = r.CheckBreak()
	}
	if yyb3319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3319++
		if yyhl3319 {
			yyb3319 = yyj3319 > l
		} else {
			yyb3319 = r.CheckBreak()
		}
		if yyb3319 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3319-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3323 := z.EncBinary()
		_ = yym3323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3324 := !z.EncBinary()
			yy2arr3324 := z.EncBasicHandle().StructToArray
			var yyq3324 [2]bool
			_, _, _ = yysep3324, yyq3324, yy2arr3324
			const yyr3324 bool = false
			yyq3324[0] = x.Component != ""
			yyq3324[1] = x.Host != ""
			var yynn3324 int
			if yyr3324 || yy2arr3324 {
				r.EncodeArrayStart(2)
			} else {
				yynn3324 = 0
				for _, b := range yyq3324 {
					if b {
						yynn3324++
					}
				}
				r.EncodeMapStart(yynn3324)
				yynn3324 = 0
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3324[0] {
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3324[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3324[1] {
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3324[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3330 := z.EncBinary()
					_ = yym3330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3331 := z.DecBinary()
	_ = yym3331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3332 := r.ContainerType()
		if yyct3332 == codecSelferValueTypeMap1234 {
			yyl3332 := r.ReadMapStart()
			if yyl3332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3332, d)
			}
		} else if yyct3332 == codecSelferValueTypeArray1234 {
			yyl3332 := r.ReadArrayStart()
			if yyl3332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3333Slc
	var yyhl3333 bool = l >= 0
	for yyj3333 := 0; ; yyj3333++ {
		if yyhl3333 {
			if yyj3333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3333Slc = r.DecodeBytes(yys3333Slc, true, true)
		yys3333 := string(yys3333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3333 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3333)
		} // end switch yys3333
	} // end for yyj3333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3336 int
	var yyb3336 bool
	var yyhl3336 bool = l >= 0
	yyj3336++
	if yyhl3336 {
		yyb3336 = yyj3336 > l
	} else {
		yyb3336 = r.CheckBreak()
	}
	if yyb3336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3336++
	if yyhl3336 {
		yyb3336 = yyj3336 > l
	} else {
		yyb3336 = r.CheckBreak()
	}
	if yyb3336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3336++
		if yyhl3336 {
			yyb3336 = yyj3336 > l
		} else {
			yyb3336 = r.CheckBreak()
		}
		if yyb3336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3339 := z.EncBinary()
		_ = yym3339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3340 := !z.EncBinary()
			yy2arr3340 := z.EncBasicHandle().StructToArray
			var yyq3340 [11]bool
			_, _, _ = yysep3340, yyq3340, yy2arr3340
			const yyr3340 bool = false
			yyq3340[2] = x.Reason != ""
			yyq3340[3] = x.Message != ""
			yyq3340[4] = true
			yyq3340[5] = true
			yyq3340[6] = true
			yyq3340[7] = x.Count != 0
			yyq3340[8] = x.Type != ""
			yyq3340[9] = x.Kind != ""
			yyq3340[10] = x.APIVersion != ""
			var yynn3340 int
			if yyr3340 || yy2arr3340 {
				r.EncodeArrayStart(11)
			} else {
				yynn3340 = 2
				for _, b := range yyq3340 {
					if b {
						yynn3340++
					}
				}
				r.EncodeMapStart(yynn3340)
				yynn3340 = 0
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3342 := &x.ObjectMeta
				yy3342.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3343 := &x.ObjectMeta
				yy3343.CodecEncodeSelf(e)
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3345 := &x.InvolvedObject
				yy3345.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3346 := &x.InvolvedObject
				yy3346.CodecEncodeSelf(e)
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[2] {
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3340[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3349 := z.EncBinary()
					_ = yym3349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[3] {
					yym3351 := z.EncBinary()
					_ = yym3351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3340[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3352 := z.EncBinary()
					_ = yym3352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[4] {
					yy3354 := &x.Source
					yy3354.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3340[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3355 := &x.Source
					yy3355.CodecEncodeSelf(e)
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[5] {
					yy3357 := &x.FirstTimestamp
					yym3358 := z.EncBinary()
					_ = yym3358
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3357) {
					} else if yym3358 {
						z.EncBinaryMarshal(yy3357)
					} else if !yym3358 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3357)
					} else {
						z.EncFallback(yy3357)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3340[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3359 := &x.FirstTimestamp
					yym3360 := z.EncBinary()
					_ = yym3360
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3359) {
					} else if yym3360 {
						z.EncBinaryMarshal(yy3359)
					} else if !yym3360 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3359)
					} else {
						z.EncFallback(yy3359)
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[6] {
					yy3362 := &x.LastTimestamp
					yym3363 := z.EncBinary()
					_ = yym3363
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3362) {
					} else if yym3363 {
						z.EncBinaryMarshal(yy3362)
					} else if !yym3363 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3362)
					} else {
						z.EncFallback(yy3362)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3340[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3364 := &x.LastTimestamp
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3364) {
					} else if yym3365 {
						z.EncBinaryMarshal(yy3364)
					} else if !yym3365 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3364)
					} else {
						z.EncFallback(yy3364)
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[7] {
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3340[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3368 := z.EncBinary()
					_ = yym3368
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[8] {
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3340[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[9] {
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3340[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[10] {
					yym3376 := z.EncBinary()
					_ = yym3376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3340[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3378 := z.DecBinary()
	_ = yym3378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3379 := r.ContainerType()
		if yyct3379 == codecSelferValueTypeMap1234 {
			yyl3379 := r.ReadMapStart()
			if yyl3379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3379, d)
			}
		} else if yyct3379 == codecSelferValueTypeArray1234 {
			yyl3379 := r.ReadArrayStart()
			if yyl3379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3380Slc
	var yyhl3380 bool = l >= 0
	for yyj3380 := 0; ; yyj3380++ {
		if yyhl3380 {
			if yyj3380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3380Slc = r.DecodeBytes(yys3380Slc, true, true)
		yys3380 := string(yys3380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3380 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3381 := &x.ObjectMeta
				yyv3381.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3382 := &x.InvolvedObject
				yyv3382.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3385 := &x.Source
				yyv3385.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3386 := &x.FirstTimestamp
				yym3387 := z.DecBinary()
				_ = yym3387
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3386) {
				} else if yym3387 {
					z.DecBinaryUnmarshal(yyv3386)
				} else if !yym3387 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3386)
				} else {
					z.DecFallback(yyv3386, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3388 := &x.LastTimestamp
				yym3389 := z.DecBinary()
				_ = yym3389
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3388) {
				} else if yym3389 {
					z.DecBinaryUnmarshal(yyv3388)
				} else if !yym3389 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3388)
				} else {
					z.DecFallback(yyv3388, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3380)
		} // end switch yys3380
	} // end for yyj3380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3394 int
	var yyb3394 bool
	var yyhl3394 bool = l >= 0
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3395 := &x.ObjectMeta
		yyv3395.CodecDecodeSelf(d)
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3396 := &x.InvolvedObject
		yyv3396.CodecDecodeSelf(d)
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3399 := &x.Source
		yyv3399.CodecDecodeSelf(d)
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3400 := &x.FirstTimestamp
		yym3401 := z.DecBinary()
		_ = yym3401
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3400) {
		} else if yym3401 {
			z.DecBinaryUnmarshal(yyv3400)
		} else if !yym3401 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3400)
		} else {
			z.DecFallback(yyv3400, false)
		}
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3402 := &x.LastTimestamp
		yym3403 := z.DecBinary()
		_ = yym3403
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3402) {
		} else if yym3403 {
			z.DecBinaryUnmarshal(yyv3402)
		} else if !yym3403 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3402)
		} else {
			z.DecFallback(yyv3402, false)
		}
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3394++
		if yyhl3394 {
			yyb3394 = yyj3394 > l
		} else {
			yyb3394 = r.CheckBreak()
		}
		if yyb3394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3408 := z.EncBinary()
		_ = yym3408
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3409 := !z.EncBinary()
			yy2arr3409 := z.EncBasicHandle().StructToArray
			var yyq3409 [4]bool
			_, _, _ = yysep3409, yyq3409, yy2arr3409
			const yyr3409 bool = false
			yyq3409[0] = true
			yyq3409[2] = x.Kind != ""
			yyq3409[3] = x.APIVersion != ""
			var yynn3409 int
			if yyr3409 || yy2arr3409 {
				r.EncodeArrayStart(4)
			} else {
				yynn3409 = 1
				for _, b := range yyq3409 {
					if b {
						yynn3409++
					}
				}
				r.EncodeMapStart(yynn3409)
				yynn3409 = 0
			}
			if yyr3409 || yy2arr3409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3409[0] {
					yy3411 := &x.ListMeta
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3411) {
					} else {
						z.EncFallback(yy3411)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3409[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3413 := &x.ListMeta
					yym3414 := z.EncBinary()
					_ = yym3414
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3413) {
					} else {
						z.EncFallback(yy3413)
					}
				}
			}
			if yyr3409 || yy2arr3409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3416 := z.EncBinary()
					_ = yym3416
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3417 := z.EncBinary()
					_ = yym3417
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3409 || yy2arr3409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3409[2] {
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3409[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3420 := z.EncBinary()
					_ = yym3420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3409 || yy2arr3409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3409[3] {
					yym3422 := z.EncBinary()
					_ = yym3422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3409[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3423 := z.EncBinary()
					_ = yym3423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3409 || yy2arr3409 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3424 := z.DecBinary()
	_ = yym3424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3425 := r.ContainerType()
		if yyct3425 == codecSelferValueTypeMap1234 {
			yyl3425 := r.ReadMapStart()
			if yyl3425 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3425, d)
			}
		} else if yyct3425 == codecSelferValueTypeArray1234 {
			yyl3425 := r.ReadArrayStart()
			if yyl3425 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3425, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3426Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3426Slc
	var yyhl3426 bool = l >= 0
	for yyj3426 := 0; ; yyj3426++ {
		if yyhl3426 {
			if yyj3426 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3426Slc = r.DecodeBytes(yys3426Slc, true, true)
		yys3426 := string(yys3426Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3426 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3427 := &x.ListMeta
				yym3428 := z.DecBinary()
				_ = yym3428
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3427) {
				} else {
					z.DecFallback(yyv3427, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3429 := &x.Items
				yym3430 := z.DecBinary()
				_ = yym3430
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3429), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3426)
		} // end switch yys3426
	} // end for yyj3426
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3433 int
	var yyb3433 bool
	var yyhl3433 bool = l >= 0
	yyj3433++
	if yyhl3433 {
		yyb3433 = yyj3433 > l
	} else {
		yyb3433 = r.CheckBreak()
	}
	if yyb3433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3434 := &x.ListMeta
		yym3435 := z.DecBinary()
		_ = yym3435
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3434) {
		} else {
			z.DecFallback(yyv3434, false)
		}
	}
	yyj3433++
	if yyhl3433 {
		yyb3433 = yyj3433 > l
	} else {
		yyb3433 = r.CheckBreak()
	}
	if yyb3433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3436 := &x.Items
		yym3437 := z.DecBinary()
		_ = yym3437
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3436), d)
		}
	}
	yyj3433++
	if yyhl3433 {
		yyb3433 = yyj3433 > l
	} else {
		yyb3433 = r.CheckBreak()
	}
	if yyb3433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3433++
	if yyhl3433 {
		yyb3433 = yyj3433 > l
	} else {
		yyb3433 = r.CheckBreak()
	}
	if yyb3433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3433++
		if yyhl3433 {
			yyb3433 = yyj3433 > l
		} else {
			yyb3433 = r.CheckBreak()
		}
		if yyb3433 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3433-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3440 := z.EncBinary()
		_ = yym3440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3441 := !z.EncBinary()
			yy2arr3441 := z.EncBasicHandle().StructToArray
			var yyq3441 [4]bool
			_, _, _ = yysep3441, yyq3441, yy2arr3441
			const yyr3441 bool = false
			yyq3441[0] = true
			yyq3441[2] = x.Kind != ""
			yyq3441[3] = x.APIVersion != ""
			var yynn3441 int
			if yyr3441 || yy2arr3441 {
				r.EncodeArrayStart(4)
			} else {
				yynn3441 = 1
				for _, b := range yyq3441 {
					if b {
						yynn3441++
					}
				}
				r.EncodeMapStart(yynn3441)
				yynn3441 = 0
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[0] {
					yy3443 := &x.ListMeta
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3443) {
					} else {
						z.EncFallback(yy3443)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3441[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3445 := &x.ListMeta
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3445) {
					} else {
						z.EncFallback(yy3445)
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3448 := z.EncBinary()
					_ = yym3448
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[2] {
					yym3451 := z.EncBinary()
					_ = yym3451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3441[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[3] {
					yym3454 := z.EncBinary()
					_ = yym3454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3441[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3455 := z.EncBinary()
					_ = yym3455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3456 := z.DecBinary()
	_ = yym3456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3457 := r.ContainerType()
		if yyct3457 == codecSelferValueTypeMap1234 {
			yyl3457 := r.ReadMapStart()
			if yyl3457 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3457, d)
			}
		} else if yyct3457 == codecSelferValueTypeArray1234 {
			yyl3457 := r.ReadArrayStart()
			if yyl3457 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3457, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3458Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3458Slc
	var yyhl3458 bool = l >= 0
	for yyj3458 := 0; ; yyj3458++ {
		if yyhl3458 {
			if yyj3458 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3458Slc = r.DecodeBytes(yys3458Slc, true, true)
		yys3458 := string(yys3458Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3458 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3459 := &x.ListMeta
				yym3460 := z.DecBinary()
				_ = yym3460
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3459) {
				} else {
					z.DecFallback(yyv3459, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3461 := &x.Items
				yym3462 := z.DecBinary()
				_ = yym3462
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3461), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3458)
		} // end switch yys3458
	} // end for yyj3458
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3465 int
	var yyb3465 bool
	var yyhl3465 bool = l >= 0
	yyj3465++
	if yyhl3465 {
		yyb3465 = yyj3465 > l
	} else {
		yyb3465 = r.CheckBreak()
	}
	if yyb3465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3466 := &x.ListMeta
		yym3467 := z.DecBinary()
		_ = yym3467
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3466) {
		} else {
			z.DecFallback(yyv3466, false)
		}
	}
	yyj3465++
	if yyhl3465 {
		yyb3465 = yyj3465 > l
	} else {
		yyb3465 = r.CheckBreak()
	}
	if yyb3465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3468 := &x.Items
		yym3469 := z.DecBinary()
		_ = yym3469
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3468), d)
		}
	}
	yyj3465++
	if yyhl3465 {
		yyb3465 = yyj3465 > l
	} else {
		yyb3465 = r.CheckBreak()
	}
	if yyb3465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3465++
	if yyhl3465 {
		yyb3465 = yyj3465 > l
	} else {
		yyb3465 = r.CheckBreak()
	}
	if yyb3465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3465++
		if yyhl3465 {
			yyb3465 = yyj3465 > l
		} else {
			yyb3465 = r.CheckBreak()
		}
		if yyb3465 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3465-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3472 := z.EncBinary()
	_ = yym3472
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3473 := z.DecBinary()
	_ = yym3473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3474 := z.EncBinary()
		_ = yym3474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3475 := !z.EncBinary()
			yy2arr3475 := z.EncBasicHandle().StructToArray
			var yyq3475 [6]bool
			_, _, _ = yysep3475, yyq3475, yy2arr3475
			const yyr3475 bool = false
			yyq3475[0] = x.Type != ""
			yyq3475[1] = len(x.Max) != 0
			yyq3475[2] = len(x.Min) != 0
			yyq3475[3] = len(x.Default) != 0
			yyq3475[4] = len(x.DefaultRequest) != 0
			yyq3475[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3475 int
			if yyr3475 || yy2arr3475 {
				r.EncodeArrayStart(6)
			} else {
				yynn3475 = 0
				for _, b := range yyq3475 {
					if b {
						yynn3475++
					}
				}
				r.EncodeMapStart(yynn3475)
				yynn3475 = 0
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3475[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3475[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3475[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3475[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3475[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3475[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3475[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3475[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3475[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3482 := z.DecBinary()
	_ = yym3482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3483 := r.ContainerType()
		if yyct3483 == codecSelferValueTypeMap1234 {
			yyl3483 := r.ReadMapStart()
			if yyl3483 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3483, d)
			}
		} else if yyct3483 == codecSelferValueTypeArray1234 {
			yyl3483 := r.ReadArrayStart()
			if yyl3483 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3483, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3484Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3484Slc
	var yyhl3484 bool = l >= 0
	for yyj3484 := 0; ; yyj3484++ {
		if yyhl3484 {
			if yyj3484 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3484Slc = r.DecodeBytes(yys3484Slc, true, true)
		yys3484 := string(yys3484Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3484 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3486 := &x.Max
				yyv3486.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3487 := &x.Min
				yyv3487.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3488 := &x.Default
				yyv3488.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3489 := &x.DefaultRequest
				yyv3489.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3490 := &x.MaxLimitRequestRatio
				yyv3490.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3484)
		} // end switch yys3484
	} // end for yyj3484
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3491 int
	var yyb3491 bool
	var yyhl3491 bool = l >= 0
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3493 := &x.Max
		yyv3493.CodecDecodeSelf(d)
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3494 := &x.Min
		yyv3494.CodecDecodeSelf(d)
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3495 := &x.Default
		yyv3495.CodecDecodeSelf(d)
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3496 := &x.DefaultRequest
		yyv3496.CodecDecodeSelf(d)
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3497 := &x.MaxLimitRequestRatio
		yyv3497.CodecDecodeSelf(d)
	}
	for {
		yyj3491++
		if yyhl3491 {
			yyb3491 = yyj3491 > l
		} else {
			yyb3491 = r.CheckBreak()
		}
		if yyb3491 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3491-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3498 := z.EncBinary()
		_ = yym3498
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3499 := !z.EncBinary()
			yy2arr3499 := z.EncBasicHandle().StructToArray
			var yyq3499 [1]bool
			_, _, _ = yysep3499, yyq3499, yy2arr3499
			const yyr3499 bool = false
			var yynn3499 int
			if yyr3499 || yy2arr3499 {
				r.EncodeArrayStart(1)
			} else {
				yynn3499 = 1
				for _, b := range yyq3499 {
					if b {
						yynn3499++
					}
				}
				r.EncodeMapStart(yynn3499)
				yynn3499 = 0
			}
			if yyr3499 || yy2arr3499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3501 := z.EncBinary()
					_ = yym3501
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3502 := z.EncBinary()
					_ = yym3502
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3499 || yy2arr3499 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3503 := z.DecBinary()
	_ = yym3503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3504 := r.ContainerType()
		if yyct3504 == codecSelferValueTypeMap1234 {
			yyl3504 := r.ReadMapStart()
			if yyl3504 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3504, d)
			}
		} else if yyct3504 == codecSelferValueTypeArray1234 {
			yyl3504 := r.ReadArrayStart()
			if yyl3504 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3504, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3505Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3505Slc
	var yyhl3505 bool = l >= 0
	for yyj3505 := 0; ; yyj3505++ {
		if yyhl3505 {
			if yyj3505 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3505Slc = r.DecodeBytes(yys3505Slc, true, true)
		yys3505 := string(yys3505Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3505 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3506 := &x.Limits
				yym3507 := z.DecBinary()
				_ = yym3507
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3506), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3505)
		} // end switch yys3505
	} // end for yyj3505
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3508 int
	var yyb3508 bool
	var yyhl3508 bool = l >= 0
	yyj3508++
	if yyhl3508 {
		yyb3508 = yyj3508 > l
	} else {
		yyb3508 = r.CheckBreak()
	}
	if yyb3508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3509 := &x.Limits
		yym3510 := z.DecBinary()
		_ = yym3510
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3509), d)
		}
	}
	for {
		yyj3508++
		if yyhl3508 {
			yyb3508 = yyj3508 > l
		} else {
			yyb3508 = r.CheckBreak()
		}
		if yyb3508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3511 := z.EncBinary()
		_ = yym3511
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3512 := !z.EncBinary()
			yy2arr3512 := z.EncBasicHandle().StructToArray
			var yyq3512 [4]bool
			_, _, _ = yysep3512, yyq3512, yy2arr3512
			const yyr3512 bool = false
			yyq3512[0] = true
			yyq3512[1] = true
			yyq3512[2] = x.Kind != ""
			yyq3512[3] = x.APIVersion != ""
			var yynn3512 int
			if yyr3512 || yy2arr3512 {
				r.EncodeArrayStart(4)
			} else {
				yynn3512 = 0
				for _, b := range yyq3512 {
					if b {
						yynn3512++
					}
				}
				r.EncodeMapStart(yynn3512)
				yynn3512 = 0
			}
			if yyr3512 || yy2arr3512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3512[0] {
					yy3514 := &x.ObjectMeta
					yy3514.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3512[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3515 := &x.ObjectMeta
					yy3515.CodecEncodeSelf(e)
				}
			}
			if yyr3512 || yy2arr3512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3512[1] {
					yy3517 := &x.Spec
					yy3517.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3512[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3518 := &x.Spec
					yy3518.CodecEncodeSelf(e)
				}
			}
			if yyr3512 || yy2arr3512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3512[2] {
					yym3520 := z.EncBinary()
					_ = yym3520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3512[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3521 := z.EncBinary()
					_ = yym3521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3512 || yy2arr3512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3512[3] {
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3512[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3524 := z.EncBinary()
					_ = yym3524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3512 || yy2arr3512 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3525 := z.DecBinary()
	_ = yym3525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3526 := r.ContainerType()
		if yyct3526 == codecSelferValueTypeMap1234 {
			yyl3526 := r.ReadMapStart()
			if yyl3526 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3526, d)
			}
		} else if yyct3526 == codecSelferValueTypeArray1234 {
			yyl3526 := r.ReadArrayStart()
			if yyl3526 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3527Slc
	var yyhl3527 bool = l >= 0
	for yyj3527 := 0; ; yyj3527++ {
		if yyhl3527 {
			if yyj3527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3527Slc = r.DecodeBytes(yys3527Slc, true, true)
		yys3527 := string(yys3527Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3527 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3528 := &x.ObjectMeta
				yyv3528.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3529 := &x.Spec
				yyv3529.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3527)
		} // end switch yys3527
	} // end for yyj3527
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3532 int
	var yyb3532 bool
	var yyhl3532 bool = l >= 0
	yyj3532++
	if yyhl3532 {
		yyb3532 = yyj3532 > l
	} else {
		yyb3532 = r.CheckBreak()
	}
	if yyb3532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3533 := &x.ObjectMeta
		yyv3533.CodecDecodeSelf(d)
	}
	yyj3532++
	if yyhl3532 {
		yyb3532 = yyj3532 > l
	} else {
		yyb3532 = r.CheckBreak()
	}
	if yyb3532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3534 := &x.Spec
		yyv3534.CodecDecodeSelf(d)
	}
	yyj3532++
	if yyhl3532 {
		yyb3532 = yyj3532 > l
	} else {
		yyb3532 = r.CheckBreak()
	}
	if yyb3532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3532++
	if yyhl3532 {
		yyb3532 = yyj3532 > l
	} else {
		yyb3532 = r.CheckBreak()
	}
	if yyb3532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3532++
		if yyhl3532 {
			yyb3532 = yyj3532 > l
		} else {
			yyb3532 = r.CheckBreak()
		}
		if yyb3532 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3532-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3537 := z.EncBinary()
		_ = yym3537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3538 := !z.EncBinary()
			yy2arr3538 := z.EncBasicHandle().StructToArray
			var yyq3538 [4]bool
			_, _, _ = yysep3538, yyq3538, yy2arr3538
			const yyr3538 bool = false
			yyq3538[0] = true
			yyq3538[2] = x.Kind != ""
			yyq3538[3] = x.APIVersion != ""
			var yynn3538 int
			if yyr3538 || yy2arr3538 {
				r.EncodeArrayStart(4)
			} else {
				yynn3538 = 1
				for _, b := range yyq3538 {
					if b {
						yynn3538++
					}
				}
				r.EncodeMapStart(yynn3538)
				yynn3538 = 0
			}
			if yyr3538 || yy2arr3538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3538[0] {
					yy3540 := &x.ListMeta
					yym3541 := z.EncBinary()
					_ = yym3541
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3540) {
					} else {
						z.EncFallback(yy3540)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3538[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3542 := &x.ListMeta
					yym3543 := z.EncBinary()
					_ = yym3543
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3542) {
					} else {
						z.EncFallback(yy3542)
					}
				}
			}
			if yyr3538 || yy2arr3538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3545 := z.EncBinary()
					_ = yym3545
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3546 := z.EncBinary()
					_ = yym3546
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3538 || yy2arr3538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3538[2] {
					yym3548 := z.EncBinary()
					_ = yym3548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3538[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3549 := z.EncBinary()
					_ = yym3549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3538 || yy2arr3538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3538[3] {
					yym3551 := z.EncBinary()
					_ = yym3551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3538[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3552 := z.EncBinary()
					_ = yym3552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3538 || yy2arr3538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3553 := z.DecBinary()
	_ = yym3553
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3554 := r.ContainerType()
		if yyct3554 == codecSelferValueTypeMap1234 {
			yyl3554 := r.ReadMapStart()
			if yyl3554 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3554, d)
			}
		} else if yyct3554 == codecSelferValueTypeArray1234 {
			yyl3554 := r.ReadArrayStart()
			if yyl3554 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3554, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3555Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3555Slc
	var yyhl3555 bool = l >= 0
	for yyj3555 := 0; ; yyj3555++ {
		if yyhl3555 {
			if yyj3555 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3555Slc = r.DecodeBytes(yys3555Slc, true, true)
		yys3555 := string(yys3555Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3555 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3556 := &x.ListMeta
				yym3557 := z.DecBinary()
				_ = yym3557
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3556) {
				} else {
					z.DecFallback(yyv3556, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3558 := &x.Items
				yym3559 := z.DecBinary()
				_ = yym3559
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3558), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3555)
		} // end switch yys3555
	} // end for yyj3555
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3562 int
	var yyb3562 bool
	var yyhl3562 bool = l >= 0
	yyj3562++
	if yyhl3562 {
		yyb3562 = yyj3562 > l
	} else {
		yyb3562 = r.CheckBreak()
	}
	if yyb3562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3563 := &x.ListMeta
		yym3564 := z.DecBinary()
		_ = yym3564
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3563) {
		} else {
			z.DecFallback(yyv3563, false)
		}
	}
	yyj3562++
	if yyhl3562 {
		yyb3562 = yyj3562 > l
	} else {
		yyb3562 = r.CheckBreak()
	}
	if yyb3562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3565 := &x.Items
		yym3566 := z.DecBinary()
		_ = yym3566
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3565), d)
		}
	}
	yyj3562++
	if yyhl3562 {
		yyb3562 = yyj3562 > l
	} else {
		yyb3562 = r.CheckBreak()
	}
	if yyb3562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3562++
	if yyhl3562 {
		yyb3562 = yyj3562 > l
	} else {
		yyb3562 = r.CheckBreak()
	}
	if yyb3562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3562++
		if yyhl3562 {
			yyb3562 = yyj3562 > l
		} else {
			yyb3562 = r.CheckBreak()
		}
		if yyb3562 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3562-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3569 := z.EncBinary()
		_ = yym3569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3570 := !z.EncBinary()
			yy2arr3570 := z.EncBasicHandle().StructToArray
			var yyq3570 [1]bool
			_, _, _ = yysep3570, yyq3570, yy2arr3570
			const yyr3570 bool = false
			yyq3570[0] = len(x.Hard) != 0
			var yynn3570 int
			if yyr3570 || yy2arr3570 {
				r.EncodeArrayStart(1)
			} else {
				yynn3570 = 0
				for _, b := range yyq3570 {
					if b {
						yynn3570++
					}
				}
				r.EncodeMapStart(yynn3570)
				yynn3570 = 0
			}
			if yyr3570 || yy2arr3570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3570[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3570[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3570 || yy2arr3570 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3572 := z.DecBinary()
	_ = yym3572
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3573 := r.ContainerType()
		if yyct3573 == codecSelferValueTypeMap1234 {
			yyl3573 := r.ReadMapStart()
			if yyl3573 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3573, d)
			}
		} else if yyct3573 == codecSelferValueTypeArray1234 {
			yyl3573 := r.ReadArrayStart()
			if yyl3573 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3573, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3574Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3574Slc
	var yyhl3574 bool = l >= 0
	for yyj3574 := 0; ; yyj3574++ {
		if yyhl3574 {
			if yyj3574 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3574Slc = r.DecodeBytes(yys3574Slc, true, true)
		yys3574 := string(yys3574Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3574 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3575 := &x.Hard
				yyv3575.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3574)
		} // end switch yys3574
	} // end for yyj3574
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3576 int
	var yyb3576 bool
	var yyhl3576 bool = l >= 0
	yyj3576++
	if yyhl3576 {
		yyb3576 = yyj3576 > l
	} else {
		yyb3576 = r.CheckBreak()
	}
	if yyb3576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3577 := &x.Hard
		yyv3577.CodecDecodeSelf(d)
	}
	for {
		yyj3576++
		if yyhl3576 {
			yyb3576 = yyj3576 > l
		} else {
			yyb3576 = r.CheckBreak()
		}
		if yyb3576 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3576-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3578 := z.EncBinary()
		_ = yym3578
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3579 := !z.EncBinary()
			yy2arr3579 := z.EncBasicHandle().StructToArray
			var yyq3579 [2]bool
			_, _, _ = yysep3579, yyq3579, yy2arr3579
			const yyr3579 bool = false
			yyq3579[0] = len(x.Hard) != 0
			yyq3579[1] = len(x.Used) != 0
			var yynn3579 int
			if yyr3579 || yy2arr3579 {
				r.EncodeArrayStart(2)
			} else {
				yynn3579 = 0
				for _, b := range yyq3579 {
					if b {
						yynn3579++
					}
				}
				r.EncodeMapStart(yynn3579)
				yynn3579 = 0
			}
			if yyr3579 || yy2arr3579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3579[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3579[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3579 || yy2arr3579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3579[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3579[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3579 || yy2arr3579 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3582 := z.DecBinary()
	_ = yym3582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3583 := r.ContainerType()
		if yyct3583 == codecSelferValueTypeMap1234 {
			yyl3583 := r.ReadMapStart()
			if yyl3583 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3583, d)
			}
		} else if yyct3583 == codecSelferValueTypeArray1234 {
			yyl3583 := r.ReadArrayStart()
			if yyl3583 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3584Slc
	var yyhl3584 bool = l >= 0
	for yyj3584 := 0; ; yyj3584++ {
		if yyhl3584 {
			if yyj3584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3584Slc = r.DecodeBytes(yys3584Slc, true, true)
		yys3584 := string(yys3584Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3584 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3585 := &x.Hard
				yyv3585.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3586 := &x.Used
				yyv3586.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3584)
		} // end switch yys3584
	} // end for yyj3584
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3587 int
	var yyb3587 bool
	var yyhl3587 bool = l >= 0
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3588 := &x.Hard
		yyv3588.CodecDecodeSelf(d)
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3589 := &x.Used
		yyv3589.CodecDecodeSelf(d)
	}
	for {
		yyj3587++
		if yyhl3587 {
			yyb3587 = yyj3587 > l
		} else {
			yyb3587 = r.CheckBreak()
		}
		if yyb3587 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3587-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3590 := z.EncBinary()
		_ = yym3590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3591 := !z.EncBinary()
			yy2arr3591 := z.EncBasicHandle().StructToArray
			var yyq3591 [5]bool
			_, _, _ = yysep3591, yyq3591, yy2arr3591
			const yyr3591 bool = false
			yyq3591[0] = true
			yyq3591[1] = true
			yyq3591[2] = true
			yyq3591[3] = x.Kind != ""
			yyq3591[4] = x.APIVersion != ""
			var yynn3591 int
			if yyr3591 || yy2arr3591 {
				r.EncodeArrayStart(5)
			} else {
				yynn3591 = 0
				for _, b := range yyq3591 {
					if b {
						yynn3591++
					}
				}
				r.EncodeMapStart(yynn3591)
				yynn3591 = 0
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3591[0] {
					yy3593 := &x.ObjectMeta
					yy3593.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3591[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3594 := &x.ObjectMeta
					yy3594.CodecEncodeSelf(e)
				}
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3591[1] {
					yy3596 := &x.Spec
					yy3596.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3591[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3597 := &x.Spec
					yy3597.CodecEncodeSelf(e)
				}
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3591[2] {
					yy3599 := &x.Status
					yy3599.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3591[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3600 := &x.Status
					yy3600.CodecEncodeSelf(e)
				}
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3591[3] {
					yym3602 := z.EncBinary()
					_ = yym3602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3591[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3603 := z.EncBinary()
					_ = yym3603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3591[4] {
					yym3605 := z.EncBinary()
					_ = yym3605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3591[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3606 := z.EncBinary()
					_ = yym3606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3607 := z.DecBinary()
	_ = yym3607
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3608 := r.ContainerType()
		if yyct3608 == codecSelferValueTypeMap1234 {
			yyl3608 := r.ReadMapStart()
			if yyl3608 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3608, d)
			}
		} else if yyct3608 == codecSelferValueTypeArray1234 {
			yyl3608 := r.ReadArrayStart()
			if yyl3608 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3608, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3609Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3609Slc
	var yyhl3609 bool = l >= 0
	for yyj3609 := 0; ; yyj3609++ {
		if yyhl3609 {
			if yyj3609 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3609Slc = r.DecodeBytes(yys3609Slc, true, true)
		yys3609 := string(yys3609Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3609 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3610 := &x.ObjectMeta
				yyv3610.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3611 := &x.Spec
				yyv3611.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3612 := &x.Status
				yyv3612.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3609)
		} // end switch yys3609
	} // end for yyj3609
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3615 int
	var yyb3615 bool
	var yyhl3615 bool = l >= 0
	yyj3615++
	if yyhl3615 {
		yyb3615 = yyj3615 > l
	} else {
		yyb3615 = r.CheckBreak()
	}
	if yyb3615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3616 := &x.ObjectMeta
		yyv3616.CodecDecodeSelf(d)
	}
	yyj3615++
	if yyhl3615 {
		yyb3615 = yyj3615 > l
	} else {
		yyb3615 = r.CheckBreak()
	}
	if yyb3615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3617 := &x.Spec
		yyv3617.CodecDecodeSelf(d)
	}
	yyj3615++
	if yyhl3615 {
		yyb3615 = yyj3615 > l
	} else {
		yyb3615 = r.CheckBreak()
	}
	if yyb3615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3618 := &x.Status
		yyv3618.CodecDecodeSelf(d)
	}
	yyj3615++
	if yyhl3615 {
		yyb3615 = yyj3615 > l
	} else {
		yyb3615 = r.CheckBreak()
	}
	if yyb3615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3615++
	if yyhl3615 {
		yyb3615 = yyj3615 > l
	} else {
		yyb3615 = r.CheckBreak()
	}
	if yyb3615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3615++
		if yyhl3615 {
			yyb3615 = yyj3615 > l
		} else {
			yyb3615 = r.CheckBreak()
		}
		if yyb3615 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3615-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3621 := z.EncBinary()
		_ = yym3621
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3622 := !z.EncBinary()
			yy2arr3622 := z.EncBasicHandle().StructToArray
			var yyq3622 [4]bool
			_, _, _ = yysep3622, yyq3622, yy2arr3622
			const yyr3622 bool = false
			yyq3622[0] = true
			yyq3622[2] = x.Kind != ""
			yyq3622[3] = x.APIVersion != ""
			var yynn3622 int
			if yyr3622 || yy2arr3622 {
				r.EncodeArrayStart(4)
			} else {
				yynn3622 = 1
				for _, b := range yyq3622 {
					if b {
						yynn3622++
					}
				}
				r.EncodeMapStart(yynn3622)
				yynn3622 = 0
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[0] {
					yy3624 := &x.ListMeta
					yym3625 := z.EncBinary()
					_ = yym3625
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3624) {
					} else {
						z.EncFallback(yy3624)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3622[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3626 := &x.ListMeta
					yym3627 := z.EncBinary()
					_ = yym3627
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3626) {
					} else {
						z.EncFallback(yy3626)
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3629 := z.EncBinary()
					_ = yym3629
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3630 := z.EncBinary()
					_ = yym3630
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[2] {
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3633 := z.EncBinary()
					_ = yym3633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[3] {
					yym3635 := z.EncBinary()
					_ = yym3635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3636 := z.EncBinary()
					_ = yym3636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3637 := z.DecBinary()
	_ = yym3637
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3638 := r.ContainerType()
		if yyct3638 == codecSelferValueTypeMap1234 {
			yyl3638 := r.ReadMapStart()
			if yyl3638 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3638, d)
			}
		} else if yyct3638 == codecSelferValueTypeArray1234 {
			yyl3638 := r.ReadArrayStart()
			if yyl3638 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3638, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3639Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3639Slc
	var yyhl3639 bool = l >= 0
	for yyj3639 := 0; ; yyj3639++ {
		if yyhl3639 {
			if yyj3639 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3639Slc = r.DecodeBytes(yys3639Slc, true, true)
		yys3639 := string(yys3639Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3639 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3640 := &x.ListMeta
				yym3641 := z.DecBinary()
				_ = yym3641
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3640) {
				} else {
					z.DecFallback(yyv3640, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3642 := &x.Items
				yym3643 := z.DecBinary()
				_ = yym3643
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3642), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3639)
		} // end switch yys3639
	} // end for yyj3639
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3646 int
	var yyb3646 bool
	var yyhl3646 bool = l >= 0
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3647 := &x.ListMeta
		yym3648 := z.DecBinary()
		_ = yym3648
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3647) {
		} else {
			z.DecFallback(yyv3647, false)
		}
	}
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3649 := &x.Items
		yym3650 := z.DecBinary()
		_ = yym3650
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3649), d)
		}
	}
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3646++
	if yyhl3646 {
		yyb3646 = yyj3646 > l
	} else {
		yyb3646 = r.CheckBreak()
	}
	if yyb3646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3646++
		if yyhl3646 {
			yyb3646 = yyj3646 > l
		} else {
			yyb3646 = r.CheckBreak()
		}
		if yyb3646 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3646-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3653 := z.EncBinary()
		_ = yym3653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3654 := !z.EncBinary()
			yy2arr3654 := z.EncBasicHandle().StructToArray
			var yyq3654 [5]bool
			_, _, _ = yysep3654, yyq3654, yy2arr3654
			const yyr3654 bool = false
			yyq3654[0] = true
			yyq3654[1] = len(x.Data) != 0
			yyq3654[2] = x.Type != ""
			yyq3654[3] = x.Kind != ""
			yyq3654[4] = x.APIVersion != ""
			var yynn3654 int
			if yyr3654 || yy2arr3654 {
				r.EncodeArrayStart(5)
			} else {
				yynn3654 = 0
				for _, b := range yyq3654 {
					if b {
						yynn3654++
					}
				}
				r.EncodeMapStart(yynn3654)
				yynn3654 = 0
			}
			if yyr3654 || yy2arr3654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3654[0] {
					yy3656 := &x.ObjectMeta
					yy3656.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3654[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3657 := &x.ObjectMeta
					yy3657.CodecEncodeSelf(e)
				}
			}
			if yyr3654 || yy2arr3654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3654[1] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3659 := z.EncBinary()
						_ = yym3659
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3654[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3660 := z.EncBinary()
						_ = yym3660
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3654 || yy2arr3654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3654[2] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3654[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3654 || yy2arr3654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3654[3] {
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3654[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3664 := z.EncBinary()
					_ = yym3664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3654 || yy2arr3654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3654[4] {
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3654[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3667 := z.EncBinary()
					_ = yym3667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3654 || yy2arr3654 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3668 := z.DecBinary()
	_ = yym3668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3669 := r.ContainerType()
		if yyct3669 == codecSelferValueTypeMap1234 {
			yyl3669 := r.ReadMapStart()
			if yyl3669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3669, d)
			}
		} else if yyct3669 == codecSelferValueTypeArray1234 {
			yyl3669 := r.ReadArrayStart()
			if yyl3669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3670Slc
	var yyhl3670 bool = l >= 0
	for yyj3670 := 0; ; yyj3670++ {
		if yyhl3670 {
			if yyj3670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3670Slc = r.DecodeBytes(yys3670Slc, true, true)
		yys3670 := string(yys3670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3670 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3671 := &x.ObjectMeta
				yyv3671.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3672 := &x.Data
				yym3673 := z.DecBinary()
				_ = yym3673
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3672), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3670)
		} // end switch yys3670
	} // end for yyj3670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3677 int
	var yyb3677 bool
	var yyhl3677 bool = l >= 0
	yyj3677++
	if yyhl3677 {
		yyb3677 = yyj3677 > l
	} else {
		yyb3677 = r.CheckBreak()
	}
	if yyb3677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3678 := &x.ObjectMeta
		yyv3678.CodecDecodeSelf(d)
	}
	yyj3677++
	if yyhl3677 {
		yyb3677 = yyj3677 > l
	} else {
		yyb3677 = r.CheckBreak()
	}
	if yyb3677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3679 := &x.Data
		yym3680 := z.DecBinary()
		_ = yym3680
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3679), d)
		}
	}
	yyj3677++
	if yyhl3677 {
		yyb3677 = yyj3677 > l
	} else {
		yyb3677 = r.CheckBreak()
	}
	if yyb3677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	yyj3677++
	if yyhl3677 {
		yyb3677 = yyj3677 > l
	} else {
		yyb3677 = r.CheckBreak()
	}
	if yyb3677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3677++
	if yyhl3677 {
		yyb3677 = yyj3677 > l
	} else {
		yyb3677 = r.CheckBreak()
	}
	if yyb3677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3677++
		if yyhl3677 {
			yyb3677 = yyj3677 > l
		} else {
			yyb3677 = r.CheckBreak()
		}
		if yyb3677 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3677-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3684 := z.EncBinary()
	_ = yym3684
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3685 := z.DecBinary()
	_ = yym3685
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3686 := z.EncBinary()
		_ = yym3686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3687 := !z.EncBinary()
			yy2arr3687 := z.EncBasicHandle().StructToArray
			var yyq3687 [4]bool
			_, _, _ = yysep3687, yyq3687, yy2arr3687
			const yyr3687 bool = false
			yyq3687[0] = true
			yyq3687[2] = x.Kind != ""
			yyq3687[3] = x.APIVersion != ""
			var yynn3687 int
			if yyr3687 || yy2arr3687 {
				r.EncodeArrayStart(4)
			} else {
				yynn3687 = 1
				for _, b := range yyq3687 {
					if b {
						yynn3687++
					}
				}
				r.EncodeMapStart(yynn3687)
				yynn3687 = 0
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[0] {
					yy3689 := &x.ListMeta
					yym3690 := z.EncBinary()
					_ = yym3690
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3689) {
					} else {
						z.EncFallback(yy3689)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3687[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3691 := &x.ListMeta
					yym3692 := z.EncBinary()
					_ = yym3692
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3691) {
					} else {
						z.EncFallback(yy3691)
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3694 := z.EncBinary()
					_ = yym3694
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3695 := z.EncBinary()
					_ = yym3695
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[2] {
					yym3697 := z.EncBinary()
					_ = yym3697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3687[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3698 := z.EncBinary()
					_ = yym3698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[3] {
					yym3700 := z.EncBinary()
					_ = yym3700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3687[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3701 := z.EncBinary()
					_ = yym3701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3702 := z.DecBinary()
	_ = yym3702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3703 := r.ContainerType()
		if yyct3703 == codecSelferValueTypeMap1234 {
			yyl3703 := r.ReadMapStart()
			if yyl3703 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3703, d)
			}
		} else if yyct3703 == codecSelferValueTypeArray1234 {
			yyl3703 := r.ReadArrayStart()
			if yyl3703 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3704Slc
	var yyhl3704 bool = l >= 0
	for yyj3704 := 0; ; yyj3704++ {
		if yyhl3704 {
			if yyj3704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3704Slc = r.DecodeBytes(yys3704Slc, true, true)
		yys3704 := string(yys3704Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3704 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3705 := &x.ListMeta
				yym3706 := z.DecBinary()
				_ = yym3706
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3705) {
				} else {
					z.DecFallback(yyv3705, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3707 := &x.Items
				yym3708 := z.DecBinary()
				_ = yym3708
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3707), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3704)
		} // end switch yys3704
	} // end for yyj3704
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3711 int
	var yyb3711 bool
	var yyhl3711 bool = l >= 0
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3712 := &x.ListMeta
		yym3713 := z.DecBinary()
		_ = yym3713
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3712) {
		} else {
			z.DecFallback(yyv3712, false)
		}
	}
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3714 := &x.Items
		yym3715 := z.DecBinary()
		_ = yym3715
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3714), d)
		}
	}
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3711++
		if yyhl3711 {
			yyb3711 = yyj3711 > l
		} else {
			yyb3711 = r.CheckBreak()
		}
		if yyb3711 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3711-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3718 := z.EncBinary()
		_ = yym3718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3719 := !z.EncBinary()
			yy2arr3719 := z.EncBasicHandle().StructToArray
			var yyq3719 [4]bool
			_, _, _ = yysep3719, yyq3719, yy2arr3719
			const yyr3719 bool = false
			yyq3719[0] = true
			yyq3719[1] = len(x.Data) != 0
			yyq3719[2] = x.Kind != ""
			yyq3719[3] = x.APIVersion != ""
			var yynn3719 int
			if yyr3719 || yy2arr3719 {
				r.EncodeArrayStart(4)
			} else {
				yynn3719 = 0
				for _, b := range yyq3719 {
					if b {
						yynn3719++
					}
				}
				r.EncodeMapStart(yynn3719)
				yynn3719 = 0
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[0] {
					yy3721 := &x.ObjectMeta
					yy3721.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3719[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3722 := &x.ObjectMeta
					yy3722.CodecEncodeSelf(e)
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[1] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3724 := z.EncBinary()
						_ = yym3724
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3719[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3725 := z.EncBinary()
						_ = yym3725
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[2] {
					yym3727 := z.EncBinary()
					_ = yym3727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3728 := z.EncBinary()
					_ = yym3728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[3] {
					yym3730 := z.EncBinary()
					_ = yym3730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3719[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3731 := z.EncBinary()
					_ = yym3731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3732 := z.DecBinary()
	_ = yym3732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3733 := r.ContainerType()
		if yyct3733 == codecSelferValueTypeMap1234 {
			yyl3733 := r.ReadMapStart()
			if yyl3733 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3733, d)
			}
		} else if yyct3733 == codecSelferValueTypeArray1234 {
			yyl3733 := r.ReadArrayStart()
			if yyl3733 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3734Slc
	var yyhl3734 bool = l >= 0
	for yyj3734 := 0; ; yyj3734++ {
		if yyhl3734 {
			if yyj3734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3734Slc = r.DecodeBytes(yys3734Slc, true, true)
		yys3734 := string(yys3734Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3734 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3735 := &x.ObjectMeta
				yyv3735.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3736 := &x.Data
				yym3737 := z.DecBinary()
				_ = yym3737
				if false {
				} else {
					z.F.DecMapStringStringX(yyv3736, false, d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3734)
		} // end switch yys3734
	} // end for yyj3734
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3740 int
	var yyb3740 bool
	var yyhl3740 bool = l >= 0
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3741 := &x.ObjectMeta
		yyv3741.CodecDecodeSelf(d)
	}
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3742 := &x.Data
		yym3743 := z.DecBinary()
		_ = yym3743
		if false {
		} else {
			z.F.DecMapStringStringX(yyv3742, false, d)
		}
	}
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3740++
		if yyhl3740 {
			yyb3740 = yyj3740 > l
		} else {
			yyb3740 = r.CheckBreak()
		}
		if yyb3740 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3740-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3746 := z.EncBinary()
		_ = yym3746
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3747 := !z.EncBinary()
			yy2arr3747 := z.EncBasicHandle().StructToArray
			var yyq3747 [4]bool
			_, _, _ = yysep3747, yyq3747, yy2arr3747
			const yyr3747 bool = false
			yyq3747[0] = true
			yyq3747[1] = len(x.Items) != 0
			yyq3747[2] = x.Kind != ""
			yyq3747[3] = x.APIVersion != ""
			var yynn3747 int
			if yyr3747 || yy2arr3747 {
				r.EncodeArrayStart(4)
			} else {
				yynn3747 = 0
				for _, b := range yyq3747 {
					if b {
						yynn3747++
					}
				}
				r.EncodeMapStart(yynn3747)
				yynn3747 = 0
			}
			if yyr3747 || yy2arr3747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3747[0] {
					yy3749 := &x.ListMeta
					yym3750 := z.EncBinary()
					_ = yym3750
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3749) {
					} else {
						z.EncFallback(yy3749)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3747[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3751 := &x.ListMeta
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3751) {
					} else {
						z.EncFallback(yy3751)
					}
				}
			}
			if yyr3747 || yy2arr3747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3747[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3754 := z.EncBinary()
						_ = yym3754
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3747[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3755 := z.EncBinary()
						_ = yym3755
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				}
			}
			if yyr3747 || yy2arr3747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3747[2] {
					yym3757 := z.EncBinary()
					_ = yym3757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3747[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3758 := z.EncBinary()
					_ = yym3758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3747 || yy2arr3747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3747[3] {
					yym3760 := z.EncBinary()
					_ = yym3760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3747[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3761 := z.EncBinary()
					_ = yym3761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3747 || yy2arr3747 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3762 := z.DecBinary()
	_ = yym3762
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3763 := r.ContainerType()
		if yyct3763 == codecSelferValueTypeMap1234 {
			yyl3763 := r.ReadMapStart()
			if yyl3763 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3763, d)
			}
		} else if yyct3763 == codecSelferValueTypeArray1234 {
			yyl3763 := r.ReadArrayStart()
			if yyl3763 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3763, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3764Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3764Slc
	var yyhl3764 bool = l >= 0
	for yyj3764 := 0; ; yyj3764++ {
		if yyhl3764 {
			if yyj3764 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3764Slc = r.DecodeBytes(yys3764Slc, true, true)
		yys3764 := string(yys3764Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3764 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3765 := &x.ListMeta
				yym3766 := z.DecBinary()
				_ = yym3766
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3765) {
				} else {
					z.DecFallback(yyv3765, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3767 := &x.Items
				yym3768 := z.DecBinary()
				_ = yym3768
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv3767), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3764)
		} // end switch yys3764
	} // end for yyj3764
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3771 int
	var yyb3771 bool
	var yyhl3771 bool = l >= 0
	yyj3771++
	if yyhl3771 {
		yyb3771 = yyj3771 > l
	} else {
		yyb3771 = r.CheckBreak()
	}
	if yyb3771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3772 := &x.ListMeta
		yym3773 := z.DecBinary()
		_ = yym3773
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3772) {
		} else {
			z.DecFallback(yyv3772, false)
		}
	}
	yyj3771++
	if yyhl3771 {
		yyb3771 = yyj3771 > l
	} else {
		yyb3771 = r.CheckBreak()
	}
	if yyb3771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3774 := &x.Items
		yym3775 := z.DecBinary()
		_ = yym3775
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv3774), d)
		}
	}
	yyj3771++
	if yyhl3771 {
		yyb3771 = yyj3771 > l
	} else {
		yyb3771 = r.CheckBreak()
	}
	if yyb3771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3771++
	if yyhl3771 {
		yyb3771 = yyj3771 > l
	} else {
		yyb3771 = r.CheckBreak()
	}
	if yyb3771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3771++
		if yyhl3771 {
			yyb3771 = yyj3771 > l
		} else {
			yyb3771 = r.CheckBreak()
		}
		if yyb3771 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3771-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3778 := z.EncBinary()
	_ = yym3778
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3779 := z.DecBinary()
	_ = yym3779
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3780 := z.EncBinary()
		_ = yym3780
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3781 := !z.EncBinary()
			yy2arr3781 := z.EncBasicHandle().StructToArray
			var yyq3781 [4]bool
			_, _, _ = yysep3781, yyq3781, yy2arr3781
			const yyr3781 bool = false
			yyq3781[2] = x.Message != ""
			yyq3781[3] = x.Error != ""
			var yynn3781 int
			if yyr3781 || yy2arr3781 {
				r.EncodeArrayStart(4)
			} else {
				yynn3781 = 2
				for _, b := range yyq3781 {
					if b {
						yynn3781++
					}
				}
				r.EncodeMapStart(yynn3781)
				yynn3781 = 0
			}
			if yyr3781 || yy2arr3781 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3781 || yy2arr3781 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3781 || yy2arr3781 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3781[2] {
					yym3785 := z.EncBinary()
					_ = yym3785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3781[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3781 || yy2arr3781 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3781[3] {
					yym3788 := z.EncBinary()
					_ = yym3788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3781[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3789 := z.EncBinary()
					_ = yym3789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3781 || yy2arr3781 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3790 := z.DecBinary()
	_ = yym3790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3791 := r.ContainerType()
		if yyct3791 == codecSelferValueTypeMap1234 {
			yyl3791 := r.ReadMapStart()
			if yyl3791 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3791, d)
			}
		} else if yyct3791 == codecSelferValueTypeArray1234 {
			yyl3791 := r.ReadArrayStart()
			if yyl3791 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3791, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3792Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3792Slc
	var yyhl3792 bool = l >= 0
	for yyj3792 := 0; ; yyj3792++ {
		if yyhl3792 {
			if yyj3792 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3792Slc = r.DecodeBytes(yys3792Slc, true, true)
		yys3792 := string(yys3792Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3792 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3792)
		} // end switch yys3792
	} // end for yyj3792
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3797 int
	var yyb3797 bool
	var yyhl3797 bool = l >= 0
	yyj3797++
	if yyhl3797 {
		yyb3797 = yyj3797 > l
	} else {
		yyb3797 = r.CheckBreak()
	}
	if yyb3797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3797++
	if yyhl3797 {
		yyb3797 = yyj3797 > l
	} else {
		yyb3797 = r.CheckBreak()
	}
	if yyb3797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3797++
	if yyhl3797 {
		yyb3797 = yyj3797 > l
	} else {
		yyb3797 = r.CheckBreak()
	}
	if yyb3797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3797++
	if yyhl3797 {
		yyb3797 = yyj3797 > l
	} else {
		yyb3797 = r.CheckBreak()
	}
	if yyb3797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3797++
		if yyhl3797 {
			yyb3797 = yyj3797 > l
		} else {
			yyb3797 = r.CheckBreak()
		}
		if yyb3797 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3797-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3802 := z.EncBinary()
		_ = yym3802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3803 := !z.EncBinary()
			yy2arr3803 := z.EncBasicHandle().StructToArray
			var yyq3803 [4]bool
			_, _, _ = yysep3803, yyq3803, yy2arr3803
			const yyr3803 bool = false
			yyq3803[0] = true
			yyq3803[1] = len(x.Conditions) != 0
			yyq3803[2] = x.Kind != ""
			yyq3803[3] = x.APIVersion != ""
			var yynn3803 int
			if yyr3803 || yy2arr3803 {
				r.EncodeArrayStart(4)
			} else {
				yynn3803 = 0
				for _, b := range yyq3803 {
					if b {
						yynn3803++
					}
				}
				r.EncodeMapStart(yynn3803)
				yynn3803 = 0
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3803[0] {
					yy3805 := &x.ObjectMeta
					yy3805.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3803[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3806 := &x.ObjectMeta
					yy3806.CodecEncodeSelf(e)
				}
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3803[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3808 := z.EncBinary()
						_ = yym3808
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3803[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3809 := z.EncBinary()
						_ = yym3809
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3803[2] {
					yym3811 := z.EncBinary()
					_ = yym3811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3803[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3812 := z.EncBinary()
					_ = yym3812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3803[3] {
					yym3814 := z.EncBinary()
					_ = yym3814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3803[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3815 := z.EncBinary()
					_ = yym3815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3816 := z.DecBinary()
	_ = yym3816
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3817 := r.ContainerType()
		if yyct3817 == codecSelferValueTypeMap1234 {
			yyl3817 := r.ReadMapStart()
			if yyl3817 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3817, d)
			}
		} else if yyct3817 == codecSelferValueTypeArray1234 {
			yyl3817 := r.ReadArrayStart()
			if yyl3817 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3817, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3818Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3818Slc
	var yyhl3818 bool = l >= 0
	for yyj3818 := 0; ; yyj3818++ {
		if yyhl3818 {
			if yyj3818 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3818Slc = r.DecodeBytes(yys3818Slc, true, true)
		yys3818 := string(yys3818Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3818 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3819 := &x.ObjectMeta
				yyv3819.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3820 := &x.Conditions
				yym3821 := z.DecBinary()
				_ = yym3821
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3820), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3818)
		} // end switch yys3818
	} // end for yyj3818
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3824 int
	var yyb3824 bool
	var yyhl3824 bool = l >= 0
	yyj3824++
	if yyhl3824 {
		yyb3824 = yyj3824 > l
	} else {
		yyb3824 = r.CheckBreak()
	}
	if yyb3824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3825 := &x.ObjectMeta
		yyv3825.CodecDecodeSelf(d)
	}
	yyj3824++
	if yyhl3824 {
		yyb3824 = yyj3824 > l
	} else {
		yyb3824 = r.CheckBreak()
	}
	if yyb3824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3826 := &x.Conditions
		yym3827 := z.DecBinary()
		_ = yym3827
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3826), d)
		}
	}
	yyj3824++
	if yyhl3824 {
		yyb3824 = yyj3824 > l
	} else {
		yyb3824 = r.CheckBreak()
	}
	if yyb3824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3824++
	if yyhl3824 {
		yyb3824 = yyj3824 > l
	} else {
		yyb3824 = r.CheckBreak()
	}
	if yyb3824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3824++
		if yyhl3824 {
			yyb3824 = yyj3824 > l
		} else {
			yyb3824 = r.CheckBreak()
		}
		if yyb3824 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3824-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3830 := z.EncBinary()
		_ = yym3830
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3831 := !z.EncBinary()
			yy2arr3831 := z.EncBasicHandle().StructToArray
			var yyq3831 [4]bool
			_, _, _ = yysep3831, yyq3831, yy2arr3831
			const yyr3831 bool = false
			yyq3831[0] = true
			yyq3831[2] = x.Kind != ""
			yyq3831[3] = x.APIVersion != ""
			var yynn3831 int
			if yyr3831 || yy2arr3831 {
				r.EncodeArrayStart(4)
			} else {
				yynn3831 = 1
				for _, b := range yyq3831 {
					if b {
						yynn3831++
					}
				}
				r.EncodeMapStart(yynn3831)
				yynn3831 = 0
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3831[0] {
					yy3833 := &x.ListMeta
					yym3834 := z.EncBinary()
					_ = yym3834
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3833) {
					} else {
						z.EncFallback(yy3833)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3831[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3835 := &x.ListMeta
					yym3836 := z.EncBinary()
					_ = yym3836
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3835) {
					} else {
						z.EncFallback(yy3835)
					}
				}
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3838 := z.EncBinary()
					_ = yym3838
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3839 := z.EncBinary()
					_ = yym3839
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3831[2] {
					yym3841 := z.EncBinary()
					_ = yym3841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3831[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3842 := z.EncBinary()
					_ = yym3842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3831[3] {
					yym3844 := z.EncBinary()
					_ = yym3844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3831[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3845 := z.EncBinary()
					_ = yym3845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3846 := z.DecBinary()
	_ = yym3846
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3847 := r.ContainerType()
		if yyct3847 == codecSelferValueTypeMap1234 {
			yyl3847 := r.ReadMapStart()
			if yyl3847 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3847, d)
			}
		} else if yyct3847 == codecSelferValueTypeArray1234 {
			yyl3847 := r.ReadArrayStart()
			if yyl3847 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3847, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3848Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3848Slc
	var yyhl3848 bool = l >= 0
	for yyj3848 := 0; ; yyj3848++ {
		if yyhl3848 {
			if yyj3848 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3848Slc = r.DecodeBytes(yys3848Slc, true, true)
		yys3848 := string(yys3848Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3848 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3849 := &x.ListMeta
				yym3850 := z.DecBinary()
				_ = yym3850
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3849) {
				} else {
					z.DecFallback(yyv3849, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3851 := &x.Items
				yym3852 := z.DecBinary()
				_ = yym3852
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3851), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3848)
		} // end switch yys3848
	} // end for yyj3848
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3855 int
	var yyb3855 bool
	var yyhl3855 bool = l >= 0
	yyj3855++
	if yyhl3855 {
		yyb3855 = yyj3855 > l
	} else {
		yyb3855 = r.CheckBreak()
	}
	if yyb3855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3856 := &x.ListMeta
		yym3857 := z.DecBinary()
		_ = yym3857
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3856) {
		} else {
			z.DecFallback(yyv3856, false)
		}
	}
	yyj3855++
	if yyhl3855 {
		yyb3855 = yyj3855 > l
	} else {
		yyb3855 = r.CheckBreak()
	}
	if yyb3855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3858 := &x.Items
		yym3859 := z.DecBinary()
		_ = yym3859
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3858), d)
		}
	}
	yyj3855++
	if yyhl3855 {
		yyb3855 = yyj3855 > l
	} else {
		yyb3855 = r.CheckBreak()
	}
	if yyb3855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3855++
	if yyhl3855 {
		yyb3855 = yyj3855 > l
	} else {
		yyb3855 = r.CheckBreak()
	}
	if yyb3855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3855++
		if yyhl3855 {
			yyb3855 = yyj3855 > l
		} else {
			yyb3855 = r.CheckBreak()
		}
		if yyb3855 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3855-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3862 := z.EncBinary()
		_ = yym3862
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3863 := !z.EncBinary()
			yy2arr3863 := z.EncBasicHandle().StructToArray
			var yyq3863 [1]bool
			_, _, _ = yysep3863, yyq3863, yy2arr3863
			const yyr3863 bool = false
			yyq3863[0] = len(x.Items) != 0
			var yynn3863 int
			if yyr3863 || yy2arr3863 {
				r.EncodeArrayStart(1)
			} else {
				yynn3863 = 0
				for _, b := range yyq3863 {
					if b {
						yynn3863++
					}
				}
				r.EncodeMapStart(yynn3863)
				yynn3863 = 0
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3863[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3865 := z.EncBinary()
						_ = yym3865
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3863[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3866 := z.EncBinary()
						_ = yym3866
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3867 := z.DecBinary()
	_ = yym3867
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3868 := r.ContainerType()
		if yyct3868 == codecSelferValueTypeMap1234 {
			yyl3868 := r.ReadMapStart()
			if yyl3868 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3868, d)
			}
		} else if yyct3868 == codecSelferValueTypeArray1234 {
			yyl3868 := r.ReadArrayStart()
			if yyl3868 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3868, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3869Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3869Slc
	var yyhl3869 bool = l >= 0
	for yyj3869 := 0; ; yyj3869++ {
		if yyhl3869 {
			if yyj3869 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3869Slc = r.DecodeBytes(yys3869Slc, true, true)
		yys3869 := string(yys3869Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3869 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3870 := &x.Items
				yym3871 := z.DecBinary()
				_ = yym3871
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3870), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3869)
		} // end switch yys3869
	} // end for yyj3869
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3872 int
	var yyb3872 bool
	var yyhl3872 bool = l >= 0
	yyj3872++
	if yyhl3872 {
		yyb3872 = yyj3872 > l
	} else {
		yyb3872 = r.CheckBreak()
	}
	if yyb3872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3873 := &x.Items
		yym3874 := z.DecBinary()
		_ = yym3874
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3873), d)
		}
	}
	for {
		yyj3872++
		if yyhl3872 {
			yyb3872 = yyj3872 > l
		} else {
			yyb3872 = r.CheckBreak()
		}
		if yyb3872 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3872-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3875 := z.EncBinary()
		_ = yym3875
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3876 := !z.EncBinary()
			yy2arr3876 := z.EncBasicHandle().StructToArray
			var yyq3876 [2]bool
			_, _, _ = yysep3876, yyq3876, yy2arr3876
			const yyr3876 bool = false
			var yynn3876 int
			if yyr3876 || yy2arr3876 {
				r.EncodeArrayStart(2)
			} else {
				yynn3876 = 2
				for _, b := range yyq3876 {
					if b {
						yynn3876++
					}
				}
				r.EncodeMapStart(yynn3876)
				yynn3876 = 0
			}
			if yyr3876 || yy2arr3876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3878 := z.EncBinary()
				_ = yym3878
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3879 := z.EncBinary()
				_ = yym3879
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3876 || yy2arr3876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3881 := &x.FieldRef
				yy3881.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3882 := &x.FieldRef
				yy3882.CodecEncodeSelf(e)
			}
			if yyr3876 || yy2arr3876 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3883 := z.DecBinary()
	_ = yym3883
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3884 := r.ContainerType()
		if yyct3884 == codecSelferValueTypeMap1234 {
			yyl3884 := r.ReadMapStart()
			if yyl3884 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3884, d)
			}
		} else if yyct3884 == codecSelferValueTypeArray1234 {
			yyl3884 := r.ReadArrayStart()
			if yyl3884 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3884, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3885Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3885Slc
	var yyhl3885 bool = l >= 0
	for yyj3885 := 0; ; yyj3885++ {
		if yyhl3885 {
			if yyj3885 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3885Slc = r.DecodeBytes(yys3885Slc, true, true)
		yys3885 := string(yys3885Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3885 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3887 := &x.FieldRef
				yyv3887.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3885)
		} // end switch yys3885
	} // end for yyj3885
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3888 int
	var yyb3888 bool
	var yyhl3888 bool = l >= 0
	yyj3888++
	if yyhl3888 {
		yyb3888 = yyj3888 > l
	} else {
		yyb3888 = r.CheckBreak()
	}
	if yyb3888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3888++
	if yyhl3888 {
		yyb3888 = yyj3888 > l
	} else {
		yyb3888 = r.CheckBreak()
	}
	if yyb3888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3890 := &x.FieldRef
		yyv3890.CodecDecodeSelf(d)
	}
	for {
		yyj3888++
		if yyhl3888 {
			yyb3888 = yyj3888 > l
		} else {
			yyb3888 = r.CheckBreak()
		}
		if yyb3888 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3888-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3891 := z.EncBinary()
		_ = yym3891
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3892 := !z.EncBinary()
			yy2arr3892 := z.EncBasicHandle().StructToArray
			var yyq3892 [5]bool
			_, _, _ = yysep3892, yyq3892, yy2arr3892
			const yyr3892 bool = false
			yyq3892[0] = x.Capabilities != nil
			yyq3892[1] = x.Privileged != nil
			yyq3892[2] = x.SELinuxOptions != nil
			yyq3892[3] = x.RunAsUser != nil
			yyq3892[4] = x.RunAsNonRoot != nil
			var yynn3892 int
			if yyr3892 || yy2arr3892 {
				r.EncodeArrayStart(5)
			} else {
				yynn3892 = 0
				for _, b := range yyq3892 {
					if b {
						yynn3892++
					}
				}
				r.EncodeMapStart(yynn3892)
				yynn3892 = 0
			}
			if yyr3892 || yy2arr3892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3892[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3892[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3892 || yy2arr3892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3892[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3895 := *x.Privileged
						yym3896 := z.EncBinary()
						_ = yym3896
						if false {
						} else {
							r.EncodeBool(bool(yy3895))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3892[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3897 := *x.Privileged
						yym3898 := z.EncBinary()
						_ = yym3898
						if false {
						} else {
							r.EncodeBool(bool(yy3897))
						}
					}
				}
			}
			if yyr3892 || yy2arr3892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3892[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3892[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3892 || yy2arr3892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3892[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3901 := *x.RunAsUser
						yym3902 := z.EncBinary()
						_ = yym3902
						if false {
						} else {
							r.EncodeInt(int64(yy3901))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3892[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3903 := *x.RunAsUser
						yym3904 := z.EncBinary()
						_ = yym3904
						if false {
						} else {
							r.EncodeInt(int64(yy3903))
						}
					}
				}
			}
			if yyr3892 || yy2arr3892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3892[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3906 := *x.RunAsNonRoot
						yym3907 := z.EncBinary()
						_ = yym3907
						if false {
						} else {
							r.EncodeBool(bool(yy3906))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3892[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3908 := *x.RunAsNonRoot
						yym3909 := z.EncBinary()
						_ = yym3909
						if false {
						} else {
							r.EncodeBool(bool(yy3908))
						}
					}
				}
			}
			if yyr3892 || yy2arr3892 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3910 := z.DecBinary()
	_ = yym3910
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3911 := r.ContainerType()
		if yyct3911 == codecSelferValueTypeMap1234 {
			yyl3911 := r.ReadMapStart()
			if yyl3911 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3911, d)
			}
		} else if yyct3911 == codecSelferValueTypeArray1234 {
			yyl3911 := r.ReadArrayStart()
			if yyl3911 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3911, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3912Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3912Slc
	var yyhl3912 bool = l >= 0
	for yyj3912 := 0; ; yyj3912++ {
		if yyhl3912 {
			if yyj3912 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3912Slc = r.DecodeBytes(yys3912Slc, true, true)
		yys3912 := string(yys3912Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3912 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3915 := z.DecBinary()
				_ = yym3915
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3918 := z.DecBinary()
				_ = yym3918
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3920 := z.DecBinary()
				_ = yym3920
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3912)
		} // end switch yys3912
	} // end for yyj3912
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3921 int
	var yyb3921 bool
	var yyhl3921 bool = l >= 0
	yyj3921++
	if yyhl3921 {
		yyb3921 = yyj3921 > l
	} else {
		yyb3921 = r.CheckBreak()
	}
	if yyb3921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3921++
	if yyhl3921 {
		yyb3921 = yyj3921 > l
	} else {
		yyb3921 = r.CheckBreak()
	}
	if yyb3921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3924 := z.DecBinary()
		_ = yym3924
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3921++
	if yyhl3921 {
		yyb3921 = yyj3921 > l
	} else {
		yyb3921 = r.CheckBreak()
	}
	if yyb3921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3921++
	if yyhl3921 {
		yyb3921 = yyj3921 > l
	} else {
		yyb3921 = r.CheckBreak()
	}
	if yyb3921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3927 := z.DecBinary()
		_ = yym3927
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3921++
	if yyhl3921 {
		yyb3921 = yyj3921 > l
	} else {
		yyb3921 = r.CheckBreak()
	}
	if yyb3921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3929 := z.DecBinary()
		_ = yym3929
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3921++
		if yyhl3921 {
			yyb3921 = yyj3921 > l
		} else {
			yyb3921 = r.CheckBreak()
		}
		if yyb3921 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3921-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3930 := z.EncBinary()
		_ = yym3930
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3931 := !z.EncBinary()
			yy2arr3931 := z.EncBasicHandle().StructToArray
			var yyq3931 [4]bool
			_, _, _ = yysep3931, yyq3931, yy2arr3931
			const yyr3931 bool = false
			yyq3931[0] = x.User != ""
			yyq3931[1] = x.Role != ""
			yyq3931[2] = x.Type != ""
			yyq3931[3] = x.Level != ""
			var yynn3931 int
			if yyr3931 || yy2arr3931 {
				r.EncodeArrayStart(4)
			} else {
				yynn3931 = 0
				for _, b := range yyq3931 {
					if b {
						yynn3931++
					}
				}
				r.EncodeMapStart(yynn3931)
				yynn3931 = 0
			}
			if yyr3931 || yy2arr3931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3931[0] {
					yym3933 := z.EncBinary()
					_ = yym3933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3931[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3934 := z.EncBinary()
					_ = yym3934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3931 || yy2arr3931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3931[1] {
					yym3936 := z.EncBinary()
					_ = yym3936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3931[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3937 := z.EncBinary()
					_ = yym3937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3931 || yy2arr3931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3931[2] {
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3931[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3940 := z.EncBinary()
					_ = yym3940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3931 || yy2arr3931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3931[3] {
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3931[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3943 := z.EncBinary()
					_ = yym3943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3931 || yy2arr3931 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3944 := z.DecBinary()
	_ = yym3944
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3945 := r.ContainerType()
		if yyct3945 == codecSelferValueTypeMap1234 {
			yyl3945 := r.ReadMapStart()
			if yyl3945 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3945, d)
			}
		} else if yyct3945 == codecSelferValueTypeArray1234 {
			yyl3945 := r.ReadArrayStart()
			if yyl3945 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3945, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3946Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3946Slc
	var yyhl3946 bool = l >= 0
	for yyj3946 := 0; ; yyj3946++ {
		if yyhl3946 {
			if yyj3946 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3946Slc = r.DecodeBytes(yys3946Slc, true, true)
		yys3946 := string(yys3946Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3946 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3946)
		} // end switch yys3946
	} // end for yyj3946
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3951 int
	var yyb3951 bool
	var yyhl3951 bool = l >= 0
	yyj3951++
	if yyhl3951 {
		yyb3951 = yyj3951 > l
	} else {
		yyb3951 = r.CheckBreak()
	}
	if yyb3951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3951++
	if yyhl3951 {
		yyb3951 = yyj3951 > l
	} else {
		yyb3951 = r.CheckBreak()
	}
	if yyb3951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3951++
	if yyhl3951 {
		yyb3951 = yyj3951 > l
	} else {
		yyb3951 = r.CheckBreak()
	}
	if yyb3951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3951++
	if yyhl3951 {
		yyb3951 = yyj3951 > l
	} else {
		yyb3951 = r.CheckBreak()
	}
	if yyb3951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3951++
		if yyhl3951 {
			yyb3951 = yyj3951 > l
		} else {
			yyb3951 = r.CheckBreak()
		}
		if yyb3951 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3951-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3956 := z.EncBinary()
		_ = yym3956
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3957 := !z.EncBinary()
			yy2arr3957 := z.EncBasicHandle().StructToArray
			var yyq3957 [5]bool
			_, _, _ = yysep3957, yyq3957, yy2arr3957
			const yyr3957 bool = false
			yyq3957[0] = true
			yyq3957[3] = x.Kind != ""
			yyq3957[4] = x.APIVersion != ""
			var yynn3957 int
			if yyr3957 || yy2arr3957 {
				r.EncodeArrayStart(5)
			} else {
				yynn3957 = 2
				for _, b := range yyq3957 {
					if b {
						yynn3957++
					}
				}
				r.EncodeMapStart(yynn3957)
				yynn3957 = 0
			}
			if yyr3957 || yy2arr3957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3957[0] {
					yy3959 := &x.ObjectMeta
					yy3959.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3957[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3960 := &x.ObjectMeta
					yy3960.CodecEncodeSelf(e)
				}
			}
			if yyr3957 || yy2arr3957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3962 := z.EncBinary()
				_ = yym3962
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3963 := z.EncBinary()
				_ = yym3963
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3957 || yy2arr3957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3965 := z.EncBinary()
					_ = yym3965
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3966 := z.EncBinary()
					_ = yym3966
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3957 || yy2arr3957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3957[3] {
					yym3968 := z.EncBinary()
					_ = yym3968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3957[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3969 := z.EncBinary()
					_ = yym3969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3957 || yy2arr3957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3957[4] {
					yym3971 := z.EncBinary()
					_ = yym3971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3957[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3972 := z.EncBinary()
					_ = yym3972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3957 || yy2arr3957 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3973 := z.DecBinary()
	_ = yym3973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3974 := r.ContainerType()
		if yyct3974 == codecSelferValueTypeMap1234 {
			yyl3974 := r.ReadMapStart()
			if yyl3974 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3974, d)
			}
		} else if yyct3974 == codecSelferValueTypeArray1234 {
			yyl3974 := r.ReadArrayStart()
			if yyl3974 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3974, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3975Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3975Slc
	var yyhl3975 bool = l >= 0
	for yyj3975 := 0; ; yyj3975++ {
		if yyhl3975 {
			if yyj3975 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3975Slc = r.DecodeBytes(yys3975Slc, true, true)
		yys3975 := string(yys3975Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3975 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3976 := &x.ObjectMeta
				yyv3976.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3978 := &x.Data
				yym3979 := z.DecBinary()
				_ = yym3979
				if false {
				} else {
					*yyv3978 = r.DecodeBytes(*(*[]byte)(yyv3978), false, false)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3975)
		} // end switch yys3975
	} // end for yyj3975
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3982 int
	var yyb3982 bool
	var yyhl3982 bool = l >= 0
	yyj3982++
	if yyhl3982 {
		yyb3982 = yyj3982 > l
	} else {
		yyb3982 = r.CheckBreak()
	}
	if yyb3982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3983 := &x.ObjectMeta
		yyv3983.CodecDecodeSelf(d)
	}
	yyj3982++
	if yyhl3982 {
		yyb3982 = yyj3982 > l
	} else {
		yyb3982 = r.CheckBreak()
	}
	if yyb3982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3982++
	if yyhl3982 {
		yyb3982 = yyj3982 > l
	} else {
		yyb3982 = r.CheckBreak()
	}
	if yyb3982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3985 := &x.Data
		yym3986 := z.DecBinary()
		_ = yym3986
		if false {
		} else {
			*yyv3985 = r.DecodeBytes(*(*[]byte)(yyv3985), false, false)
		}
	}
	yyj3982++
	if yyhl3982 {
		yyb3982 = yyj3982 > l
	} else {
		yyb3982 = r.CheckBreak()
	}
	if yyb3982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3982++
	if yyhl3982 {
		yyb3982 = yyj3982 > l
	} else {
		yyb3982 = r.CheckBreak()
	}
	if yyb3982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3982++
		if yyhl3982 {
			yyb3982 = yyj3982 > l
		} else {
			yyb3982 = r.CheckBreak()
		}
		if yyb3982 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3982-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3989 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3989.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3990 := *v
	yyh3990, yyl3990 := z.DecSliceHelperStart()
	var yyc3990 bool
	if yyl3990 == 0 {
		if yyv3990 == nil {
			yyv3990 = []PersistentVolumeAccessMode{}
			yyc3990 = true
		} else if len(yyv3990) != 0 {
			yyv3990 = yyv3990[:0]
			yyc3990 = true
		}
	} else if yyl3990 > 0 {
		var yyrr3990, yyrl3990 int
		var yyrt3990 bool
		if yyl3990 > cap(yyv3990) {

			yyrl3990, yyrt3990 = z.DecInferLen(yyl3990, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3990 {
				if yyrl3990 <= cap(yyv3990) {
					yyv3990 = yyv3990[:yyrl3990]
				} else {
					yyv3990 = make([]PersistentVolumeAccessMode, yyrl3990)
				}
			} else {
				yyv3990 = make([]PersistentVolumeAccessMode, yyrl3990)
			}
			yyc3990 = true
			yyrr3990 = len(yyv3990)
		} else if yyl3990 != len(yyv3990) {
			yyv3990 = yyv3990[:yyl3990]
			yyc3990 = true
		}
		yyj3990 := 0
		for ; yyj3990 < yyrr3990; yyj3990++ {
			yyh3990.ElemContainerState(yyj3990)
			if r.TryDecodeAsNil() {
				yyv3990[yyj3990] = ""
			} else {
				yyv3990[yyj3990] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3990 {
			for ; yyj3990 < yyl3990; yyj3990++ {
				yyv3990 = append(yyv3990, "")
				yyh3990.ElemContainerState(yyj3990)
				if r.TryDecodeAsNil() {
					yyv3990[yyj3990] = ""
				} else {
					yyv3990[yyj3990] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3990 := 0
		for ; !r.CheckBreak(); yyj3990++ {

			if yyj3990 >= len(yyv3990) {
				yyv3990 = append(yyv3990, "") // var yyz3990 PersistentVolumeAccessMode
				yyc3990 = true
			}
			yyh3990.ElemContainerState(yyj3990)
			if yyj3990 < len(yyv3990) {
				if r.TryDecodeAsNil() {
					yyv3990[yyj3990] = ""
				} else {
					yyv3990[yyj3990] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3990 < len(yyv3990) {
			yyv3990 = yyv3990[:yyj3990]
			yyc3990 = true
		} else if yyj3990 == 0 && yyv3990 == nil {
			yyv3990 = []PersistentVolumeAccessMode{}
			yyc3990 = true
		}
	}
	yyh3990.End()
	if yyc3990 {
		*v = yyv3990
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3994 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3995 := &yyv3994
		yy3995.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3996 := *v
	yyh3996, yyl3996 := z.DecSliceHelperStart()
	var yyc3996 bool
	if yyl3996 == 0 {
		if yyv3996 == nil {
			yyv3996 = []PersistentVolume{}
			yyc3996 = true
		} else if len(yyv3996) != 0 {
			yyv3996 = yyv3996[:0]
			yyc3996 = true
		}
	} else if yyl3996 > 0 {
		var yyrr3996, yyrl3996 int
		var yyrt3996 bool
		if yyl3996 > cap(yyv3996) {

			yyrg3996 := len(yyv3996) > 0
			yyv23996 := yyv3996
			yyrl3996, yyrt3996 = z.DecInferLen(yyl3996, z.DecBasicHandle().MaxInitLen, 400)
			if yyrt3996 {
				if yyrl3996 <= cap(yyv3996) {
					yyv3996 = yyv3996[:yyrl3996]
				} else {
					yyv3996 = make([]PersistentVolume, yyrl3996)
				}
			} else {
				yyv3996 = make([]PersistentVolume, yyrl3996)
			}
			yyc3996 = true
			yyrr3996 = len(yyv3996)
			if yyrg3996 {
				copy(yyv3996, yyv23996)
			}
		} else if yyl3996 != len(yyv3996) {
			yyv3996 = yyv3996[:yyl3996]
			yyc3996 = true
		}
		yyj3996 := 0
		for ; yyj3996 < yyrr3996; yyj3996++ {
			yyh3996.ElemContainerState(yyj3996)
			if r.TryDecodeAsNil() {
				yyv3996[yyj3996] = PersistentVolume{}
			} else {
				yyv3997 := &yyv3996[yyj3996]
				yyv3997.CodecDecodeSelf(d)
			}

		}
		if yyrt3996 {
			for ; yyj3996 < yyl3996; yyj3996++ {
				yyv3996 = append(yyv3996, PersistentVolume{})
				yyh3996.ElemContainerState(yyj3996)
				if r.TryDecodeAsNil() {
					yyv3996[yyj3996] = PersistentVolume{}
				} else {
					yyv3998 := &yyv3996[yyj3996]
					yyv3998.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3996 := 0
		for ; !r.CheckBreak(); yyj3996++ {

			if yyj3996 >= len(yyv3996) {
				yyv3996 = append(yyv3996, PersistentVolume{}) // var yyz3996 PersistentVolume
				yyc3996 = true
			}
			yyh3996.ElemContainerState(yyj3996)
			if yyj3996 < len(yyv3996) {
				if r.TryDecodeAsNil() {
					yyv3996[yyj3996] = PersistentVolume{}
				} else {
					yyv3999 := &yyv3996[yyj3996]
					yyv3999.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3996 < len(yyv3996) {
			yyv3996 = yyv3996[:yyj3996]
			yyc3996 = true
		} else if yyj3996 == 0 && yyv3996 == nil {
			yyv3996 = []PersistentVolume{}
			yyc3996 = true
		}
	}
	yyh3996.End()
	if yyc3996 {
		*v = yyv3996
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4000 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4001 := &yyv4000
		yy4001.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4002 := *v
	yyh4002, yyl4002 := z.DecSliceHelperStart()
	var yyc4002 bool
	if yyl4002 == 0 {
		if yyv4002 == nil {
			yyv4002 = []PersistentVolumeClaim{}
			yyc4002 = true
		} else if len(yyv4002) != 0 {
			yyv4002 = yyv4002[:0]
			yyc4002 = true
		}
	} else if yyl4002 > 0 {
		var yyrr4002, yyrl4002 int
		var yyrt4002 bool
		if yyl4002 > cap(yyv4002) {

			yyrg4002 := len(yyv4002) > 0
			yyv24002 := yyv4002
			yyrl4002, yyrt4002 = z.DecInferLen(yyl4002, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4002 {
				if yyrl4002 <= cap(yyv4002) {
					yyv4002 = yyv4002[:yyrl4002]
				} else {
					yyv4002 = make([]PersistentVolumeClaim, yyrl4002)
				}
			} else {
				yyv4002 = make([]PersistentVolumeClaim, yyrl4002)
			}
			yyc4002 = true
			yyrr4002 = len(yyv4002)
			if yyrg4002 {
				copy(yyv4002, yyv24002)
			}
		} else if yyl4002 != len(yyv4002) {
			yyv4002 = yyv4002[:yyl4002]
			yyc4002 = true
		}
		yyj4002 := 0
		for ; yyj4002 < yyrr4002; yyj4002++ {
			yyh4002.ElemContainerState(yyj4002)
			if r.TryDecodeAsNil() {
				yyv4002[yyj4002] = PersistentVolumeClaim{}
			} else {
				yyv4003 := &yyv4002[yyj4002]
				yyv4003.CodecDecodeSelf(d)
			}

		}
		if yyrt4002 {
			for ; yyj4002 < yyl4002; yyj4002++ {
				yyv4002 = append(yyv4002, PersistentVolumeClaim{})
				yyh4002.ElemContainerState(yyj4002)
				if r.TryDecodeAsNil() {
					yyv4002[yyj4002] = PersistentVolumeClaim{}
				} else {
					yyv4004 := &yyv4002[yyj4002]
					yyv4004.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4002 := 0
		for ; !r.CheckBreak(); yyj4002++ {

			if yyj4002 >= len(yyv4002) {
				yyv4002 = append(yyv4002, PersistentVolumeClaim{}) // var yyz4002 PersistentVolumeClaim
				yyc4002 = true
			}
			yyh4002.ElemContainerState(yyj4002)
			if yyj4002 < len(yyv4002) {
				if r.TryDecodeAsNil() {
					yyv4002[yyj4002] = PersistentVolumeClaim{}
				} else {
					yyv4005 := &yyv4002[yyj4002]
					yyv4005.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4002 < len(yyv4002) {
			yyv4002 = yyv4002[:yyj4002]
			yyc4002 = true
		} else if yyj4002 == 0 && yyv4002 == nil {
			yyv4002 = []PersistentVolumeClaim{}
			yyc4002 = true
		}
	}
	yyh4002.End()
	if yyc4002 {
		*v = yyv4002
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4006 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4007 := &yyv4006
		yy4007.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4008 := *v
	yyh4008, yyl4008 := z.DecSliceHelperStart()
	var yyc4008 bool
	if yyl4008 == 0 {
		if yyv4008 == nil {
			yyv4008 = []HTTPHeader{}
			yyc4008 = true
		} else if len(yyv4008) != 0 {
			yyv4008 = yyv4008[:0]
			yyc4008 = true
		}
	} else if yyl4008 > 0 {
		var yyrr4008, yyrl4008 int
		var yyrt4008 bool
		if yyl4008 > cap(yyv4008) {

			yyrg4008 := len(yyv4008) > 0
			yyv24008 := yyv4008
			yyrl4008, yyrt4008 = z.DecInferLen(yyl4008, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4008 {
				if yyrl4008 <= cap(yyv4008) {
					yyv4008 = yyv4008[:yyrl4008]
				} else {
					yyv4008 = make([]HTTPHeader, yyrl4008)
				}
			} else {
				yyv4008 = make([]HTTPHeader, yyrl4008)
			}
			yyc4008 = true
			yyrr4008 = len(yyv4008)
			if yyrg4008 {
				copy(yyv4008, yyv24008)
			}
		} else if yyl4008 != len(yyv4008) {
			yyv4008 = yyv4008[:yyl4008]
			yyc4008 = true
		}
		yyj4008 := 0
		for ; yyj4008 < yyrr4008; yyj4008++ {
			yyh4008.ElemContainerState(yyj4008)
			if r.TryDecodeAsNil() {
				yyv4008[yyj4008] = HTTPHeader{}
			} else {
				yyv4009 := &yyv4008[yyj4008]
				yyv4009.CodecDecodeSelf(d)
			}

		}
		if yyrt4008 {
			for ; yyj4008 < yyl4008; yyj4008++ {
				yyv4008 = append(yyv4008, HTTPHeader{})
				yyh4008.ElemContainerState(yyj4008)
				if r.TryDecodeAsNil() {
					yyv4008[yyj4008] = HTTPHeader{}
				} else {
					yyv4010 := &yyv4008[yyj4008]
					yyv4010.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4008 := 0
		for ; !r.CheckBreak(); yyj4008++ {

			if yyj4008 >= len(yyv4008) {
				yyv4008 = append(yyv4008, HTTPHeader{}) // var yyz4008 HTTPHeader
				yyc4008 = true
			}
			yyh4008.ElemContainerState(yyj4008)
			if yyj4008 < len(yyv4008) {
				if r.TryDecodeAsNil() {
					yyv4008[yyj4008] = HTTPHeader{}
				} else {
					yyv4011 := &yyv4008[yyj4008]
					yyv4011.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4008 < len(yyv4008) {
			yyv4008 = yyv4008[:yyj4008]
			yyc4008 = true
		} else if yyj4008 == 0 && yyv4008 == nil {
			yyv4008 = []HTTPHeader{}
			yyc4008 = true
		}
	}
	yyh4008.End()
	if yyc4008 {
		*v = yyv4008
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4012 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4012.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4013 := *v
	yyh4013, yyl4013 := z.DecSliceHelperStart()
	var yyc4013 bool
	if yyl4013 == 0 {
		if yyv4013 == nil {
			yyv4013 = []Capability{}
			yyc4013 = true
		} else if len(yyv4013) != 0 {
			yyv4013 = yyv4013[:0]
			yyc4013 = true
		}
	} else if yyl4013 > 0 {
		var yyrr4013, yyrl4013 int
		var yyrt4013 bool
		if yyl4013 > cap(yyv4013) {

			yyrl4013, yyrt4013 = z.DecInferLen(yyl4013, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4013 {
				if yyrl4013 <= cap(yyv4013) {
					yyv4013 = yyv4013[:yyrl4013]
				} else {
					yyv4013 = make([]Capability, yyrl4013)
				}
			} else {
				yyv4013 = make([]Capability, yyrl4013)
			}
			yyc4013 = true
			yyrr4013 = len(yyv4013)
		} else if yyl4013 != len(yyv4013) {
			yyv4013 = yyv4013[:yyl4013]
			yyc4013 = true
		}
		yyj4013 := 0
		for ; yyj4013 < yyrr4013; yyj4013++ {
			yyh4013.ElemContainerState(yyj4013)
			if r.TryDecodeAsNil() {
				yyv4013[yyj4013] = ""
			} else {
				yyv4013[yyj4013] = Capability(r.DecodeString())
			}

		}
		if yyrt4013 {
			for ; yyj4013 < yyl4013; yyj4013++ {
				yyv4013 = append(yyv4013, "")
				yyh4013.ElemContainerState(yyj4013)
				if r.TryDecodeAsNil() {
					yyv4013[yyj4013] = ""
				} else {
					yyv4013[yyj4013] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4013 := 0
		for ; !r.CheckBreak(); yyj4013++ {

			if yyj4013 >= len(yyv4013) {
				yyv4013 = append(yyv4013, "") // var yyz4013 Capability
				yyc4013 = true
			}
			yyh4013.ElemContainerState(yyj4013)
			if yyj4013 < len(yyv4013) {
				if r.TryDecodeAsNil() {
					yyv4013[yyj4013] = ""
				} else {
					yyv4013[yyj4013] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4013 < len(yyv4013) {
			yyv4013 = yyv4013[:yyj4013]
			yyc4013 = true
		} else if yyj4013 == 0 && yyv4013 == nil {
			yyv4013 = []Capability{}
			yyc4013 = true
		}
	}
	yyh4013.End()
	if yyc4013 {
		*v = yyv4013
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4017 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4018 := &yyv4017
		yy4018.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4019 := *v
	yyh4019, yyl4019 := z.DecSliceHelperStart()
	var yyc4019 bool
	if yyl4019 == 0 {
		if yyv4019 == nil {
			yyv4019 = []ContainerPort{}
			yyc4019 = true
		} else if len(yyv4019) != 0 {
			yyv4019 = yyv4019[:0]
			yyc4019 = true
		}
	} else if yyl4019 > 0 {
		var yyrr4019, yyrl4019 int
		var yyrt4019 bool
		if yyl4019 > cap(yyv4019) {

			yyrg4019 := len(yyv4019) > 0
			yyv24019 := yyv4019
			yyrl4019, yyrt4019 = z.DecInferLen(yyl4019, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4019 {
				if yyrl4019 <= cap(yyv4019) {
					yyv4019 = yyv4019[:yyrl4019]
				} else {
					yyv4019 = make([]ContainerPort, yyrl4019)
				}
			} else {
				yyv4019 = make([]ContainerPort, yyrl4019)
			}
			yyc4019 = true
			yyrr4019 = len(yyv4019)
			if yyrg4019 {
				copy(yyv4019, yyv24019)
			}
		} else if yyl4019 != len(yyv4019) {
			yyv4019 = yyv4019[:yyl4019]
			yyc4019 = true
		}
		yyj4019 := 0
		for ; yyj4019 < yyrr4019; yyj4019++ {
			yyh4019.ElemContainerState(yyj4019)
			if r.TryDecodeAsNil() {
				yyv4019[yyj4019] = ContainerPort{}
			} else {
				yyv4020 := &yyv4019[yyj4019]
				yyv4020.CodecDecodeSelf(d)
			}

		}
		if yyrt4019 {
			for ; yyj4019 < yyl4019; yyj4019++ {
				yyv4019 = append(yyv4019, ContainerPort{})
				yyh4019.ElemContainerState(yyj4019)
				if r.TryDecodeAsNil() {
					yyv4019[yyj4019] = ContainerPort{}
				} else {
					yyv4021 := &yyv4019[yyj4019]
					yyv4021.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4019 := 0
		for ; !r.CheckBreak(); yyj4019++ {

			if yyj4019 >= len(yyv4019) {
				yyv4019 = append(yyv4019, ContainerPort{}) // var yyz4019 ContainerPort
				yyc4019 = true
			}
			yyh4019.ElemContainerState(yyj4019)
			if yyj4019 < len(yyv4019) {
				if r.TryDecodeAsNil() {
					yyv4019[yyj4019] = ContainerPort{}
				} else {
					yyv4022 := &yyv4019[yyj4019]
					yyv4022.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4019 < len(yyv4019) {
			yyv4019 = yyv4019[:yyj4019]
			yyc4019 = true
		} else if yyj4019 == 0 && yyv4019 == nil {
			yyv4019 = []ContainerPort{}
			yyc4019 = true
		}
	}
	yyh4019.End()
	if yyc4019 {
		*v = yyv4019
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4023 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4024 := &yyv4023
		yy4024.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4025 := *v
	yyh4025, yyl4025 := z.DecSliceHelperStart()
	var yyc4025 bool
	if yyl4025 == 0 {
		if yyv4025 == nil {
			yyv4025 = []EnvVar{}
			yyc4025 = true
		} else if len(yyv4025) != 0 {
			yyv4025 = yyv4025[:0]
			yyc4025 = true
		}
	} else if yyl4025 > 0 {
		var yyrr4025, yyrl4025 int
		var yyrt4025 bool
		if yyl4025 > cap(yyv4025) {

			yyrg4025 := len(yyv4025) > 0
			yyv24025 := yyv4025
			yyrl4025, yyrt4025 = z.DecInferLen(yyl4025, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4025 {
				if yyrl4025 <= cap(yyv4025) {
					yyv4025 = yyv4025[:yyrl4025]
				} else {
					yyv4025 = make([]EnvVar, yyrl4025)
				}
			} else {
				yyv4025 = make([]EnvVar, yyrl4025)
			}
			yyc4025 = true
			yyrr4025 = len(yyv4025)
			if yyrg4025 {
				copy(yyv4025, yyv24025)
			}
		} else if yyl4025 != len(yyv4025) {
			yyv4025 = yyv4025[:yyl4025]
			yyc4025 = true
		}
		yyj4025 := 0
		for ; yyj4025 < yyrr4025; yyj4025++ {
			yyh4025.ElemContainerState(yyj4025)
			if r.TryDecodeAsNil() {
				yyv4025[yyj4025] = EnvVar{}
			} else {
				yyv4026 := &yyv4025[yyj4025]
				yyv4026.CodecDecodeSelf(d)
			}

		}
		if yyrt4025 {
			for ; yyj4025 < yyl4025; yyj4025++ {
				yyv4025 = append(yyv4025, EnvVar{})
				yyh4025.ElemContainerState(yyj4025)
				if r.TryDecodeAsNil() {
					yyv4025[yyj4025] = EnvVar{}
				} else {
					yyv4027 := &yyv4025[yyj4025]
					yyv4027.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4025 := 0
		for ; !r.CheckBreak(); yyj4025++ {

			if yyj4025 >= len(yyv4025) {
				yyv4025 = append(yyv4025, EnvVar{}) // var yyz4025 EnvVar
				yyc4025 = true
			}
			yyh4025.ElemContainerState(yyj4025)
			if yyj4025 < len(yyv4025) {
				if r.TryDecodeAsNil() {
					yyv4025[yyj4025] = EnvVar{}
				} else {
					yyv4028 := &yyv4025[yyj4025]
					yyv4028.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4025 < len(yyv4025) {
			yyv4025 = yyv4025[:yyj4025]
			yyc4025 = true
		} else if yyj4025 == 0 && yyv4025 == nil {
			yyv4025 = []EnvVar{}
			yyc4025 = true
		}
	}
	yyh4025.End()
	if yyc4025 {
		*v = yyv4025
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4029 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4030 := &yyv4029
		yy4030.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4031 := *v
	yyh4031, yyl4031 := z.DecSliceHelperStart()
	var yyc4031 bool
	if yyl4031 == 0 {
		if yyv4031 == nil {
			yyv4031 = []VolumeMount{}
			yyc4031 = true
		} else if len(yyv4031) != 0 {
			yyv4031 = yyv4031[:0]
			yyc4031 = true
		}
	} else if yyl4031 > 0 {
		var yyrr4031, yyrl4031 int
		var yyrt4031 bool
		if yyl4031 > cap(yyv4031) {

			yyrg4031 := len(yyv4031) > 0
			yyv24031 := yyv4031
			yyrl4031, yyrt4031 = z.DecInferLen(yyl4031, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4031 {
				if yyrl4031 <= cap(yyv4031) {
					yyv4031 = yyv4031[:yyrl4031]
				} else {
					yyv4031 = make([]VolumeMount, yyrl4031)
				}
			} else {
				yyv4031 = make([]VolumeMount, yyrl4031)
			}
			yyc4031 = true
			yyrr4031 = len(yyv4031)
			if yyrg4031 {
				copy(yyv4031, yyv24031)
			}
		} else if yyl4031 != len(yyv4031) {
			yyv4031 = yyv4031[:yyl4031]
			yyc4031 = true
		}
		yyj4031 := 0
		for ; yyj4031 < yyrr4031; yyj4031++ {
			yyh4031.ElemContainerState(yyj4031)
			if r.TryDecodeAsNil() {
				yyv4031[yyj4031] = VolumeMount{}
			} else {
				yyv4032 := &yyv4031[yyj4031]
				yyv4032.CodecDecodeSelf(d)
			}

		}
		if yyrt4031 {
			for ; yyj4031 < yyl4031; yyj4031++ {
				yyv4031 = append(yyv4031, VolumeMount{})
				yyh4031.ElemContainerState(yyj4031)
				if r.TryDecodeAsNil() {
					yyv4031[yyj4031] = VolumeMount{}
				} else {
					yyv4033 := &yyv4031[yyj4031]
					yyv4033.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4031 := 0
		for ; !r.CheckBreak(); yyj4031++ {

			if yyj4031 >= len(yyv4031) {
				yyv4031 = append(yyv4031, VolumeMount{}) // var yyz4031 VolumeMount
				yyc4031 = true
			}
			yyh4031.ElemContainerState(yyj4031)
			if yyj4031 < len(yyv4031) {
				if r.TryDecodeAsNil() {
					yyv4031[yyj4031] = VolumeMount{}
				} else {
					yyv4034 := &yyv4031[yyj4031]
					yyv4034.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4031 < len(yyv4031) {
			yyv4031 = yyv4031[:yyj4031]
			yyc4031 = true
		} else if yyj4031 == 0 && yyv4031 == nil {
			yyv4031 = []VolumeMount{}
			yyc4031 = true
		}
	}
	yyh4031.End()
	if yyc4031 {
		*v = yyv4031
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4035 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4036 := &yyv4035
		yy4036.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4037 := *v
	yyh4037, yyl4037 := z.DecSliceHelperStart()
	var yyc4037 bool
	if yyl4037 == 0 {
		if yyv4037 == nil {
			yyv4037 = []NodeSelectorTerm{}
			yyc4037 = true
		} else if len(yyv4037) != 0 {
			yyv4037 = yyv4037[:0]
			yyc4037 = true
		}
	} else if yyl4037 > 0 {
		var yyrr4037, yyrl4037 int
		var yyrt4037 bool
		if yyl4037 > cap(yyv4037) {

			yyrg4037 := len(yyv4037) > 0
			yyv24037 := yyv4037
			yyrl4037, yyrt4037 = z.DecInferLen(yyl4037, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4037 {
				if yyrl4037 <= cap(yyv4037) {
					yyv4037 = yyv4037[:yyrl4037]
				} else {
					yyv4037 = make([]NodeSelectorTerm, yyrl4037)
				}
			} else {
				yyv4037 = make([]NodeSelectorTerm, yyrl4037)
			}
			yyc4037 = true
			yyrr4037 = len(yyv4037)
			if yyrg4037 {
				copy(yyv4037, yyv24037)
			}
		} else if yyl4037 != len(yyv4037) {
			yyv4037 = yyv4037[:yyl4037]
			yyc4037 = true
		}
		yyj4037 := 0
		for ; yyj4037 < yyrr4037; yyj4037++ {
			yyh4037.ElemContainerState(yyj4037)
			if r.TryDecodeAsNil() {
				yyv4037[yyj4037] = NodeSelectorTerm{}
			} else {
				yyv4038 := &yyv4037[yyj4037]
				yyv4038.CodecDecodeSelf(d)
			}

		}
		if yyrt4037 {
			for ; yyj4037 < yyl4037; yyj4037++ {
				yyv4037 = append(yyv4037, NodeSelectorTerm{})
				yyh4037.ElemContainerState(yyj4037)
				if r.TryDecodeAsNil() {
					yyv4037[yyj4037] = NodeSelectorTerm{}
				} else {
					yyv4039 := &yyv4037[yyj4037]
					yyv4039.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4037 := 0
		for ; !r.CheckBreak(); yyj4037++ {

			if yyj4037 >= len(yyv4037) {
				yyv4037 = append(yyv4037, NodeSelectorTerm{}) // var yyz4037 NodeSelectorTerm
				yyc4037 = true
			}
			yyh4037.ElemContainerState(yyj4037)
			if yyj4037 < len(yyv4037) {
				if r.TryDecodeAsNil() {
					yyv4037[yyj4037] = NodeSelectorTerm{}
				} else {
					yyv4040 := &yyv4037[yyj4037]
					yyv4040.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4037 < len(yyv4037) {
			yyv4037 = yyv4037[:yyj4037]
			yyc4037 = true
		} else if yyj4037 == 0 && yyv4037 == nil {
			yyv4037 = []NodeSelectorTerm{}
			yyc4037 = true
		}
	}
	yyh4037.End()
	if yyc4037 {
		*v = yyv4037
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4041 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4042 := &yyv4041
		yy4042.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4043 := *v
	yyh4043, yyl4043 := z.DecSliceHelperStart()
	var yyc4043 bool
	if yyl4043 == 0 {
		if yyv4043 == nil {
			yyv4043 = []NodeSelectorRequirement{}
			yyc4043 = true
		} else if len(yyv4043) != 0 {
			yyv4043 = yyv4043[:0]
			yyc4043 = true
		}
	} else if yyl4043 > 0 {
		var yyrr4043, yyrl4043 int
		var yyrt4043 bool
		if yyl4043 > cap(yyv4043) {

			yyrg4043 := len(yyv4043) > 0
			yyv24043 := yyv4043
			yyrl4043, yyrt4043 = z.DecInferLen(yyl4043, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4043 {
				if yyrl4043 <= cap(yyv4043) {
					yyv4043 = yyv4043[:yyrl4043]
				} else {
					yyv4043 = make([]NodeSelectorRequirement, yyrl4043)
				}
			} else {
				yyv4043 = make([]NodeSelectorRequirement, yyrl4043)
			}
			yyc4043 = true
			yyrr4043 = len(yyv4043)
			if yyrg4043 {
				copy(yyv4043, yyv24043)
			}
		} else if yyl4043 != len(yyv4043) {
			yyv4043 = yyv4043[:yyl4043]
			yyc4043 = true
		}
		yyj4043 := 0
		for ; yyj4043 < yyrr4043; yyj4043++ {
			yyh4043.ElemContainerState(yyj4043)
			if r.TryDecodeAsNil() {
				yyv4043[yyj4043] = NodeSelectorRequirement{}
			} else {
				yyv4044 := &yyv4043[yyj4043]
				yyv4044.CodecDecodeSelf(d)
			}

		}
		if yyrt4043 {
			for ; yyj4043 < yyl4043; yyj4043++ {
				yyv4043 = append(yyv4043, NodeSelectorRequirement{})
				yyh4043.ElemContainerState(yyj4043)
				if r.TryDecodeAsNil() {
					yyv4043[yyj4043] = NodeSelectorRequirement{}
				} else {
					yyv4045 := &yyv4043[yyj4043]
					yyv4045.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4043 := 0
		for ; !r.CheckBreak(); yyj4043++ {

			if yyj4043 >= len(yyv4043) {
				yyv4043 = append(yyv4043, NodeSelectorRequirement{}) // var yyz4043 NodeSelectorRequirement
				yyc4043 = true
			}
			yyh4043.ElemContainerState(yyj4043)
			if yyj4043 < len(yyv4043) {
				if r.TryDecodeAsNil() {
					yyv4043[yyj4043] = NodeSelectorRequirement{}
				} else {
					yyv4046 := &yyv4043[yyj4043]
					yyv4046.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4043 < len(yyv4043) {
			yyv4043 = yyv4043[:yyj4043]
			yyc4043 = true
		} else if yyj4043 == 0 && yyv4043 == nil {
			yyv4043 = []NodeSelectorRequirement{}
			yyc4043 = true
		}
	}
	yyh4043.End()
	if yyc4043 {
		*v = yyv4043
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4047 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4048 := &yyv4047
		yy4048.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4049 := *v
	yyh4049, yyl4049 := z.DecSliceHelperStart()
	var yyc4049 bool
	if yyl4049 == 0 {
		if yyv4049 == nil {
			yyv4049 = []PreferredSchedulingTerm{}
			yyc4049 = true
		} else if len(yyv4049) != 0 {
			yyv4049 = yyv4049[:0]
			yyc4049 = true
		}
	} else if yyl4049 > 0 {
		var yyrr4049, yyrl4049 int
		var yyrt4049 bool
		if yyl4049 > cap(yyv4049) {

			yyrg4049 := len(yyv4049) > 0
			yyv24049 := yyv4049
			yyrl4049, yyrt4049 = z.DecInferLen(yyl4049, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4049 {
				if yyrl4049 <= cap(yyv4049) {
					yyv4049 = yyv4049[:yyrl4049]
				} else {
					yyv4049 = make([]PreferredSchedulingTerm, yyrl4049)
				}
			} else {
				yyv4049 = make([]PreferredSchedulingTerm, yyrl4049)
			}
			yyc4049 = true
			yyrr4049 = len(yyv4049)
			if yyrg4049 {
				copy(yyv4049, yyv24049)
			}
		} else if yyl4049 != len(yyv4049) {
			yyv4049 = yyv4049[:yyl4049]
			yyc4049 = true
		}
		yyj4049 := 0
		for ; yyj4049 < yyrr4049; yyj4049++ {
			yyh4049.ElemContainerState(yyj4049)
			if r.TryDecodeAsNil() {
				yyv4049[yyj4049] = PreferredSchedulingTerm{}
			} else {
				yyv4050 := &yyv4049[yyj4049]
				yyv4050.CodecDecodeSelf(d)
			}

		}
		if yyrt4049 {
			for ; yyj4049 < yyl4049; yyj4049++ {
				yyv4049 = append(yyv4049, PreferredSchedulingTerm{})
				yyh4049.ElemContainerState(yyj4049)
				if r.TryDecodeAsNil() {
					yyv4049[yyj4049] = PreferredSchedulingTerm{}
				} else {
					yyv4051 := &yyv4049[yyj4049]
					yyv4051.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4049 := 0
		for ; !r.CheckBreak(); yyj4049++ {

			if yyj4049 >= len(yyv4049) {
				yyv4049 = append(yyv4049, PreferredSchedulingTerm{}) // var yyz4049 PreferredSchedulingTerm
				yyc4049 = true
			}
			yyh4049.ElemContainerState(yyj4049)
			if yyj4049 < len(yyv4049) {
				if r.TryDecodeAsNil() {
					yyv4049[yyj4049] = PreferredSchedulingTerm{}
				} else {
					yyv4052 := &yyv4049[yyj4049]
					yyv4052.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4049 < len(yyv4049) {
			yyv4049 = yyv4049[:yyj4049]
			yyc4049 = true
		} else if yyj4049 == 0 && yyv4049 == nil {
			yyv4049 = []PreferredSchedulingTerm{}
			yyc4049 = true
		}
	}
	yyh4049.End()
	if yyc4049 {
		*v = yyv4049
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4053 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4054 := &yyv4053
		yy4054.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4055 := *v
	yyh4055, yyl4055 := z.DecSliceHelperStart()
	var yyc4055 bool
	if yyl4055 == 0 {
		if yyv4055 == nil {
			yyv4055 = []LabelSelectorRequirement{}
			yyc4055 = true
		} else if len(yyv4055) != 0 {
			yyv4055 = yyv4055[:0]
			yyc4055 = true
		}
	} else if yyl4055 > 0 {
		var yyrr4055, yyrl4055 int
		var yyrt4055 bool
		if yyl4055 > cap(yyv4055) {

			yyrg4055 := len(yyv4055) > 0
			yyv24055 := yyv4055
			yyrl4055, yyrt4055 = z.DecInferLen(yyl4055, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4055 {
				if yyrl4055 <= cap(yyv4055) {
					yyv4055 = yyv4055[:yyrl4055]
				} else {
					yyv4055 = make([]LabelSelectorRequirement, yyrl4055)
				}
			} else {
				yyv4055 = make([]LabelSelectorRequirement, yyrl4055)
			}
			yyc4055 = true
			yyrr4055 = len(yyv4055)
			if yyrg4055 {
				copy(yyv4055, yyv24055)
			}
		} else if yyl4055 != len(yyv4055) {
			yyv4055 = yyv4055[:yyl4055]
			yyc4055 = true
		}
		yyj4055 := 0
		for ; yyj4055 < yyrr4055; yyj4055++ {
			yyh4055.ElemContainerState(yyj4055)
			if r.TryDecodeAsNil() {
				yyv4055[yyj4055] = LabelSelectorRequirement{}
			} else {
				yyv4056 := &yyv4055[yyj4055]
				yyv4056.CodecDecodeSelf(d)
			}

		}
		if yyrt4055 {
			for ; yyj4055 < yyl4055; yyj4055++ {
				yyv4055 = append(yyv4055, LabelSelectorRequirement{})
				yyh4055.ElemContainerState(yyj4055)
				if r.TryDecodeAsNil() {
					yyv4055[yyj4055] = LabelSelectorRequirement{}
				} else {
					yyv4057 := &yyv4055[yyj4055]
					yyv4057.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4055 := 0
		for ; !r.CheckBreak(); yyj4055++ {

			if yyj4055 >= len(yyv4055) {
				yyv4055 = append(yyv4055, LabelSelectorRequirement{}) // var yyz4055 LabelSelectorRequirement
				yyc4055 = true
			}
			yyh4055.ElemContainerState(yyj4055)
			if yyj4055 < len(yyv4055) {
				if r.TryDecodeAsNil() {
					yyv4055[yyj4055] = LabelSelectorRequirement{}
				} else {
					yyv4058 := &yyv4055[yyj4055]
					yyv4058.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4055 < len(yyv4055) {
			yyv4055 = yyv4055[:yyj4055]
			yyc4055 = true
		} else if yyj4055 == 0 && yyv4055 == nil {
			yyv4055 = []LabelSelectorRequirement{}
			yyc4055 = true
		}
	}
	yyh4055.End()
	if yyc4055 {
		*v = yyv4055
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4059 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4060 := &yyv4059
		yy4060.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4061 := *v
	yyh4061, yyl4061 := z.DecSliceHelperStart()
	var yyc4061 bool
	if yyl4061 == 0 {
		if yyv4061 == nil {
			yyv4061 = []PodAffinityTerm{}
			yyc4061 = true
		} else if len(yyv4061) != 0 {
			yyv4061 = yyv4061[:0]
			yyc4061 = true
		}
	} else if yyl4061 > 0 {
		var yyrr4061, yyrl4061 int
		var yyrt4061 bool
		if yyl4061 > cap(yyv4061) {

			yyrg4061 := len(yyv4061) > 0
			yyv24061 := yyv4061
			yyrl4061, yyrt4061 = z.DecInferLen(yyl4061, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4061 {
				if yyrl4061 <= cap(yyv4061) {
					yyv4061 = yyv4061[:yyrl4061]
				} else {
					yyv4061 = make([]PodAffinityTerm, yyrl4061)
				}
			} else {
				yyv4061 = make([]PodAffinityTerm, yyrl4061)
			}
			yyc4061 = true
			yyrr4061 = len(yyv4061)
			if yyrg4061 {
				copy(yyv4061, yyv24061)
			}
		} else if yyl4061 != len(yyv4061) {
			yyv4061 = yyv4061[:yyl4061]
			yyc4061 = true
		}
		yyj4061 := 0
		for ; yyj4061 < yyrr4061; yyj4061++ {
			yyh4061.ElemContainerState(yyj4061)
			if r.TryDecodeAsNil() {
				yyv4061[yyj4061] = PodAffinityTerm{}
			} else {
				yyv4062 := &yyv4061[yyj4061]
				yyv4062.CodecDecodeSelf(d)
			}

		}
		if yyrt4061 {
			for ; yyj4061 < yyl4061; yyj4061++ {
				yyv4061 = append(yyv4061, PodAffinityTerm{})
				yyh4061.ElemContainerState(yyj4061)
				if r.TryDecodeAsNil() {
					yyv4061[yyj4061] = PodAffinityTerm{}
				} else {
					yyv4063 := &yyv4061[yyj4061]
					yyv4063.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4061 := 0
		for ; !r.CheckBreak(); yyj4061++ {

			if yyj4061 >= len(yyv4061) {
				yyv4061 = append(yyv4061, PodAffinityTerm{}) // var yyz4061 PodAffinityTerm
				yyc4061 = true
			}
			yyh4061.ElemContainerState(yyj4061)
			if yyj4061 < len(yyv4061) {
				if r.TryDecodeAsNil() {
					yyv4061[yyj4061] = PodAffinityTerm{}
				} else {
					yyv4064 := &yyv4061[yyj4061]
					yyv4064.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4061 < len(yyv4061) {
			yyv4061 = yyv4061[:yyj4061]
			yyc4061 = true
		} else if yyj4061 == 0 && yyv4061 == nil {
			yyv4061 = []PodAffinityTerm{}
			yyc4061 = true
		}
	}
	yyh4061.End()
	if yyc4061 {
		*v = yyv4061
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4065 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4066 := &yyv4065
		yy4066.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4067 := *v
	yyh4067, yyl4067 := z.DecSliceHelperStart()
	var yyc4067 bool
	if yyl4067 == 0 {
		if yyv4067 == nil {
			yyv4067 = []WeightedPodAffinityTerm{}
			yyc4067 = true
		} else if len(yyv4067) != 0 {
			yyv4067 = yyv4067[:0]
			yyc4067 = true
		}
	} else if yyl4067 > 0 {
		var yyrr4067, yyrl4067 int
		var yyrt4067 bool
		if yyl4067 > cap(yyv4067) {

			yyrg4067 := len(yyv4067) > 0
			yyv24067 := yyv4067
			yyrl4067, yyrt4067 = z.DecInferLen(yyl4067, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4067 {
				if yyrl4067 <= cap(yyv4067) {
					yyv4067 = yyv4067[:yyrl4067]
				} else {
					yyv4067 = make([]WeightedPodAffinityTerm, yyrl4067)
				}
			} else {
				yyv4067 = make([]WeightedPodAffinityTerm, yyrl4067)
			}
			yyc4067 = true
			yyrr4067 = len(yyv4067)
			if yyrg4067 {
				copy(yyv4067, yyv24067)
			}
		} else if yyl4067 != len(yyv4067) {
			yyv4067 = yyv4067[:yyl4067]
			yyc4067 = true
		}
		yyj4067 := 0
		for ; yyj4067 < yyrr4067; yyj4067++ {
			yyh4067.ElemContainerState(yyj4067)
			if r.TryDecodeAsNil() {
				yyv4067[yyj4067] = WeightedPodAffinityTerm{}
			} else {
				yyv4068 := &yyv4067[yyj4067]
				yyv4068.CodecDecodeSelf(d)
			}

		}
		if yyrt4067 {
			for ; yyj4067 < yyl4067; yyj4067++ {
				yyv4067 = append(yyv4067, WeightedPodAffinityTerm{})
				yyh4067.ElemContainerState(yyj4067)
				if r.TryDecodeAsNil() {
					yyv4067[yyj4067] = WeightedPodAffinityTerm{}
				} else {
					yyv4069 := &yyv4067[yyj4067]
					yyv4069.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4067 := 0
		for ; !r.CheckBreak(); yyj4067++ {

			if yyj4067 >= len(yyv4067) {
				yyv4067 = append(yyv4067, WeightedPodAffinityTerm{}) // var yyz4067 WeightedPodAffinityTerm
				yyc4067 = true
			}
			yyh4067.ElemContainerState(yyj4067)
			if yyj4067 < len(yyv4067) {
				if r.TryDecodeAsNil() {
					yyv4067[yyj4067] = WeightedPodAffinityTerm{}
				} else {
					yyv4070 := &yyv4067[yyj4067]
					yyv4070.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4067 < len(yyv4067) {
			yyv4067 = yyv4067[:yyj4067]
			yyc4067 = true
		} else if yyj4067 == 0 && yyv4067 == nil {
			yyv4067 = []WeightedPodAffinityTerm{}
			yyc4067 = true
		}
	}
	yyh4067.End()
	if yyc4067 {
		*v = yyv4067
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4071 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4072 := &yyv4071
		yy4072.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4073 := *v
	yyh4073, yyl4073 := z.DecSliceHelperStart()
	var yyc4073 bool
	if yyl4073 == 0 {
		if yyv4073 == nil {
			yyv4073 = []Namespace{}
			yyc4073 = true
		} else if len(yyv4073) != 0 {
			yyv4073 = yyv4073[:0]
			yyc4073 = true
		}
	} else if yyl4073 > 0 {
		var yyrr4073, yyrl4073 int
		var yyrt4073 bool
		if yyl4073 > cap(yyv4073) {

			yyrg4073 := len(yyv4073) > 0
			yyv24073 := yyv4073
			yyrl4073, yyrt4073 = z.DecInferLen(yyl4073, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt4073 {
				if yyrl4073 <= cap(yyv4073) {
					yyv4073 = yyv4073[:yyrl4073]
				} else {
					yyv4073 = make([]Namespace, yyrl4073)
				}
			} else {
				yyv4073 = make([]Namespace, yyrl4073)
			}
			yyc4073 = true
			yyrr4073 = len(yyv4073)
			if yyrg4073 {
				copy(yyv4073, yyv24073)
			}
		} else if yyl4073 != len(yyv4073) {
			yyv4073 = yyv4073[:yyl4073]
			yyc4073 = true
		}
		yyj4073 := 0
		for ; yyj4073 < yyrr4073; yyj4073++ {
			yyh4073.ElemContainerState(yyj4073)
			if r.TryDecodeAsNil() {
				yyv4073[yyj4073] = Namespace{}
			} else {
				yyv4074 := &yyv4073[yyj4073]
				yyv4074.CodecDecodeSelf(d)
			}

		}
		if yyrt4073 {
			for ; yyj4073 < yyl4073; yyj4073++ {
				yyv4073 = append(yyv4073, Namespace{})
				yyh4073.ElemContainerState(yyj4073)
				if r.TryDecodeAsNil() {
					yyv4073[yyj4073] = Namespace{}
				} else {
					yyv4075 := &yyv4073[yyj4073]
					yyv4075.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4073 := 0
		for ; !r.CheckBreak(); yyj4073++ {

			if yyj4073 >= len(yyv4073) {
				yyv4073 = append(yyv4073, Namespace{}) // var yyz4073 Namespace
				yyc4073 = true
			}
			yyh4073.ElemContainerState(yyj4073)
			if yyj4073 < len(yyv4073) {
				if r.TryDecodeAsNil() {
					yyv4073[yyj4073] = Namespace{}
				} else {
					yyv4076 := &yyv4073[yyj4073]
					yyv4076.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4073 < len(yyv4073) {
			yyv4073 = yyv4073[:yyj4073]
			yyc4073 = true
		} else if yyj4073 == 0 && yyv4073 == nil {
			yyv4073 = []Namespace{}
			yyc4073 = true
		}
	}
	yyh4073.End()
	if yyc4073 {
		*v = yyv4073
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4077 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4078 := &yyv4077
		yy4078.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4079 := *v
	yyh4079, yyl4079 := z.DecSliceHelperStart()
	var yyc4079 bool
	if yyl4079 == 0 {
		if yyv4079 == nil {
			yyv4079 = []Volume{}
			yyc4079 = true
		} else if len(yyv4079) != 0 {
			yyv4079 = yyv4079[:0]
			yyc4079 = true
		}
	} else if yyl4079 > 0 {
		var yyrr4079, yyrl4079 int
		var yyrt4079 bool
		if yyl4079 > cap(yyv4079) {

			yyrg4079 := len(yyv4079) > 0
			yyv24079 := yyv4079
			yyrl4079, yyrt4079 = z.DecInferLen(yyl4079, z.DecBasicHandle().MaxInitLen, 160)
			if yyrt4079 {
				if yyrl4079 <= cap(yyv4079) {
					yyv4079 = yyv4079[:yyrl4079]
				} else {
					yyv4079 = make([]Volume, yyrl4079)
				}
			} else {
				yyv4079 = make([]Volume, yyrl4079)
			}
			yyc4079 = true
			yyrr4079 = len(yyv4079)
			if yyrg4079 {
				copy(yyv4079, yyv24079)
			}
		} else if yyl4079 != len(yyv4079) {
			yyv4079 = yyv4079[:yyl4079]
			yyc4079 = true
		}
		yyj4079 := 0
		for ; yyj4079 < yyrr4079; yyj4079++ {
			yyh4079.ElemContainerState(yyj4079)
			if r.TryDecodeAsNil() {
				yyv4079[yyj4079] = Volume{}
			} else {
				yyv4080 := &yyv4079[yyj4079]
				yyv4080.CodecDecodeSelf(d)
			}

		}
		if yyrt4079 {
			for ; yyj4079 < yyl4079; yyj4079++ {
				yyv4079 = append(yyv4079, Volume{})
				yyh4079.ElemContainerState(yyj4079)
				if r.TryDecodeAsNil() {
					yyv4079[yyj4079] = Volume{}
				} else {
					yyv4081 := &yyv4079[yyj4079]
					yyv4081.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4079 := 0
		for ; !r.CheckBreak(); yyj4079++ {

			if yyj4079 >= len(yyv4079) {
				yyv4079 = append(yyv4079, Volume{}) // var yyz4079 Volume
				yyc4079 = true
			}
			yyh4079.ElemContainerState(yyj4079)
			if yyj4079 < len(yyv4079) {
				if r.TryDecodeAsNil() {
					yyv4079[yyj4079] = Volume{}
				} else {
					yyv4082 := &yyv4079[yyj4079]
					yyv4082.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4079 < len(yyv4079) {
			yyv4079 = yyv4079[:yyj4079]
			yyc4079 = true
		} else if yyj4079 == 0 && yyv4079 == nil {
			yyv4079 = []Volume{}
			yyc4079 = true
		}
	}
	yyh4079.End()
	if yyc4079 {
		*v = yyv4079
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4083 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4084 := &yyv4083
		yy4084.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4085 := *v
	yyh4085, yyl4085 := z.DecSliceHelperStart()
	var yyc4085 bool
	if yyl4085 == 0 {
		if yyv4085 == nil {
			yyv4085 = []Container{}
			yyc4085 = true
		} else if len(yyv4085) != 0 {
			yyv4085 = yyv4085[:0]
			yyc4085 = true
		}
	} else if yyl4085 > 0 {
		var yyrr4085, yyrl4085 int
		var yyrt4085 bool
		if yyl4085 > cap(yyv4085) {

			yyrg4085 := len(yyv4085) > 0
			yyv24085 := yyv4085
			yyrl4085, yyrt4085 = z.DecInferLen(yyl4085, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4085 {
				if yyrl4085 <= cap(yyv4085) {
					yyv4085 = yyv4085[:yyrl4085]
				} else {
					yyv4085 = make([]Container, yyrl4085)
				}
			} else {
				yyv4085 = make([]Container, yyrl4085)
			}
			yyc4085 = true
			yyrr4085 = len(yyv4085)
			if yyrg4085 {
				copy(yyv4085, yyv24085)
			}
		} else if yyl4085 != len(yyv4085) {
			yyv4085 = yyv4085[:yyl4085]
			yyc4085 = true
		}
		yyj4085 := 0
		for ; yyj4085 < yyrr4085; yyj4085++ {
			yyh4085.ElemContainerState(yyj4085)
			if r.TryDecodeAsNil() {
				yyv4085[yyj4085] = Container{}
			} else {
				yyv4086 := &yyv4085[yyj4085]
				yyv4086.CodecDecodeSelf(d)
			}

		}
		if yyrt4085 {
			for ; yyj4085 < yyl4085; yyj4085++ {
				yyv4085 = append(yyv4085, Container{})
				yyh4085.ElemContainerState(yyj4085)
				if r.TryDecodeAsNil() {
					yyv4085[yyj4085] = Container{}
				} else {
					yyv4087 := &yyv4085[yyj4085]
					yyv4087.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4085 := 0
		for ; !r.CheckBreak(); yyj4085++ {

			if yyj4085 >= len(yyv4085) {
				yyv4085 = append(yyv4085, Container{}) // var yyz4085 Container
				yyc4085 = true
			}
			yyh4085.ElemContainerState(yyj4085)
			if yyj4085 < len(yyv4085) {
				if r.TryDecodeAsNil() {
					yyv4085[yyj4085] = Container{}
				} else {
					yyv4088 := &yyv4085[yyj4085]
					yyv4088.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4085 < len(yyv4085) {
			yyv4085 = yyv4085[:yyj4085]
			yyc4085 = true
		} else if yyj4085 == 0 && yyv4085 == nil {
			yyv4085 = []Container{}
			yyc4085 = true
		}
	}
	yyh4085.End()
	if yyc4085 {
		*v = yyv4085
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4089 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4090 := &yyv4089
		yy4090.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4091 := *v
	yyh4091, yyl4091 := z.DecSliceHelperStart()
	var yyc4091 bool
	if yyl4091 == 0 {
		if yyv4091 == nil {
			yyv4091 = []LocalObjectReference{}
			yyc4091 = true
		} else if len(yyv4091) != 0 {
			yyv4091 = yyv4091[:0]
			yyc4091 = true
		}
	} else if yyl4091 > 0 {
		var yyrr4091, yyrl4091 int
		var yyrt4091 bool
		if yyl4091 > cap(yyv4091) {

			yyrg4091 := len(yyv4091) > 0
			yyv24091 := yyv4091
			yyrl4091, yyrt4091 = z.DecInferLen(yyl4091, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4091 {
				if yyrl4091 <= cap(yyv4091) {
					yyv4091 = yyv4091[:yyrl4091]
				} else {
					yyv4091 = make([]LocalObjectReference, yyrl4091)
				}
			} else {
				yyv4091 = make([]LocalObjectReference, yyrl4091)
			}
			yyc4091 = true
			yyrr4091 = len(yyv4091)
			if yyrg4091 {
				copy(yyv4091, yyv24091)
			}
		} else if yyl4091 != len(yyv4091) {
			yyv4091 = yyv4091[:yyl4091]
			yyc4091 = true
		}
		yyj4091 := 0
		for ; yyj4091 < yyrr4091; yyj4091++ {
			yyh4091.ElemContainerState(yyj4091)
			if r.TryDecodeAsNil() {
				yyv4091[yyj4091] = LocalObjectReference{}
			} else {
				yyv4092 := &yyv4091[yyj4091]
				yyv4092.CodecDecodeSelf(d)
			}

		}
		if yyrt4091 {
			for ; yyj4091 < yyl4091; yyj4091++ {
				yyv4091 = append(yyv4091, LocalObjectReference{})
				yyh4091.ElemContainerState(yyj4091)
				if r.TryDecodeAsNil() {
					yyv4091[yyj4091] = LocalObjectReference{}
				} else {
					yyv4093 := &yyv4091[yyj4091]
					yyv4093.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4091 := 0
		for ; !r.CheckBreak(); yyj4091++ {

			if yyj4091 >= len(yyv4091) {
				yyv4091 = append(yyv4091, LocalObjectReference{}) // var yyz4091 LocalObjectReference
				yyc4091 = true
			}
			yyh4091.ElemContainerState(yyj4091)
			if yyj4091 < len(yyv4091) {
				if r.TryDecodeAsNil() {
					yyv4091[yyj4091] = LocalObjectReference{}
				} else {
					yyv4094 := &yyv4091[yyj4091]
					yyv4094.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4091 < len(yyv4091) {
			yyv4091 = yyv4091[:yyj4091]
			yyc4091 = true
		} else if yyj4091 == 0 && yyv4091 == nil {
			yyv4091 = []LocalObjectReference{}
			yyc4091 = true
		}
	}
	yyh4091.End()
	if yyc4091 {
		*v = yyv4091
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4095 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4096 := &yyv4095
		yy4096.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4097 := *v
	yyh4097, yyl4097 := z.DecSliceHelperStart()
	var yyc4097 bool
	if yyl4097 == 0 {
		if yyv4097 == nil {
			yyv4097 = []PodCondition{}
			yyc4097 = true
		} else if len(yyv4097) != 0 {
			yyv4097 = yyv4097[:0]
			yyc4097 = true
		}
	} else if yyl4097 > 0 {
		var yyrr4097, yyrl4097 int
		var yyrt4097 bool
		if yyl4097 > cap(yyv4097) {

			yyrg4097 := len(yyv4097) > 0
			yyv24097 := yyv4097
			yyrl4097, yyrt4097 = z.DecInferLen(yyl4097, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4097 {
				if yyrl4097 <= cap(yyv4097) {
					yyv4097 = yyv4097[:yyrl4097]
				} else {
					yyv4097 = make([]PodCondition, yyrl4097)
				}
			} else {
				yyv4097 = make([]PodCondition, yyrl4097)
			}
			yyc4097 = true
			yyrr4097 = len(yyv4097)
			if yyrg4097 {
				copy(yyv4097, yyv24097)
			}
		} else if yyl4097 != len(yyv4097) {
			yyv4097 = yyv4097[:yyl4097]
			yyc4097 = true
		}
		yyj4097 := 0
		for ; yyj4097 < yyrr4097; yyj4097++ {
			yyh4097.ElemContainerState(yyj4097)
			if r.TryDecodeAsNil() {
				yyv4097[yyj4097] = PodCondition{}
			} else {
				yyv4098 := &yyv4097[yyj4097]
				yyv4098.CodecDecodeSelf(d)
			}

		}
		if yyrt4097 {
			for ; yyj4097 < yyl4097; yyj4097++ {
				yyv4097 = append(yyv4097, PodCondition{})
				yyh4097.ElemContainerState(yyj4097)
				if r.TryDecodeAsNil() {
					yyv4097[yyj4097] = PodCondition{}
				} else {
					yyv4099 := &yyv4097[yyj4097]
					yyv4099.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4097 := 0
		for ; !r.CheckBreak(); yyj4097++ {

			if yyj4097 >= len(yyv4097) {
				yyv4097 = append(yyv4097, PodCondition{}) // var yyz4097 PodCondition
				yyc4097 = true
			}
			yyh4097.ElemContainerState(yyj4097)
			if yyj4097 < len(yyv4097) {
				if r.TryDecodeAsNil() {
					yyv4097[yyj4097] = PodCondition{}
				} else {
					yyv4100 := &yyv4097[yyj4097]
					yyv4100.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4097 < len(yyv4097) {
			yyv4097 = yyv4097[:yyj4097]
			yyc4097 = true
		} else if yyj4097 == 0 && yyv4097 == nil {
			yyv4097 = []PodCondition{}
			yyc4097 = true
		}
	}
	yyh4097.End()
	if yyc4097 {
		*v = yyv4097
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4101 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4102 := &yyv4101
		yy4102.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4103 := *v
	yyh4103, yyl4103 := z.DecSliceHelperStart()
	var yyc4103 bool
	if yyl4103 == 0 {
		if yyv4103 == nil {
			yyv4103 = []ContainerStatus{}
			yyc4103 = true
		} else if len(yyv4103) != 0 {
			yyv4103 = yyv4103[:0]
			yyc4103 = true
		}
	} else if yyl4103 > 0 {
		var yyrr4103, yyrl4103 int
		var yyrt4103 bool
		if yyl4103 > cap(yyv4103) {

			yyrg4103 := len(yyv4103) > 0
			yyv24103 := yyv4103
			yyrl4103, yyrt4103 = z.DecInferLen(yyl4103, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4103 {
				if yyrl4103 <= cap(yyv4103) {
					yyv4103 = yyv4103[:yyrl4103]
				} else {
					yyv4103 = make([]ContainerStatus, yyrl4103)
				}
			} else {
				yyv4103 = make([]ContainerStatus, yyrl4103)
			}
			yyc4103 = true
			yyrr4103 = len(yyv4103)
			if yyrg4103 {
				copy(yyv4103, yyv24103)
			}
		} else if yyl4103 != len(yyv4103) {
			yyv4103 = yyv4103[:yyl4103]
			yyc4103 = true
		}
		yyj4103 := 0
		for ; yyj4103 < yyrr4103; yyj4103++ {
			yyh4103.ElemContainerState(yyj4103)
			if r.TryDecodeAsNil() {
				yyv4103[yyj4103] = ContainerStatus{}
			} else {
				yyv4104 := &yyv4103[yyj4103]
				yyv4104.CodecDecodeSelf(d)
			}

		}
		if yyrt4103 {
			for ; yyj4103 < yyl4103; yyj4103++ {
				yyv4103 = append(yyv4103, ContainerStatus{})
				yyh4103.ElemContainerState(yyj4103)
				if r.TryDecodeAsNil() {
					yyv4103[yyj4103] = ContainerStatus{}
				} else {
					yyv4105 := &yyv4103[yyj4103]
					yyv4105.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4103 := 0
		for ; !r.CheckBreak(); yyj4103++ {

			if yyj4103 >= len(yyv4103) {
				yyv4103 = append(yyv4103, ContainerStatus{}) // var yyz4103 ContainerStatus
				yyc4103 = true
			}
			yyh4103.ElemContainerState(yyj4103)
			if yyj4103 < len(yyv4103) {
				if r.TryDecodeAsNil() {
					yyv4103[yyj4103] = ContainerStatus{}
				} else {
					yyv4106 := &yyv4103[yyj4103]
					yyv4106.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4103 < len(yyv4103) {
			yyv4103 = yyv4103[:yyj4103]
			yyc4103 = true
		} else if yyj4103 == 0 && yyv4103 == nil {
			yyv4103 = []ContainerStatus{}
			yyc4103 = true
		}
	}
	yyh4103.End()
	if yyc4103 {
		*v = yyv4103
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4107 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4108 := &yyv4107
		yy4108.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4109 := *v
	yyh4109, yyl4109 := z.DecSliceHelperStart()
	var yyc4109 bool
	if yyl4109 == 0 {
		if yyv4109 == nil {
			yyv4109 = []Pod{}
			yyc4109 = true
		} else if len(yyv4109) != 0 {
			yyv4109 = yyv4109[:0]
			yyc4109 = true
		}
	} else if yyl4109 > 0 {
		var yyrr4109, yyrl4109 int
		var yyrt4109 bool
		if yyl4109 > cap(yyv4109) {

			yyrg4109 := len(yyv4109) > 0
			yyv24109 := yyv4109
			yyrl4109, yyrt4109 = z.DecInferLen(yyl4109, z.DecBasicHandle().MaxInitLen, 528)
			if yyrt4109 {
				if yyrl4109 <= cap(yyv4109) {
					yyv4109 = yyv4109[:yyrl4109]
				} else {
					yyv4109 = make([]Pod, yyrl4109)
				}
			} else {
				yyv4109 = make([]Pod, yyrl4109)
			}
			yyc4109 = true
			yyrr4109 = len(yyv4109)
			if yyrg4109 {
				copy(yyv4109, yyv24109)
			}
		} else if yyl4109 != len(yyv4109) {
			yyv4109 = yyv4109[:yyl4109]
			yyc4109 = true
		}
		yyj4109 := 0
		for ; yyj4109 < yyrr4109; yyj4109++ {
			yyh4109.ElemContainerState(yyj4109)
			if r.TryDecodeAsNil() {
				yyv4109[yyj4109] = Pod{}
			} else {
				yyv4110 := &yyv4109[yyj4109]
				yyv4110.CodecDecodeSelf(d)
			}

		}
		if yyrt4109 {
			for ; yyj4109 < yyl4109; yyj4109++ {
				yyv4109 = append(yyv4109, Pod{})
				yyh4109.ElemContainerState(yyj4109)
				if r.TryDecodeAsNil() {
					yyv4109[yyj4109] = Pod{}
				} else {
					yyv4111 := &yyv4109[yyj4109]
					yyv4111.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4109 := 0
		for ; !r.CheckBreak(); yyj4109++ {

			if yyj4109 >= len(yyv4109) {
				yyv4109 = append(yyv4109, Pod{}) // var yyz4109 Pod
				yyc4109 = true
			}
			yyh4109.ElemContainerState(yyj4109)
			if yyj4109 < len(yyv4109) {
				if r.TryDecodeAsNil() {
					yyv4109[yyj4109] = Pod{}
				} else {
					yyv4112 := &yyv4109[yyj4109]
					yyv4112.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4109 < len(yyv4109) {
			yyv4109 = yyv4109[:yyj4109]
			yyc4109 = true
		} else if yyj4109 == 0 && yyv4109 == nil {
			yyv4109 = []Pod{}
			yyc4109 = true
		}
	}
	yyh4109.End()
	if yyc4109 {
		*v = yyv4109
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4113 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4114 := &yyv4113
		yy4114.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4115 := *v
	yyh4115, yyl4115 := z.DecSliceHelperStart()
	var yyc4115 bool
	if yyl4115 == 0 {
		if yyv4115 == nil {
			yyv4115 = []PodTemplate{}
			yyc4115 = true
		} else if len(yyv4115) != 0 {
			yyv4115 = yyv4115[:0]
			yyc4115 = true
		}
	} else if yyl4115 > 0 {
		var yyrr4115, yyrl4115 int
		var yyrt4115 bool
		if yyl4115 > cap(yyv4115) {

			yyrg4115 := len(yyv4115) > 0
			yyv24115 := yyv4115
			yyrl4115, yyrt4115 = z.DecInferLen(yyl4115, z.DecBasicHandle().MaxInitLen, 552)
			if yyrt4115 {
				if yyrl4115 <= cap(yyv4115) {
					yyv4115 = yyv4115[:yyrl4115]
				} else {
					yyv4115 = make([]PodTemplate, yyrl4115)
				}
			} else {
				yyv4115 = make([]PodTemplate, yyrl4115)
			}
			yyc4115 = true
			yyrr4115 = len(yyv4115)
			if yyrg4115 {
				copy(yyv4115, yyv24115)
			}
		} else if yyl4115 != len(yyv4115) {
			yyv4115 = yyv4115[:yyl4115]
			yyc4115 = true
		}
		yyj4115 := 0
		for ; yyj4115 < yyrr4115; yyj4115++ {
			yyh4115.ElemContainerState(yyj4115)
			if r.TryDecodeAsNil() {
				yyv4115[yyj4115] = PodTemplate{}
			} else {
				yyv4116 := &yyv4115[yyj4115]
				yyv4116.CodecDecodeSelf(d)
			}

		}
		if yyrt4115 {
			for ; yyj4115 < yyl4115; yyj4115++ {
				yyv4115 = append(yyv4115, PodTemplate{})
				yyh4115.ElemContainerState(yyj4115)
				if r.TryDecodeAsNil() {
					yyv4115[yyj4115] = PodTemplate{}
				} else {
					yyv4117 := &yyv4115[yyj4115]
					yyv4117.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4115 := 0
		for ; !r.CheckBreak(); yyj4115++ {

			if yyj4115 >= len(yyv4115) {
				yyv4115 = append(yyv4115, PodTemplate{}) // var yyz4115 PodTemplate
				yyc4115 = true
			}
			yyh4115.ElemContainerState(yyj4115)
			if yyj4115 < len(yyv4115) {
				if r.TryDecodeAsNil() {
					yyv4115[yyj4115] = PodTemplate{}
				} else {
					yyv4118 := &yyv4115[yyj4115]
					yyv4118.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4115 < len(yyv4115) {
			yyv4115 = yyv4115[:yyj4115]
			yyc4115 = true
		} else if yyj4115 == 0 && yyv4115 == nil {
			yyv4115 = []PodTemplate{}
			yyc4115 = true
		}
	}
	yyh4115.End()
	if yyc4115 {
		*v = yyv4115
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4119 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4120 := &yyv4119
		yy4120.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4121 := *v
	yyh4121, yyl4121 := z.DecSliceHelperStart()
	var yyc4121 bool
	if yyl4121 == 0 {
		if yyv4121 == nil {
			yyv4121 = []ReplicationController{}
			yyc4121 = true
		} else if len(yyv4121) != 0 {
			yyv4121 = yyv4121[:0]
			yyc4121 = true
		}
	} else if yyl4121 > 0 {
		var yyrr4121, yyrl4121 int
		var yyrt4121 bool
		if yyl4121 > cap(yyv4121) {

			yyrg4121 := len(yyv4121) > 0
			yyv24121 := yyv4121
			yyrl4121, yyrt4121 = z.DecInferLen(yyl4121, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt4121 {
				if yyrl4121 <= cap(yyv4121) {
					yyv4121 = yyv4121[:yyrl4121]
				} else {
					yyv4121 = make([]ReplicationController, yyrl4121)
				}
			} else {
				yyv4121 = make([]ReplicationController, yyrl4121)
			}
			yyc4121 = true
			yyrr4121 = len(yyv4121)
			if yyrg4121 {
				copy(yyv4121, yyv24121)
			}
		} else if yyl4121 != len(yyv4121) {
			yyv4121 = yyv4121[:yyl4121]
			yyc4121 = true
		}
		yyj4121 := 0
		for ; yyj4121 < yyrr4121; yyj4121++ {
			yyh4121.ElemContainerState(yyj4121)
			if r.TryDecodeAsNil() {
				yyv4121[yyj4121] = ReplicationController{}
			} else {
				yyv4122 := &yyv4121[yyj4121]
				yyv4122.CodecDecodeSelf(d)
			}

		}
		if yyrt4121 {
			for ; yyj4121 < yyl4121; yyj4121++ {
				yyv4121 = append(yyv4121, ReplicationController{})
				yyh4121.ElemContainerState(yyj4121)
				if r.TryDecodeAsNil() {
					yyv4121[yyj4121] = ReplicationController{}
				} else {
					yyv4123 := &yyv4121[yyj4121]
					yyv4123.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4121 := 0
		for ; !r.CheckBreak(); yyj4121++ {

			if yyj4121 >= len(yyv4121) {
				yyv4121 = append(yyv4121, ReplicationController{}) // var yyz4121 ReplicationController
				yyc4121 = true
			}
			yyh4121.ElemContainerState(yyj4121)
			if yyj4121 < len(yyv4121) {
				if r.TryDecodeAsNil() {
					yyv4121[yyj4121] = ReplicationController{}
				} else {
					yyv4124 := &yyv4121[yyj4121]
					yyv4124.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4121 < len(yyv4121) {
			yyv4121 = yyv4121[:yyj4121]
			yyc4121 = true
		} else if yyj4121 == 0 && yyv4121 == nil {
			yyv4121 = []ReplicationController{}
			yyc4121 = true
		}
	}
	yyh4121.End()
	if yyc4121 {
		*v = yyv4121
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4125 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4126 := &yyv4125
		yy4126.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4127 := *v
	yyh4127, yyl4127 := z.DecSliceHelperStart()
	var yyc4127 bool
	if yyl4127 == 0 {
		if yyv4127 == nil {
			yyv4127 = []LoadBalancerIngress{}
			yyc4127 = true
		} else if len(yyv4127) != 0 {
			yyv4127 = yyv4127[:0]
			yyc4127 = true
		}
	} else if yyl4127 > 0 {
		var yyrr4127, yyrl4127 int
		var yyrt4127 bool
		if yyl4127 > cap(yyv4127) {

			yyrg4127 := len(yyv4127) > 0
			yyv24127 := yyv4127
			yyrl4127, yyrt4127 = z.DecInferLen(yyl4127, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4127 {
				if yyrl4127 <= cap(yyv4127) {
					yyv4127 = yyv4127[:yyrl4127]
				} else {
					yyv4127 = make([]LoadBalancerIngress, yyrl4127)
				}
			} else {
				yyv4127 = make([]LoadBalancerIngress, yyrl4127)
			}
			yyc4127 = true
			yyrr4127 = len(yyv4127)
			if yyrg4127 {
				copy(yyv4127, yyv24127)
			}
		} else if yyl4127 != len(yyv4127) {
			yyv4127 = yyv4127[:yyl4127]
			yyc4127 = true
		}
		yyj4127 := 0
		for ; yyj4127 < yyrr4127; yyj4127++ {
			yyh4127.ElemContainerState(yyj4127)
			if r.TryDecodeAsNil() {
				yyv4127[yyj4127] = LoadBalancerIngress{}
			} else {
				yyv4128 := &yyv4127[yyj4127]
				yyv4128.CodecDecodeSelf(d)
			}

		}
		if yyrt4127 {
			for ; yyj4127 < yyl4127; yyj4127++ {
				yyv4127 = append(yyv4127, LoadBalancerIngress{})
				yyh4127.ElemContainerState(yyj4127)
				if r.TryDecodeAsNil() {
					yyv4127[yyj4127] = LoadBalancerIngress{}
				} else {
					yyv4129 := &yyv4127[yyj4127]
					yyv4129.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4127 := 0
		for ; !r.CheckBreak(); yyj4127++ {

			if yyj4127 >= len(yyv4127) {
				yyv4127 = append(yyv4127, LoadBalancerIngress{}) // var yyz4127 LoadBalancerIngress
				yyc4127 = true
			}
			yyh4127.ElemContainerState(yyj4127)
			if yyj4127 < len(yyv4127) {
				if r.TryDecodeAsNil() {
					yyv4127[yyj4127] = LoadBalancerIngress{}
				} else {
					yyv4130 := &yyv4127[yyj4127]
					yyv4130.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4127 < len(yyv4127) {
			yyv4127 = yyv4127[:yyj4127]
			yyc4127 = true
		} else if yyj4127 == 0 && yyv4127 == nil {
			yyv4127 = []LoadBalancerIngress{}
			yyc4127 = true
		}
	}
	yyh4127.End()
	if yyc4127 {
		*v = yyv4127
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4131 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4132 := &yyv4131
		yy4132.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4133 := *v
	yyh4133, yyl4133 := z.DecSliceHelperStart()
	var yyc4133 bool
	if yyl4133 == 0 {
		if yyv4133 == nil {
			yyv4133 = []ServicePort{}
			yyc4133 = true
		} else if len(yyv4133) != 0 {
			yyv4133 = yyv4133[:0]
			yyc4133 = true
		}
	} else if yyl4133 > 0 {
		var yyrr4133, yyrl4133 int
		var yyrt4133 bool
		if yyl4133 > cap(yyv4133) {

			yyrg4133 := len(yyv4133) > 0
			yyv24133 := yyv4133
			yyrl4133, yyrt4133 = z.DecInferLen(yyl4133, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4133 {
				if yyrl4133 <= cap(yyv4133) {
					yyv4133 = yyv4133[:yyrl4133]
				} else {
					yyv4133 = make([]ServicePort, yyrl4133)
				}
			} else {
				yyv4133 = make([]ServicePort, yyrl4133)
			}
			yyc4133 = true
			yyrr4133 = len(yyv4133)
			if yyrg4133 {
				copy(yyv4133, yyv24133)
			}
		} else if yyl4133 != len(yyv4133) {
			yyv4133 = yyv4133[:yyl4133]
			yyc4133 = true
		}
		yyj4133 := 0
		for ; yyj4133 < yyrr4133; yyj4133++ {
			yyh4133.ElemContainerState(yyj4133)
			if r.TryDecodeAsNil() {
				yyv4133[yyj4133] = ServicePort{}
			} else {
				yyv4134 := &yyv4133[yyj4133]
				yyv4134.CodecDecodeSelf(d)
			}

		}
		if yyrt4133 {
			for ; yyj4133 < yyl4133; yyj4133++ {
				yyv4133 = append(yyv4133, ServicePort{})
				yyh4133.ElemContainerState(yyj4133)
				if r.TryDecodeAsNil() {
					yyv4133[yyj4133] = ServicePort{}
				} else {
					yyv4135 := &yyv4133[yyj4133]
					yyv4135.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4133 := 0
		for ; !r.CheckBreak(); yyj4133++ {

			if yyj4133 >= len(yyv4133) {
				yyv4133 = append(yyv4133, ServicePort{}) // var yyz4133 ServicePort
				yyc4133 = true
			}
			yyh4133.ElemContainerState(yyj4133)
			if yyj4133 < len(yyv4133) {
				if r.TryDecodeAsNil() {
					yyv4133[yyj4133] = ServicePort{}
				} else {
					yyv4136 := &yyv4133[yyj4133]
					yyv4136.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4133 < len(yyv4133) {
			yyv4133 = yyv4133[:yyj4133]
			yyc4133 = true
		} else if yyj4133 == 0 && yyv4133 == nil {
			yyv4133 = []ServicePort{}
			yyc4133 = true
		}
	}
	yyh4133.End()
	if yyc4133 {
		*v = yyv4133
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4137 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4138 := &yyv4137
		yy4138.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4139 := *v
	yyh4139, yyl4139 := z.DecSliceHelperStart()
	var yyc4139 bool
	if yyl4139 == 0 {
		if yyv4139 == nil {
			yyv4139 = []Service{}
			yyc4139 = true
		} else if len(yyv4139) != 0 {
			yyv4139 = yyv4139[:0]
			yyc4139 = true
		}
	} else if yyl4139 > 0 {
		var yyrr4139, yyrl4139 int
		var yyrt4139 bool
		if yyl4139 > cap(yyv4139) {

			yyrg4139 := len(yyv4139) > 0
			yyv24139 := yyv4139
			yyrl4139, yyrt4139 = z.DecInferLen(yyl4139, z.DecBasicHandle().MaxInitLen, 360)
			if yyrt4139 {
				if yyrl4139 <= cap(yyv4139) {
					yyv4139 = yyv4139[:yyrl4139]
				} else {
					yyv4139 = make([]Service, yyrl4139)
				}
			} else {
				yyv4139 = make([]Service, yyrl4139)
			}
			yyc4139 = true
			yyrr4139 = len(yyv4139)
			if yyrg4139 {
				copy(yyv4139, yyv24139)
			}
		} else if yyl4139 != len(yyv4139) {
			yyv4139 = yyv4139[:yyl4139]
			yyc4139 = true
		}
		yyj4139 := 0
		for ; yyj4139 < yyrr4139; yyj4139++ {
			yyh4139.ElemContainerState(yyj4139)
			if r.TryDecodeAsNil() {
				yyv4139[yyj4139] = Service{}
			} else {
				yyv4140 := &yyv4139[yyj4139]
				yyv4140.CodecDecodeSelf(d)
			}

		}
		if yyrt4139 {
			for ; yyj4139 < yyl4139; yyj4139++ {
				yyv4139 = append(yyv4139, Service{})
				yyh4139.ElemContainerState(yyj4139)
				if r.TryDecodeAsNil() {
					yyv4139[yyj4139] = Service{}
				} else {
					yyv4141 := &yyv4139[yyj4139]
					yyv4141.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4139 := 0
		for ; !r.CheckBreak(); yyj4139++ {

			if yyj4139 >= len(yyv4139) {
				yyv4139 = append(yyv4139, Service{}) // var yyz4139 Service
				yyc4139 = true
			}
			yyh4139.ElemContainerState(yyj4139)
			if yyj4139 < len(yyv4139) {
				if r.TryDecodeAsNil() {
					yyv4139[yyj4139] = Service{}
				} else {
					yyv4142 := &yyv4139[yyj4139]
					yyv4142.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4139 < len(yyv4139) {
			yyv4139 = yyv4139[:yyj4139]
			yyc4139 = true
		} else if yyj4139 == 0 && yyv4139 == nil {
			yyv4139 = []Service{}
			yyc4139 = true
		}
	}
	yyh4139.End()
	if yyc4139 {
		*v = yyv4139
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4143 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4144 := &yyv4143
		yy4144.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4145 := *v
	yyh4145, yyl4145 := z.DecSliceHelperStart()
	var yyc4145 bool
	if yyl4145 == 0 {
		if yyv4145 == nil {
			yyv4145 = []ObjectReference{}
			yyc4145 = true
		} else if len(yyv4145) != 0 {
			yyv4145 = yyv4145[:0]
			yyc4145 = true
		}
	} else if yyl4145 > 0 {
		var yyrr4145, yyrl4145 int
		var yyrt4145 bool
		if yyl4145 > cap(yyv4145) {

			yyrg4145 := len(yyv4145) > 0
			yyv24145 := yyv4145
			yyrl4145, yyrt4145 = z.DecInferLen(yyl4145, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4145 {
				if yyrl4145 <= cap(yyv4145) {
					yyv4145 = yyv4145[:yyrl4145]
				} else {
					yyv4145 = make([]ObjectReference, yyrl4145)
				}
			} else {
				yyv4145 = make([]ObjectReference, yyrl4145)
			}
			yyc4145 = true
			yyrr4145 = len(yyv4145)
			if yyrg4145 {
				copy(yyv4145, yyv24145)
			}
		} else if yyl4145 != len(yyv4145) {
			yyv4145 = yyv4145[:yyl4145]
			yyc4145 = true
		}
		yyj4145 := 0
		for ; yyj4145 < yyrr4145; yyj4145++ {
			yyh4145.ElemContainerState(yyj4145)
			if r.TryDecodeAsNil() {
				yyv4145[yyj4145] = ObjectReference{}
			} else {
				yyv4146 := &yyv4145[yyj4145]
				yyv4146.CodecDecodeSelf(d)
			}

		}
		if yyrt4145 {
			for ; yyj4145 < yyl4145; yyj4145++ {
				yyv4145 = append(yyv4145, ObjectReference{})
				yyh4145.ElemContainerState(yyj4145)
				if r.TryDecodeAsNil() {
					yyv4145[yyj4145] = ObjectReference{}
				} else {
					yyv4147 := &yyv4145[yyj4145]
					yyv4147.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4145 := 0
		for ; !r.CheckBreak(); yyj4145++ {

			if yyj4145 >= len(yyv4145) {
				yyv4145 = append(yyv4145, ObjectReference{}) // var yyz4145 ObjectReference
				yyc4145 = true
			}
			yyh4145.ElemContainerState(yyj4145)
			if yyj4145 < len(yyv4145) {
				if r.TryDecodeAsNil() {
					yyv4145[yyj4145] = ObjectReference{}
				} else {
					yyv4148 := &yyv4145[yyj4145]
					yyv4148.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4145 < len(yyv4145) {
			yyv4145 = yyv4145[:yyj4145]
			yyc4145 = true
		} else if yyj4145 == 0 && yyv4145 == nil {
			yyv4145 = []ObjectReference{}
			yyc4145 = true
		}
	}
	yyh4145.End()
	if yyc4145 {
		*v = yyv4145
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4149 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4150 := &yyv4149
		yy4150.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4151 := *v
	yyh4151, yyl4151 := z.DecSliceHelperStart()
	var yyc4151 bool
	if yyl4151 == 0 {
		if yyv4151 == nil {
			yyv4151 = []ServiceAccount{}
			yyc4151 = true
		} else if len(yyv4151) != 0 {
			yyv4151 = yyv4151[:0]
			yyc4151 = true
		}
	} else if yyl4151 > 0 {
		var yyrr4151, yyrl4151 int
		var yyrt4151 bool
		if yyl4151 > cap(yyv4151) {

			yyrg4151 := len(yyv4151) > 0
			yyv24151 := yyv4151
			yyrl4151, yyrt4151 = z.DecInferLen(yyl4151, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt4151 {
				if yyrl4151 <= cap(yyv4151) {
					yyv4151 = yyv4151[:yyrl4151]
				} else {
					yyv4151 = make([]ServiceAccount, yyrl4151)
				}
			} else {
				yyv4151 = make([]ServiceAccount, yyrl4151)
			}
			yyc4151 = true
			yyrr4151 = len(yyv4151)
			if yyrg4151 {
				copy(yyv4151, yyv24151)
			}
		} else if yyl4151 != len(yyv4151) {
			yyv4151 = yyv4151[:yyl4151]
			yyc4151 = true
		}
		yyj4151 := 0
		for ; yyj4151 < yyrr4151; yyj4151++ {
			yyh4151.ElemContainerState(yyj4151)
			if r.TryDecodeAsNil() {
				yyv4151[yyj4151] = ServiceAccount{}
			} else {
				yyv4152 := &yyv4151[yyj4151]
				yyv4152.CodecDecodeSelf(d)
			}

		}
		if yyrt4151 {
			for ; yyj4151 < yyl4151; yyj4151++ {
				yyv4151 = append(yyv4151, ServiceAccount{})
				yyh4151.ElemContainerState(yyj4151)
				if r.TryDecodeAsNil() {
					yyv4151[yyj4151] = ServiceAccount{}
				} else {
					yyv4153 := &yyv4151[yyj4151]
					yyv4153.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4151 := 0
		for ; !r.CheckBreak(); yyj4151++ {

			if yyj4151 >= len(yyv4151) {
				yyv4151 = append(yyv4151, ServiceAccount{}) // var yyz4151 ServiceAccount
				yyc4151 = true
			}
			yyh4151.ElemContainerState(yyj4151)
			if yyj4151 < len(yyv4151) {
				if r.TryDecodeAsNil() {
					yyv4151[yyj4151] = ServiceAccount{}
				} else {
					yyv4154 := &yyv4151[yyj4151]
					yyv4154.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4151 < len(yyv4151) {
			yyv4151 = yyv4151[:yyj4151]
			yyc4151 = true
		} else if yyj4151 == 0 && yyv4151 == nil {
			yyv4151 = []ServiceAccount{}
			yyc4151 = true
		}
	}
	yyh4151.End()
	if yyc4151 {
		*v = yyv4151
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4155 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4156 := &yyv4155
		yy4156.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4157 := *v
	yyh4157, yyl4157 := z.DecSliceHelperStart()
	var yyc4157 bool
	if yyl4157 == 0 {
		if yyv4157 == nil {
			yyv4157 = []EndpointSubset{}
			yyc4157 = true
		} else if len(yyv4157) != 0 {
			yyv4157 = yyv4157[:0]
			yyc4157 = true
		}
	} else if yyl4157 > 0 {
		var yyrr4157, yyrl4157 int
		var yyrt4157 bool
		if yyl4157 > cap(yyv4157) {

			yyrg4157 := len(yyv4157) > 0
			yyv24157 := yyv4157
			yyrl4157, yyrt4157 = z.DecInferLen(yyl4157, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4157 {
				if yyrl4157 <= cap(yyv4157) {
					yyv4157 = yyv4157[:yyrl4157]
				} else {
					yyv4157 = make([]EndpointSubset, yyrl4157)
				}
			} else {
				yyv4157 = make([]EndpointSubset, yyrl4157)
			}
			yyc4157 = true
			yyrr4157 = len(yyv4157)
			if yyrg4157 {
				copy(yyv4157, yyv24157)
			}
		} else if yyl4157 != len(yyv4157) {
			yyv4157 = yyv4157[:yyl4157]
			yyc4157 = true
		}
		yyj4157 := 0
		for ; yyj4157 < yyrr4157; yyj4157++ {
			yyh4157.ElemContainerState(yyj4157)
			if r.TryDecodeAsNil() {
				yyv4157[yyj4157] = EndpointSubset{}
			} else {
				yyv4158 := &yyv4157[yyj4157]
				yyv4158.CodecDecodeSelf(d)
			}

		}
		if yyrt4157 {
			for ; yyj4157 < yyl4157; yyj4157++ {
				yyv4157 = append(yyv4157, EndpointSubset{})
				yyh4157.ElemContainerState(yyj4157)
				if r.TryDecodeAsNil() {
					yyv4157[yyj4157] = EndpointSubset{}
				} else {
					yyv4159 := &yyv4157[yyj4157]
					yyv4159.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4157 := 0
		for ; !r.CheckBreak(); yyj4157++ {

			if yyj4157 >= len(yyv4157) {
				yyv4157 = append(yyv4157, EndpointSubset{}) // var yyz4157 EndpointSubset
				yyc4157 = true
			}
			yyh4157.ElemContainerState(yyj4157)
			if yyj4157 < len(yyv4157) {
				if r.TryDecodeAsNil() {
					yyv4157[yyj4157] = EndpointSubset{}
				} else {
					yyv4160 := &yyv4157[yyj4157]
					yyv4160.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4157 < len(yyv4157) {
			yyv4157 = yyv4157[:yyj4157]
			yyc4157 = true
		} else if yyj4157 == 0 && yyv4157 == nil {
			yyv4157 = []EndpointSubset{}
			yyc4157 = true
		}
	}
	yyh4157.End()
	if yyc4157 {
		*v = yyv4157
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4161 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4162 := &yyv4161
		yy4162.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4163 := *v
	yyh4163, yyl4163 := z.DecSliceHelperStart()
	var yyc4163 bool
	if yyl4163 == 0 {
		if yyv4163 == nil {
			yyv4163 = []EndpointAddress{}
			yyc4163 = true
		} else if len(yyv4163) != 0 {
			yyv4163 = yyv4163[:0]
			yyc4163 = true
		}
	} else if yyl4163 > 0 {
		var yyrr4163, yyrl4163 int
		var yyrt4163 bool
		if yyl4163 > cap(yyv4163) {

			yyrg4163 := len(yyv4163) > 0
			yyv24163 := yyv4163
			yyrl4163, yyrt4163 = z.DecInferLen(yyl4163, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4163 {
				if yyrl4163 <= cap(yyv4163) {
					yyv4163 = yyv4163[:yyrl4163]
				} else {
					yyv4163 = make([]EndpointAddress, yyrl4163)
				}
			} else {
				yyv4163 = make([]EndpointAddress, yyrl4163)
			}
			yyc4163 = true
			yyrr4163 = len(yyv4163)
			if yyrg4163 {
				copy(yyv4163, yyv24163)
			}
		} else if yyl4163 != len(yyv4163) {
			yyv4163 = yyv4163[:yyl4163]
			yyc4163 = true
		}
		yyj4163 := 0
		for ; yyj4163 < yyrr4163; yyj4163++ {
			yyh4163.ElemContainerState(yyj4163)
			if r.TryDecodeAsNil() {
				yyv4163[yyj4163] = EndpointAddress{}
			} else {
				yyv4164 := &yyv4163[yyj4163]
				yyv4164.CodecDecodeSelf(d)
			}

		}
		if yyrt4163 {
			for ; yyj4163 < yyl4163; yyj4163++ {
				yyv4163 = append(yyv4163, EndpointAddress{})
				yyh4163.ElemContainerState(yyj4163)
				if r.TryDecodeAsNil() {
					yyv4163[yyj4163] = EndpointAddress{}
				} else {
					yyv4165 := &yyv4163[yyj4163]
					yyv4165.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4163 := 0
		for ; !r.CheckBreak(); yyj4163++ {

			if yyj4163 >= len(yyv4163) {
				yyv4163 = append(yyv4163, EndpointAddress{}) // var yyz4163 EndpointAddress
				yyc4163 = true
			}
			yyh4163.ElemContainerState(yyj4163)
			if yyj4163 < len(yyv4163) {
				if r.TryDecodeAsNil() {
					yyv4163[yyj4163] = EndpointAddress{}
				} else {
					yyv4166 := &yyv4163[yyj4163]
					yyv4166.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4163 < len(yyv4163) {
			yyv4163 = yyv4163[:yyj4163]
			yyc4163 = true
		} else if yyj4163 == 0 && yyv4163 == nil {
			yyv4163 = []EndpointAddress{}
			yyc4163 = true
		}
	}
	yyh4163.End()
	if yyc4163 {
		*v = yyv4163
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4167 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4168 := &yyv4167
		yy4168.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4169 := *v
	yyh4169, yyl4169 := z.DecSliceHelperStart()
	var yyc4169 bool
	if yyl4169 == 0 {
		if yyv4169 == nil {
			yyv4169 = []EndpointPort{}
			yyc4169 = true
		} else if len(yyv4169) != 0 {
			yyv4169 = yyv4169[:0]
			yyc4169 = true
		}
	} else if yyl4169 > 0 {
		var yyrr4169, yyrl4169 int
		var yyrt4169 bool
		if yyl4169 > cap(yyv4169) {

			yyrg4169 := len(yyv4169) > 0
			yyv24169 := yyv4169
			yyrl4169, yyrt4169 = z.DecInferLen(yyl4169, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4169 {
				if yyrl4169 <= cap(yyv4169) {
					yyv4169 = yyv4169[:yyrl4169]
				} else {
					yyv4169 = make([]EndpointPort, yyrl4169)
				}
			} else {
				yyv4169 = make([]EndpointPort, yyrl4169)
			}
			yyc4169 = true
			yyrr4169 = len(yyv4169)
			if yyrg4169 {
				copy(yyv4169, yyv24169)
			}
		} else if yyl4169 != len(yyv4169) {
			yyv4169 = yyv4169[:yyl4169]
			yyc4169 = true
		}
		yyj4169 := 0
		for ; yyj4169 < yyrr4169; yyj4169++ {
			yyh4169.ElemContainerState(yyj4169)
			if r.TryDecodeAsNil() {
				yyv4169[yyj4169] = EndpointPort{}
			} else {
				yyv4170 := &yyv4169[yyj4169]
				yyv4170.CodecDecodeSelf(d)
			}

		}
		if yyrt4169 {
			for ; yyj4169 < yyl4169; yyj4169++ {
				yyv4169 = append(yyv4169, EndpointPort{})
				yyh4169.ElemContainerState(yyj4169)
				if r.TryDecodeAsNil() {
					yyv4169[yyj4169] = EndpointPort{}
				} else {
					yyv4171 := &yyv4169[yyj4169]
					yyv4171.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4169 := 0
		for ; !r.CheckBreak(); yyj4169++ {

			if yyj4169 >= len(yyv4169) {
				yyv4169 = append(yyv4169, EndpointPort{}) // var yyz4169 EndpointPort
				yyc4169 = true
			}
			yyh4169.ElemContainerState(yyj4169)
			if yyj4169 < len(yyv4169) {
				if r.TryDecodeAsNil() {
					yyv4169[yyj4169] = EndpointPort{}
				} else {
					yyv4172 := &yyv4169[yyj4169]
					yyv4172.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4169 < len(yyv4169) {
			yyv4169 = yyv4169[:yyj4169]
			yyc4169 = true
		} else if yyj4169 == 0 && yyv4169 == nil {
			yyv4169 = []EndpointPort{}
			yyc4169 = true
		}
	}
	yyh4169.End()
	if yyc4169 {
		*v = yyv4169
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4173 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4174 := &yyv4173
		yy4174.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4175 := *v
	yyh4175, yyl4175 := z.DecSliceHelperStart()
	var yyc4175 bool
	if yyl4175 == 0 {
		if yyv4175 == nil {
			yyv4175 = []Endpoints{}
			yyc4175 = true
		} else if len(yyv4175) != 0 {
			yyv4175 = yyv4175[:0]
			yyc4175 = true
		}
	} else if yyl4175 > 0 {
		var yyrr4175, yyrl4175 int
		var yyrt4175 bool
		if yyl4175 > cap(yyv4175) {

			yyrg4175 := len(yyv4175) > 0
			yyv24175 := yyv4175
			yyrl4175, yyrt4175 = z.DecInferLen(yyl4175, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4175 {
				if yyrl4175 <= cap(yyv4175) {
					yyv4175 = yyv4175[:yyrl4175]
				} else {
					yyv4175 = make([]Endpoints, yyrl4175)
				}
			} else {
				yyv4175 = make([]Endpoints, yyrl4175)
			}
			yyc4175 = true
			yyrr4175 = len(yyv4175)
			if yyrg4175 {
				copy(yyv4175, yyv24175)
			}
		} else if yyl4175 != len(yyv4175) {
			yyv4175 = yyv4175[:yyl4175]
			yyc4175 = true
		}
		yyj4175 := 0
		for ; yyj4175 < yyrr4175; yyj4175++ {
			yyh4175.ElemContainerState(yyj4175)
			if r.TryDecodeAsNil() {
				yyv4175[yyj4175] = Endpoints{}
			} else {
				yyv4176 := &yyv4175[yyj4175]
				yyv4176.CodecDecodeSelf(d)
			}

		}
		if yyrt4175 {
			for ; yyj4175 < yyl4175; yyj4175++ {
				yyv4175 = append(yyv4175, Endpoints{})
				yyh4175.ElemContainerState(yyj4175)
				if r.TryDecodeAsNil() {
					yyv4175[yyj4175] = Endpoints{}
				} else {
					yyv4177 := &yyv4175[yyj4175]
					yyv4177.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4175 := 0
		for ; !r.CheckBreak(); yyj4175++ {

			if yyj4175 >= len(yyv4175) {
				yyv4175 = append(yyv4175, Endpoints{}) // var yyz4175 Endpoints
				yyc4175 = true
			}
			yyh4175.ElemContainerState(yyj4175)
			if yyj4175 < len(yyv4175) {
				if r.TryDecodeAsNil() {
					yyv4175[yyj4175] = Endpoints{}
				} else {
					yyv4178 := &yyv4175[yyj4175]
					yyv4178.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4175 < len(yyv4175) {
			yyv4175 = yyv4175[:yyj4175]
			yyc4175 = true
		} else if yyj4175 == 0 && yyv4175 == nil {
			yyv4175 = []Endpoints{}
			yyc4175 = true
		}
	}
	yyh4175.End()
	if yyc4175 {
		*v = yyv4175
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4179 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4180 := &yyv4179
		yy4180.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4181 := *v
	yyh4181, yyl4181 := z.DecSliceHelperStart()
	var yyc4181 bool
	if yyl4181 == 0 {
		if yyv4181 == nil {
			yyv4181 = []NodeCondition{}
			yyc4181 = true
		} else if len(yyv4181) != 0 {
			yyv4181 = yyv4181[:0]
			yyc4181 = true
		}
	} else if yyl4181 > 0 {
		var yyrr4181, yyrl4181 int
		var yyrt4181 bool
		if yyl4181 > cap(yyv4181) {

			yyrg4181 := len(yyv4181) > 0
			yyv24181 := yyv4181
			yyrl4181, yyrt4181 = z.DecInferLen(yyl4181, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4181 {
				if yyrl4181 <= cap(yyv4181) {
					yyv4181 = yyv4181[:yyrl4181]
				} else {
					yyv4181 = make([]NodeCondition, yyrl4181)
				}
			} else {
				yyv4181 = make([]NodeCondition, yyrl4181)
			}
			yyc4181 = true
			yyrr4181 = len(yyv4181)
			if yyrg4181 {
				copy(yyv4181, yyv24181)
			}
		} else if yyl4181 != len(yyv4181) {
			yyv4181 = yyv4181[:yyl4181]
			yyc4181 = true
		}
		yyj4181 := 0
		for ; yyj4181 < yyrr4181; yyj4181++ {
			yyh4181.ElemContainerState(yyj4181)
			if r.TryDecodeAsNil() {
				yyv4181[yyj4181] = NodeCondition{}
			} else {
				yyv4182 := &yyv4181[yyj4181]
				yyv4182.CodecDecodeSelf(d)
			}

		}
		if yyrt4181 {
			for ; yyj4181 < yyl4181; yyj4181++ {
				yyv4181 = append(yyv4181, NodeCondition{})
				yyh4181.ElemContainerState(yyj4181)
				if r.TryDecodeAsNil() {
					yyv4181[yyj4181] = NodeCondition{}
				} else {
					yyv4183 := &yyv4181[yyj4181]
					yyv4183.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4181 := 0
		for ; !r.CheckBreak(); yyj4181++ {

			if yyj4181 >= len(yyv4181) {
				yyv4181 = append(yyv4181, NodeCondition{}) // var yyz4181 NodeCondition
				yyc4181 = true
			}
			yyh4181.ElemContainerState(yyj4181)
			if yyj4181 < len(yyv4181) {
				if r.TryDecodeAsNil() {
					yyv4181[yyj4181] = NodeCondition{}
				} else {
					yyv4184 := &yyv4181[yyj4181]
					yyv4184.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4181 < len(yyv4181) {
			yyv4181 = yyv4181[:yyj4181]
			yyc4181 = true
		} else if yyj4181 == 0 && yyv4181 == nil {
			yyv4181 = []NodeCondition{}
			yyc4181 = true
		}
	}
	yyh4181.End()
	if yyc4181 {
		*v = yyv4181
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4185 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4186 := &yyv4185
		yy4186.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4187 := *v
	yyh4187, yyl4187 := z.DecSliceHelperStart()
	var yyc4187 bool
	if yyl4187 == 0 {
		if yyv4187 == nil {
			yyv4187 = []NodeAddress{}
			yyc4187 = true
		} else if len(yyv4187) != 0 {
			yyv4187 = yyv4187[:0]
			yyc4187 = true
		}
	} else if yyl4187 > 0 {
		var yyrr4187, yyrl4187 int
		var yyrt4187 bool
		if yyl4187 > cap(yyv4187) {

			yyrg4187 := len(yyv4187) > 0
			yyv24187 := yyv4187
			yyrl4187, yyrt4187 = z.DecInferLen(yyl4187, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4187 {
				if yyrl4187 <= cap(yyv4187) {
					yyv4187 = yyv4187[:yyrl4187]
				} else {
					yyv4187 = make([]NodeAddress, yyrl4187)
				}
			} else {
				yyv4187 = make([]NodeAddress, yyrl4187)
			}
			yyc4187 = true
			yyrr4187 = len(yyv4187)
			if yyrg4187 {
				copy(yyv4187, yyv24187)
			}
		} else if yyl4187 != len(yyv4187) {
			yyv4187 = yyv4187[:yyl4187]
			yyc4187 = true
		}
		yyj4187 := 0
		for ; yyj4187 < yyrr4187; yyj4187++ {
			yyh4187.ElemContainerState(yyj4187)
			if r.TryDecodeAsNil() {
				yyv4187[yyj4187] = NodeAddress{}
			} else {
				yyv4188 := &yyv4187[yyj4187]
				yyv4188.CodecDecodeSelf(d)
			}

		}
		if yyrt4187 {
			for ; yyj4187 < yyl4187; yyj4187++ {
				yyv4187 = append(yyv4187, NodeAddress{})
				yyh4187.ElemContainerState(yyj4187)
				if r.TryDecodeAsNil() {
					yyv4187[yyj4187] = NodeAddress{}
				} else {
					yyv4189 := &yyv4187[yyj4187]
					yyv4189.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4187 := 0
		for ; !r.CheckBreak(); yyj4187++ {

			if yyj4187 >= len(yyv4187) {
				yyv4187 = append(yyv4187, NodeAddress{}) // var yyz4187 NodeAddress
				yyc4187 = true
			}
			yyh4187.ElemContainerState(yyj4187)
			if yyj4187 < len(yyv4187) {
				if r.TryDecodeAsNil() {
					yyv4187[yyj4187] = NodeAddress{}
				} else {
					yyv4190 := &yyv4187[yyj4187]
					yyv4190.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4187 < len(yyv4187) {
			yyv4187 = yyv4187[:yyj4187]
			yyc4187 = true
		} else if yyj4187 == 0 && yyv4187 == nil {
			yyv4187 = []NodeAddress{}
			yyc4187 = true
		}
	}
	yyh4187.End()
	if yyc4187 {
		*v = yyv4187
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4191 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4192 := &yyv4191
		yy4192.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4193 := *v
	yyh4193, yyl4193 := z.DecSliceHelperStart()
	var yyc4193 bool
	if yyl4193 == 0 {
		if yyv4193 == nil {
			yyv4193 = []ContainerImage{}
			yyc4193 = true
		} else if len(yyv4193) != 0 {
			yyv4193 = yyv4193[:0]
			yyc4193 = true
		}
	} else if yyl4193 > 0 {
		var yyrr4193, yyrl4193 int
		var yyrt4193 bool
		if yyl4193 > cap(yyv4193) {

			yyrg4193 := len(yyv4193) > 0
			yyv24193 := yyv4193
			yyrl4193, yyrt4193 = z.DecInferLen(yyl4193, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4193 {
				if yyrl4193 <= cap(yyv4193) {
					yyv4193 = yyv4193[:yyrl4193]
				} else {
					yyv4193 = make([]ContainerImage, yyrl4193)
				}
			} else {
				yyv4193 = make([]ContainerImage, yyrl4193)
			}
			yyc4193 = true
			yyrr4193 = len(yyv4193)
			if yyrg4193 {
				copy(yyv4193, yyv24193)
			}
		} else if yyl4193 != len(yyv4193) {
			yyv4193 = yyv4193[:yyl4193]
			yyc4193 = true
		}
		yyj4193 := 0
		for ; yyj4193 < yyrr4193; yyj4193++ {
			yyh4193.ElemContainerState(yyj4193)
			if r.TryDecodeAsNil() {
				yyv4193[yyj4193] = ContainerImage{}
			} else {
				yyv4194 := &yyv4193[yyj4193]
				yyv4194.CodecDecodeSelf(d)
			}

		}
		if yyrt4193 {
			for ; yyj4193 < yyl4193; yyj4193++ {
				yyv4193 = append(yyv4193, ContainerImage{})
				yyh4193.ElemContainerState(yyj4193)
				if r.TryDecodeAsNil() {
					yyv4193[yyj4193] = ContainerImage{}
				} else {
					yyv4195 := &yyv4193[yyj4193]
					yyv4195.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4193 := 0
		for ; !r.CheckBreak(); yyj4193++ {

			if yyj4193 >= len(yyv4193) {
				yyv4193 = append(yyv4193, ContainerImage{}) // var yyz4193 ContainerImage
				yyc4193 = true
			}
			yyh4193.ElemContainerState(yyj4193)
			if yyj4193 < len(yyv4193) {
				if r.TryDecodeAsNil() {
					yyv4193[yyj4193] = ContainerImage{}
				} else {
					yyv4196 := &yyv4193[yyj4193]
					yyv4196.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4193 < len(yyv4193) {
			yyv4193 = yyv4193[:yyj4193]
			yyc4193 = true
		} else if yyj4193 == 0 && yyv4193 == nil {
			yyv4193 = []ContainerImage{}
			yyc4193 = true
		}
	}
	yyh4193.End()
	if yyc4193 {
		*v = yyv4193
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4197, yyv4197 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4197.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4198 := &yyv4197
		yym4199 := z.EncBinary()
		_ = yym4199
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4198) {
		} else if !yym4199 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4198)
		} else {
			z.EncFallback(yy4198)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4200 := *v
	yyl4200 := r.ReadMapStart()
	yybh4200 := z.DecBasicHandle()
	if yyv4200 == nil {
		yyrl4200, _ := z.DecInferLen(yyl4200, yybh4200.MaxInitLen, 40)
		yyv4200 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4200)
		*v = yyv4200
	}
	var yymk4200 ResourceName
	var yymv4200 pkg3_resource.Quantity
	var yymg4200 bool
	if yybh4200.MapValueReset {
		yymg4200 = true
	}
	if yyl4200 > 0 {
		for yyj4200 := 0; yyj4200 < yyl4200; yyj4200++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4200 = ""
			} else {
				yymk4200 = ResourceName(r.DecodeString())
			}

			if yymg4200 {
				yymv4200 = yyv4200[yymk4200]
			} else {
				yymv4200 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4200 = pkg3_resource.Quantity{}
			} else {
				yyv4202 := &yymv4200
				yym4203 := z.DecBinary()
				_ = yym4203
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4202) {
				} else if !yym4203 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4202)
				} else {
					z.DecFallback(yyv4202, false)
				}
			}

			if yyv4200 != nil {
				yyv4200[yymk4200] = yymv4200
			}
		}
	} else if yyl4200 < 0 {
		for yyj4200 := 0; !r.CheckBreak(); yyj4200++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4200 = ""
			} else {
				yymk4200 = ResourceName(r.DecodeString())
			}

			if yymg4200 {
				yymv4200 = yyv4200[yymk4200]
			} else {
				yymv4200 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4200 = pkg3_resource.Quantity{}
			} else {
				yyv4205 := &yymv4200
				yym4206 := z.DecBinary()
				_ = yym4206
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4205) {
				} else if !yym4206 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4205)
				} else {
					z.DecFallback(yyv4205, false)
				}
			}

			if yyv4200 != nil {
				yyv4200[yymk4200] = yymv4200
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4207 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4208 := &yyv4207
		yy4208.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4209 := *v
	yyh4209, yyl4209 := z.DecSliceHelperStart()
	var yyc4209 bool
	if yyl4209 == 0 {
		if yyv4209 == nil {
			yyv4209 = []Node{}
			yyc4209 = true
		} else if len(yyv4209) != 0 {
			yyv4209 = yyv4209[:0]
			yyc4209 = true
		}
	} else if yyl4209 > 0 {
		var yyrr4209, yyrl4209 int
		var yyrt4209 bool
		if yyl4209 > cap(yyv4209) {

			yyrg4209 := len(yyv4209) > 0
			yyv24209 := yyv4209
			yyrl4209, yyrt4209 = z.DecInferLen(yyl4209, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4209 {
				if yyrl4209 <= cap(yyv4209) {
					yyv4209 = yyv4209[:yyrl4209]
				} else {
					yyv4209 = make([]Node, yyrl4209)
				}
			} else {
				yyv4209 = make([]Node, yyrl4209)
			}
			yyc4209 = true
			yyrr4209 = len(yyv4209)
			if yyrg4209 {
				copy(yyv4209, yyv24209)
			}
		} else if yyl4209 != len(yyv4209) {
			yyv4209 = yyv4209[:yyl4209]
			yyc4209 = true
		}
		yyj4209 := 0
		for ; yyj4209 < yyrr4209; yyj4209++ {
			yyh4209.ElemContainerState(yyj4209)
			if r.TryDecodeAsNil() {
				yyv4209[yyj4209] = Node{}
			} else {
				yyv4210 := &yyv4209[yyj4209]
				yyv4210.CodecDecodeSelf(d)
			}

		}
		if yyrt4209 {
			for ; yyj4209 < yyl4209; yyj4209++ {
				yyv4209 = append(yyv4209, Node{})
				yyh4209.ElemContainerState(yyj4209)
				if r.TryDecodeAsNil() {
					yyv4209[yyj4209] = Node{}
				} else {
					yyv4211 := &yyv4209[yyj4209]
					yyv4211.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4209 := 0
		for ; !r.CheckBreak(); yyj4209++ {

			if yyj4209 >= len(yyv4209) {
				yyv4209 = append(yyv4209, Node{}) // var yyz4209 Node
				yyc4209 = true
			}
			yyh4209.ElemContainerState(yyj4209)
			if yyj4209 < len(yyv4209) {
				if r.TryDecodeAsNil() {
					yyv4209[yyj4209] = Node{}
				} else {
					yyv4212 := &yyv4209[yyj4209]
					yyv4212.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4209 < len(yyv4209) {
			yyv4209 = yyv4209[:yyj4209]
			yyc4209 = true
		} else if yyj4209 == 0 && yyv4209 == nil {
			yyv4209 = []Node{}
			yyc4209 = true
		}
	}
	yyh4209.End()
	if yyc4209 {
		*v = yyv4209
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4213 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4213.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4214 := *v
	yyh4214, yyl4214 := z.DecSliceHelperStart()
	var yyc4214 bool
	if yyl4214 == 0 {
		if yyv4214 == nil {
			yyv4214 = []FinalizerName{}
			yyc4214 = true
		} else if len(yyv4214) != 0 {
			yyv4214 = yyv4214[:0]
			yyc4214 = true
		}
	} else if yyl4214 > 0 {
		var yyrr4214, yyrl4214 int
		var yyrt4214 bool
		if yyl4214 > cap(yyv4214) {

			yyrl4214, yyrt4214 = z.DecInferLen(yyl4214, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4214 {
				if yyrl4214 <= cap(yyv4214) {
					yyv4214 = yyv4214[:yyrl4214]
				} else {
					yyv4214 = make([]FinalizerName, yyrl4214)
				}
			} else {
				yyv4214 = make([]FinalizerName, yyrl4214)
			}
			yyc4214 = true
			yyrr4214 = len(yyv4214)
		} else if yyl4214 != len(yyv4214) {
			yyv4214 = yyv4214[:yyl4214]
			yyc4214 = true
		}
		yyj4214 := 0
		for ; yyj4214 < yyrr4214; yyj4214++ {
			yyh4214.ElemContainerState(yyj4214)
			if r.TryDecodeAsNil() {
				yyv4214[yyj4214] = ""
			} else {
				yyv4214[yyj4214] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4214 {
			for ; yyj4214 < yyl4214; yyj4214++ {
				yyv4214 = append(yyv4214, "")
				yyh4214.ElemContainerState(yyj4214)
				if r.TryDecodeAsNil() {
					yyv4214[yyj4214] = ""
				} else {
					yyv4214[yyj4214] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4214 := 0
		for ; !r.CheckBreak(); yyj4214++ {

			if yyj4214 >= len(yyv4214) {
				yyv4214 = append(yyv4214, "") // var yyz4214 FinalizerName
				yyc4214 = true
			}
			yyh4214.ElemContainerState(yyj4214)
			if yyj4214 < len(yyv4214) {
				if r.TryDecodeAsNil() {
					yyv4214[yyj4214] = ""
				} else {
					yyv4214[yyj4214] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4214 < len(yyv4214) {
			yyv4214 = yyv4214[:yyj4214]
			yyc4214 = true
		} else if yyj4214 == 0 && yyv4214 == nil {
			yyv4214 = []FinalizerName{}
			yyc4214 = true
		}
	}
	yyh4214.End()
	if yyc4214 {
		*v = yyv4214
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4218 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4219 := &yyv4218
		yy4219.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4220 := *v
	yyh4220, yyl4220 := z.DecSliceHelperStart()
	var yyc4220 bool
	if yyl4220 == 0 {
		if yyv4220 == nil {
			yyv4220 = []Event{}
			yyc4220 = true
		} else if len(yyv4220) != 0 {
			yyv4220 = yyv4220[:0]
			yyc4220 = true
		}
	} else if yyl4220 > 0 {
		var yyrr4220, yyrl4220 int
		var yyrt4220 bool
		if yyl4220 > cap(yyv4220) {

			yyrg4220 := len(yyv4220) > 0
			yyv24220 := yyv4220
			yyrl4220, yyrt4220 = z.DecInferLen(yyl4220, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4220 {
				if yyrl4220 <= cap(yyv4220) {
					yyv4220 = yyv4220[:yyrl4220]
				} else {
					yyv4220 = make([]Event, yyrl4220)
				}
			} else {
				yyv4220 = make([]Event, yyrl4220)
			}
			yyc4220 = true
			yyrr4220 = len(yyv4220)
			if yyrg4220 {
				copy(yyv4220, yyv24220)
			}
		} else if yyl4220 != len(yyv4220) {
			yyv4220 = yyv4220[:yyl4220]
			yyc4220 = true
		}
		yyj4220 := 0
		for ; yyj4220 < yyrr4220; yyj4220++ {
			yyh4220.ElemContainerState(yyj4220)
			if r.TryDecodeAsNil() {
				yyv4220[yyj4220] = Event{}
			} else {
				yyv4221 := &yyv4220[yyj4220]
				yyv4221.CodecDecodeSelf(d)
			}

		}
		if yyrt4220 {
			for ; yyj4220 < yyl4220; yyj4220++ {
				yyv4220 = append(yyv4220, Event{})
				yyh4220.ElemContainerState(yyj4220)
				if r.TryDecodeAsNil() {
					yyv4220[yyj4220] = Event{}
				} else {
					yyv4222 := &yyv4220[yyj4220]
					yyv4222.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4220 := 0
		for ; !r.CheckBreak(); yyj4220++ {

			if yyj4220 >= len(yyv4220) {
				yyv4220 = append(yyv4220, Event{}) // var yyz4220 Event
				yyc4220 = true
			}
			yyh4220.ElemContainerState(yyj4220)
			if yyj4220 < len(yyv4220) {
				if r.TryDecodeAsNil() {
					yyv4220[yyj4220] = Event{}
				} else {
					yyv4223 := &yyv4220[yyj4220]
					yyv4223.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4220 < len(yyv4220) {
			yyv4220 = yyv4220[:yyj4220]
			yyc4220 = true
		} else if yyj4220 == 0 && yyv4220 == nil {
			yyv4220 = []Event{}
			yyc4220 = true
		}
	}
	yyh4220.End()
	if yyc4220 {
		*v = yyv4220
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4224 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4225 := &yyv4224
		yym4226 := z.EncBinary()
		_ = yym4226
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4225) {
		} else if !yym4226 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4225)
		} else {
			z.EncFallback(yy4225)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4227 := *v
	yyh4227, yyl4227 := z.DecSliceHelperStart()
	var yyc4227 bool
	if yyl4227 == 0 {
		if yyv4227 == nil {
			yyv4227 = []pkg6_runtime.RawExtension{}
			yyc4227 = true
		} else if len(yyv4227) != 0 {
			yyv4227 = yyv4227[:0]
			yyc4227 = true
		}
	} else if yyl4227 > 0 {
		var yyrr4227, yyrl4227 int
		var yyrt4227 bool
		if yyl4227 > cap(yyv4227) {

			yyrg4227 := len(yyv4227) > 0
			yyv24227 := yyv4227
			yyrl4227, yyrt4227 = z.DecInferLen(yyl4227, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4227 {
				if yyrl4227 <= cap(yyv4227) {
					yyv4227 = yyv4227[:yyrl4227]
				} else {
					yyv4227 = make([]pkg6_runtime.RawExtension, yyrl4227)
				}
			} else {
				yyv4227 = make([]pkg6_runtime.RawExtension, yyrl4227)
			}
			yyc4227 = true
			yyrr4227 = len(yyv4227)
			if yyrg4227 {
				copy(yyv4227, yyv24227)
			}
		} else if yyl4227 != len(yyv4227) {
			yyv4227 = yyv4227[:yyl4227]
			yyc4227 = true
		}
		yyj4227 := 0
		for ; yyj4227 < yyrr4227; yyj4227++ {
			yyh4227.ElemContainerState(yyj4227)
			if r.TryDecodeAsNil() {
				yyv4227[yyj4227] = pkg6_runtime.RawExtension{}
			} else {
				yyv4228 := &yyv4227[yyj4227]
				yym4229 := z.DecBinary()
				_ = yym4229
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4228) {
				} else if !yym4229 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4228)
				} else {
					z.DecFallback(yyv4228, false)
				}
			}

		}
		if yyrt4227 {
			for ; yyj4227 < yyl4227; yyj4227++ {
				yyv4227 = append(yyv4227, pkg6_runtime.RawExtension{})
				yyh4227.ElemContainerState(yyj4227)
				if r.TryDecodeAsNil() {
					yyv4227[yyj4227] = pkg6_runtime.RawExtension{}
				} else {
					yyv4230 := &yyv4227[yyj4227]
					yym4231 := z.DecBinary()
					_ = yym4231
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4230) {
					} else if !yym4231 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4230)
					} else {
						z.DecFallback(yyv4230, false)
					}
				}

			}
		}

	} else {
		yyj4227 := 0
		for ; !r.CheckBreak(); yyj4227++ {

			if yyj4227 >= len(yyv4227) {
				yyv4227 = append(yyv4227, pkg6_runtime.RawExtension{}) // var yyz4227 pkg6_runtime.RawExtension
				yyc4227 = true
			}
			yyh4227.ElemContainerState(yyj4227)
			if yyj4227 < len(yyv4227) {
				if r.TryDecodeAsNil() {
					yyv4227[yyj4227] = pkg6_runtime.RawExtension{}
				} else {
					yyv4232 := &yyv4227[yyj4227]
					yym4233 := z.DecBinary()
					_ = yym4233
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4232) {
					} else if !yym4233 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4232)
					} else {
						z.DecFallback(yyv4232, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4227 < len(yyv4227) {
			yyv4227 = yyv4227[:yyj4227]
			yyc4227 = true
		} else if yyj4227 == 0 && yyv4227 == nil {
			yyv4227 = []pkg6_runtime.RawExtension{}
			yyc4227 = true
		}
	}
	yyh4227.End()
	if yyc4227 {
		*v = yyv4227
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4234 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4235 := &yyv4234
		yy4235.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4236 := *v
	yyh4236, yyl4236 := z.DecSliceHelperStart()
	var yyc4236 bool
	if yyl4236 == 0 {
		if yyv4236 == nil {
			yyv4236 = []LimitRangeItem{}
			yyc4236 = true
		} else if len(yyv4236) != 0 {
			yyv4236 = yyv4236[:0]
			yyc4236 = true
		}
	} else if yyl4236 > 0 {
		var yyrr4236, yyrl4236 int
		var yyrt4236 bool
		if yyl4236 > cap(yyv4236) {

			yyrg4236 := len(yyv4236) > 0
			yyv24236 := yyv4236
			yyrl4236, yyrt4236 = z.DecInferLen(yyl4236, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4236 {
				if yyrl4236 <= cap(yyv4236) {
					yyv4236 = yyv4236[:yyrl4236]
				} else {
					yyv4236 = make([]LimitRangeItem, yyrl4236)
				}
			} else {
				yyv4236 = make([]LimitRangeItem, yyrl4236)
			}
			yyc4236 = true
			yyrr4236 = len(yyv4236)
			if yyrg4236 {
				copy(yyv4236, yyv24236)
			}
		} else if yyl4236 != len(yyv4236) {
			yyv4236 = yyv4236[:yyl4236]
			yyc4236 = true
		}
		yyj4236 := 0
		for ; yyj4236 < yyrr4236; yyj4236++ {
			yyh4236.ElemContainerState(yyj4236)
			if r.TryDecodeAsNil() {
				yyv4236[yyj4236] = LimitRangeItem{}
			} else {
				yyv4237 := &yyv4236[yyj4236]
				yyv4237.CodecDecodeSelf(d)
			}

		}
		if yyrt4236 {
			for ; yyj4236 < yyl4236; yyj4236++ {
				yyv4236 = append(yyv4236, LimitRangeItem{})
				yyh4236.ElemContainerState(yyj4236)
				if r.TryDecodeAsNil() {
					yyv4236[yyj4236] = LimitRangeItem{}
				} else {
					yyv4238 := &yyv4236[yyj4236]
					yyv4238.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4236 := 0
		for ; !r.CheckBreak(); yyj4236++ {

			if yyj4236 >= len(yyv4236) {
				yyv4236 = append(yyv4236, LimitRangeItem{}) // var yyz4236 LimitRangeItem
				yyc4236 = true
			}
			yyh4236.ElemContainerState(yyj4236)
			if yyj4236 < len(yyv4236) {
				if r.TryDecodeAsNil() {
					yyv4236[yyj4236] = LimitRangeItem{}
				} else {
					yyv4239 := &yyv4236[yyj4236]
					yyv4239.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4236 < len(yyv4236) {
			yyv4236 = yyv4236[:yyj4236]
			yyc4236 = true
		} else if yyj4236 == 0 && yyv4236 == nil {
			yyv4236 = []LimitRangeItem{}
			yyc4236 = true
		}
	}
	yyh4236.End()
	if yyc4236 {
		*v = yyv4236
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4240 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4241 := &yyv4240
		yy4241.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4242 := *v
	yyh4242, yyl4242 := z.DecSliceHelperStart()
	var yyc4242 bool
	if yyl4242 == 0 {
		if yyv4242 == nil {
			yyv4242 = []LimitRange{}
			yyc4242 = true
		} else if len(yyv4242) != 0 {
			yyv4242 = yyv4242[:0]
			yyc4242 = true
		}
	} else if yyl4242 > 0 {
		var yyrr4242, yyrl4242 int
		var yyrt4242 bool
		if yyl4242 > cap(yyv4242) {

			yyrg4242 := len(yyv4242) > 0
			yyv24242 := yyv4242
			yyrl4242, yyrt4242 = z.DecInferLen(yyl4242, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4242 {
				if yyrl4242 <= cap(yyv4242) {
					yyv4242 = yyv4242[:yyrl4242]
				} else {
					yyv4242 = make([]LimitRange, yyrl4242)
				}
			} else {
				yyv4242 = make([]LimitRange, yyrl4242)
			}
			yyc4242 = true
			yyrr4242 = len(yyv4242)
			if yyrg4242 {
				copy(yyv4242, yyv24242)
			}
		} else if yyl4242 != len(yyv4242) {
			yyv4242 = yyv4242[:yyl4242]
			yyc4242 = true
		}
		yyj4242 := 0
		for ; yyj4242 < yyrr4242; yyj4242++ {
			yyh4242.ElemContainerState(yyj4242)
			if r.TryDecodeAsNil() {
				yyv4242[yyj4242] = LimitRange{}
			} else {
				yyv4243 := &yyv4242[yyj4242]
				yyv4243.CodecDecodeSelf(d)
			}

		}
		if yyrt4242 {
			for ; yyj4242 < yyl4242; yyj4242++ {
				yyv4242 = append(yyv4242, LimitRange{})
				yyh4242.ElemContainerState(yyj4242)
				if r.TryDecodeAsNil() {
					yyv4242[yyj4242] = LimitRange{}
				} else {
					yyv4244 := &yyv4242[yyj4242]
					yyv4244.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4242 := 0
		for ; !r.CheckBreak(); yyj4242++ {

			if yyj4242 >= len(yyv4242) {
				yyv4242 = append(yyv4242, LimitRange{}) // var yyz4242 LimitRange
				yyc4242 = true
			}
			yyh4242.ElemContainerState(yyj4242)
			if yyj4242 < len(yyv4242) {
				if r.TryDecodeAsNil() {
					yyv4242[yyj4242] = LimitRange{}
				} else {
					yyv4245 := &yyv4242[yyj4242]
					yyv4245.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4242 < len(yyv4242) {
			yyv4242 = yyv4242[:yyj4242]
			yyc4242 = true
		} else if yyj4242 == 0 && yyv4242 == nil {
			yyv4242 = []LimitRange{}
			yyc4242 = true
		}
	}
	yyh4242.End()
	if yyc4242 {
		*v = yyv4242
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4246 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4247 := &yyv4246
		yy4247.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4248 := *v
	yyh4248, yyl4248 := z.DecSliceHelperStart()
	var yyc4248 bool
	if yyl4248 == 0 {
		if yyv4248 == nil {
			yyv4248 = []ResourceQuota{}
			yyc4248 = true
		} else if len(yyv4248) != 0 {
			yyv4248 = yyv4248[:0]
			yyc4248 = true
		}
	} else if yyl4248 > 0 {
		var yyrr4248, yyrl4248 int
		var yyrt4248 bool
		if yyl4248 > cap(yyv4248) {

			yyrg4248 := len(yyv4248) > 0
			yyv24248 := yyv4248
			yyrl4248, yyrt4248 = z.DecInferLen(yyl4248, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4248 {
				if yyrl4248 <= cap(yyv4248) {
					yyv4248 = yyv4248[:yyrl4248]
				} else {
					yyv4248 = make([]ResourceQuota, yyrl4248)
				}
			} else {
				yyv4248 = make([]ResourceQuota, yyrl4248)
			}
			yyc4248 = true
			yyrr4248 = len(yyv4248)
			if yyrg4248 {
				copy(yyv4248, yyv24248)
			}
		} else if yyl4248 != len(yyv4248) {
			yyv4248 = yyv4248[:yyl4248]
			yyc4248 = true
		}
		yyj4248 := 0
		for ; yyj4248 < yyrr4248; yyj4248++ {
			yyh4248.ElemContainerState(yyj4248)
			if r.TryDecodeAsNil() {
				yyv4248[yyj4248] = ResourceQuota{}
			} else {
				yyv4249 := &yyv4248[yyj4248]
				yyv4249.CodecDecodeSelf(d)
			}

		}
		if yyrt4248 {
			for ; yyj4248 < yyl4248; yyj4248++ {
				yyv4248 = append(yyv4248, ResourceQuota{})
				yyh4248.ElemContainerState(yyj4248)
				if r.TryDecodeAsNil() {
					yyv4248[yyj4248] = ResourceQuota{}
				} else {
					yyv4250 := &yyv4248[yyj4248]
					yyv4250.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4248 := 0
		for ; !r.CheckBreak(); yyj4248++ {

			if yyj4248 >= len(yyv4248) {
				yyv4248 = append(yyv4248, ResourceQuota{}) // var yyz4248 ResourceQuota
				yyc4248 = true
			}
			yyh4248.ElemContainerState(yyj4248)
			if yyj4248 < len(yyv4248) {
				if r.TryDecodeAsNil() {
					yyv4248[yyj4248] = ResourceQuota{}
				} else {
					yyv4251 := &yyv4248[yyj4248]
					yyv4251.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4248 < len(yyv4248) {
			yyv4248 = yyv4248[:yyj4248]
			yyc4248 = true
		} else if yyj4248 == 0 && yyv4248 == nil {
			yyv4248 = []ResourceQuota{}
			yyc4248 = true
		}
	}
	yyh4248.End()
	if yyc4248 {
		*v = yyv4248
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4252, yyv4252 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4253 := z.EncBinary()
		_ = yym4253
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4252))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4252 == nil {
			r.EncodeNil()
		} else {
			yym4254 := z.EncBinary()
			_ = yym4254
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4252))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4255 := *v
	yyl4255 := r.ReadMapStart()
	yybh4255 := z.DecBasicHandle()
	if yyv4255 == nil {
		yyrl4255, _ := z.DecInferLen(yyl4255, yybh4255.MaxInitLen, 40)
		yyv4255 = make(map[string][]uint8, yyrl4255)
		*v = yyv4255
	}
	var yymk4255 string
	var yymv4255 []uint8
	var yymg4255 bool
	if yybh4255.MapValueReset {
		yymg4255 = true
	}
	if yyl4255 > 0 {
		for yyj4255 := 0; yyj4255 < yyl4255; yyj4255++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4255 = ""
			} else {
				yymk4255 = string(r.DecodeString())
			}

			if yymg4255 {
				yymv4255 = yyv4255[yymk4255]
			} else {
				yymv4255 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4255 = nil
			} else {
				yyv4257 := &yymv4255
				yym4258 := z.DecBinary()
				_ = yym4258
				if false {
				} else {
					*yyv4257 = r.DecodeBytes(*(*[]byte)(yyv4257), false, false)
				}
			}

			if yyv4255 != nil {
				yyv4255[yymk4255] = yymv4255
			}
		}
	} else if yyl4255 < 0 {
		for yyj4255 := 0; !r.CheckBreak(); yyj4255++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4255 = ""
			} else {
				yymk4255 = string(r.DecodeString())
			}

			if yymg4255 {
				yymv4255 = yyv4255[yymk4255]
			} else {
				yymv4255 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4255 = nil
			} else {
				yyv4260 := &yymv4255
				yym4261 := z.DecBinary()
				_ = yym4261
				if false {
				} else {
					*yyv4260 = r.DecodeBytes(*(*[]byte)(yyv4260), false, false)
				}
			}

			if yyv4255 != nil {
				yyv4255[yymk4255] = yymv4255
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4262 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4263 := &yyv4262
		yy4263.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4264 := *v
	yyh4264, yyl4264 := z.DecSliceHelperStart()
	var yyc4264 bool
	if yyl4264 == 0 {
		if yyv4264 == nil {
			yyv4264 = []Secret{}
			yyc4264 = true
		} else if len(yyv4264) != 0 {
			yyv4264 = yyv4264[:0]
			yyc4264 = true
		}
	} else if yyl4264 > 0 {
		var yyrr4264, yyrl4264 int
		var yyrt4264 bool
		if yyl4264 > cap(yyv4264) {

			yyrg4264 := len(yyv4264) > 0
			yyv24264 := yyv4264
			yyrl4264, yyrt4264 = z.DecInferLen(yyl4264, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4264 {
				if yyrl4264 <= cap(yyv4264) {
					yyv4264 = yyv4264[:yyrl4264]
				} else {
					yyv4264 = make([]Secret, yyrl4264)
				}
			} else {
				yyv4264 = make([]Secret, yyrl4264)
			}
			yyc4264 = true
			yyrr4264 = len(yyv4264)
			if yyrg4264 {
				copy(yyv4264, yyv24264)
			}
		} else if yyl4264 != len(yyv4264) {
			yyv4264 = yyv4264[:yyl4264]
			yyc4264 = true
		}
		yyj4264 := 0
		for ; yyj4264 < yyrr4264; yyj4264++ {
			yyh4264.ElemContainerState(yyj4264)
			if r.TryDecodeAsNil() {
				yyv4264[yyj4264] = Secret{}
			} else {
				yyv4265 := &yyv4264[yyj4264]
				yyv4265.CodecDecodeSelf(d)
			}

		}
		if yyrt4264 {
			for ; yyj4264 < yyl4264; yyj4264++ {
				yyv4264 = append(yyv4264, Secret{})
				yyh4264.ElemContainerState(yyj4264)
				if r.TryDecodeAsNil() {
					yyv4264[yyj4264] = Secret{}
				} else {
					yyv4266 := &yyv4264[yyj4264]
					yyv4266.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4264 := 0
		for ; !r.CheckBreak(); yyj4264++ {

			if yyj4264 >= len(yyv4264) {
				yyv4264 = append(yyv4264, Secret{}) // var yyz4264 Secret
				yyc4264 = true
			}
			yyh4264.ElemContainerState(yyj4264)
			if yyj4264 < len(yyv4264) {
				if r.TryDecodeAsNil() {
					yyv4264[yyj4264] = Secret{}
				} else {
					yyv4267 := &yyv4264[yyj4264]
					yyv4267.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4264 < len(yyv4264) {
			yyv4264 = yyv4264[:yyj4264]
			yyc4264 = true
		} else if yyj4264 == 0 && yyv4264 == nil {
			yyv4264 = []Secret{}
			yyc4264 = true
		}
	}
	yyh4264.End()
	if yyc4264 {
		*v = yyv4264
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4268 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4269 := &yyv4268
		yy4269.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4270 := *v
	yyh4270, yyl4270 := z.DecSliceHelperStart()
	var yyc4270 bool
	if yyl4270 == 0 {
		if yyv4270 == nil {
			yyv4270 = []ConfigMap{}
			yyc4270 = true
		} else if len(yyv4270) != 0 {
			yyv4270 = yyv4270[:0]
			yyc4270 = true
		}
	} else if yyl4270 > 0 {
		var yyrr4270, yyrl4270 int
		var yyrt4270 bool
		if yyl4270 > cap(yyv4270) {

			yyrg4270 := len(yyv4270) > 0
			yyv24270 := yyv4270
			yyrl4270, yyrt4270 = z.DecInferLen(yyl4270, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt4270 {
				if yyrl4270 <= cap(yyv4270) {
					yyv4270 = yyv4270[:yyrl4270]
				} else {
					yyv4270 = make([]ConfigMap, yyrl4270)
				}
			} else {
				yyv4270 = make([]ConfigMap, yyrl4270)
			}
			yyc4270 = true
			yyrr4270 = len(yyv4270)
			if yyrg4270 {
				copy(yyv4270, yyv24270)
			}
		} else if yyl4270 != len(yyv4270) {
			yyv4270 = yyv4270[:yyl4270]
			yyc4270 = true
		}
		yyj4270 := 0
		for ; yyj4270 < yyrr4270; yyj4270++ {
			yyh4270.ElemContainerState(yyj4270)
			if r.TryDecodeAsNil() {
				yyv4270[yyj4270] = ConfigMap{}
			} else {
				yyv4271 := &yyv4270[yyj4270]
				yyv4271.CodecDecodeSelf(d)
			}

		}
		if yyrt4270 {
			for ; yyj4270 < yyl4270; yyj4270++ {
				yyv4270 = append(yyv4270, ConfigMap{})
				yyh4270.ElemContainerState(yyj4270)
				if r.TryDecodeAsNil() {
					yyv4270[yyj4270] = ConfigMap{}
				} else {
					yyv4272 := &yyv4270[yyj4270]
					yyv4272.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4270 := 0
		for ; !r.CheckBreak(); yyj4270++ {

			if yyj4270 >= len(yyv4270) {
				yyv4270 = append(yyv4270, ConfigMap{}) // var yyz4270 ConfigMap
				yyc4270 = true
			}
			yyh4270.ElemContainerState(yyj4270)
			if yyj4270 < len(yyv4270) {
				if r.TryDecodeAsNil() {
					yyv4270[yyj4270] = ConfigMap{}
				} else {
					yyv4273 := &yyv4270[yyj4270]
					yyv4273.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4270 < len(yyv4270) {
			yyv4270 = yyv4270[:yyj4270]
			yyc4270 = true
		} else if yyj4270 == 0 && yyv4270 == nil {
			yyv4270 = []ConfigMap{}
			yyc4270 = true
		}
	}
	yyh4270.End()
	if yyc4270 {
		*v = yyv4270
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4274 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4275 := &yyv4274
		yy4275.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4276 := *v
	yyh4276, yyl4276 := z.DecSliceHelperStart()
	var yyc4276 bool
	if yyl4276 == 0 {
		if yyv4276 == nil {
			yyv4276 = []ComponentCondition{}
			yyc4276 = true
		} else if len(yyv4276) != 0 {
			yyv4276 = yyv4276[:0]
			yyc4276 = true
		}
	} else if yyl4276 > 0 {
		var yyrr4276, yyrl4276 int
		var yyrt4276 bool
		if yyl4276 > cap(yyv4276) {

			yyrg4276 := len(yyv4276) > 0
			yyv24276 := yyv4276
			yyrl4276, yyrt4276 = z.DecInferLen(yyl4276, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4276 {
				if yyrl4276 <= cap(yyv4276) {
					yyv4276 = yyv4276[:yyrl4276]
				} else {
					yyv4276 = make([]ComponentCondition, yyrl4276)
				}
			} else {
				yyv4276 = make([]ComponentCondition, yyrl4276)
			}
			yyc4276 = true
			yyrr4276 = len(yyv4276)
			if yyrg4276 {
				copy(yyv4276, yyv24276)
			}
		} else if yyl4276 != len(yyv4276) {
			yyv4276 = yyv4276[:yyl4276]
			yyc4276 = true
		}
		yyj4276 := 0
		for ; yyj4276 < yyrr4276; yyj4276++ {
			yyh4276.ElemContainerState(yyj4276)
			if r.TryDecodeAsNil() {
				yyv4276[yyj4276] = ComponentCondition{}
			} else {
				yyv4277 := &yyv4276[yyj4276]
				yyv4277.CodecDecodeSelf(d)
			}

		}
		if yyrt4276 {
			for ; yyj4276 < yyl4276; yyj4276++ {
				yyv4276 = append(yyv4276, ComponentCondition{})
				yyh4276.ElemContainerState(yyj4276)
				if r.TryDecodeAsNil() {
					yyv4276[yyj4276] = ComponentCondition{}
				} else {
					yyv4278 := &yyv4276[yyj4276]
					yyv4278.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4276 := 0
		for ; !r.CheckBreak(); yyj4276++ {

			if yyj4276 >= len(yyv4276) {
				yyv4276 = append(yyv4276, ComponentCondition{}) // var yyz4276 ComponentCondition
				yyc4276 = true
			}
			yyh4276.ElemContainerState(yyj4276)
			if yyj4276 < len(yyv4276) {
				if r.TryDecodeAsNil() {
					yyv4276[yyj4276] = ComponentCondition{}
				} else {
					yyv4279 := &yyv4276[yyj4276]
					yyv4279.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4276 < len(yyv4276) {
			yyv4276 = yyv4276[:yyj4276]
			yyc4276 = true
		} else if yyj4276 == 0 && yyv4276 == nil {
			yyv4276 = []ComponentCondition{}
			yyc4276 = true
		}
	}
	yyh4276.End()
	if yyc4276 {
		*v = yyv4276
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4280 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4281 := &yyv4280
		yy4281.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4282 := *v
	yyh4282, yyl4282 := z.DecSliceHelperStart()
	var yyc4282 bool
	if yyl4282 == 0 {
		if yyv4282 == nil {
			yyv4282 = []ComponentStatus{}
			yyc4282 = true
		} else if len(yyv4282) != 0 {
			yyv4282 = yyv4282[:0]
			yyc4282 = true
		}
	} else if yyl4282 > 0 {
		var yyrr4282, yyrl4282 int
		var yyrt4282 bool
		if yyl4282 > cap(yyv4282) {

			yyrg4282 := len(yyv4282) > 0
			yyv24282 := yyv4282
			yyrl4282, yyrt4282 = z.DecInferLen(yyl4282, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4282 {
				if yyrl4282 <= cap(yyv4282) {
					yyv4282 = yyv4282[:yyrl4282]
				} else {
					yyv4282 = make([]ComponentStatus, yyrl4282)
				}
			} else {
				yyv4282 = make([]ComponentStatus, yyrl4282)
			}
			yyc4282 = true
			yyrr4282 = len(yyv4282)
			if yyrg4282 {
				copy(yyv4282, yyv24282)
			}
		} else if yyl4282 != len(yyv4282) {
			yyv4282 = yyv4282[:yyl4282]
			yyc4282 = true
		}
		yyj4282 := 0
		for ; yyj4282 < yyrr4282; yyj4282++ {
			yyh4282.ElemContainerState(yyj4282)
			if r.TryDecodeAsNil() {
				yyv4282[yyj4282] = ComponentStatus{}
			} else {
				yyv4283 := &yyv4282[yyj4282]
				yyv4283.CodecDecodeSelf(d)
			}

		}
		if yyrt4282 {
			for ; yyj4282 < yyl4282; yyj4282++ {
				yyv4282 = append(yyv4282, ComponentStatus{})
				yyh4282.ElemContainerState(yyj4282)
				if r.TryDecodeAsNil() {
					yyv4282[yyj4282] = ComponentStatus{}
				} else {
					yyv4284 := &yyv4282[yyj4282]
					yyv4284.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4282 := 0
		for ; !r.CheckBreak(); yyj4282++ {

			if yyj4282 >= len(yyv4282) {
				yyv4282 = append(yyv4282, ComponentStatus{}) // var yyz4282 ComponentStatus
				yyc4282 = true
			}
			yyh4282.ElemContainerState(yyj4282)
			if yyj4282 < len(yyv4282) {
				if r.TryDecodeAsNil() {
					yyv4282[yyj4282] = ComponentStatus{}
				} else {
					yyv4285 := &yyv4282[yyj4282]
					yyv4285.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4282 < len(yyv4282) {
			yyv4282 = yyv4282[:yyj4282]
			yyc4282 = true
		} else if yyj4282 == 0 && yyv4282 == nil {
			yyv4282 = []ComponentStatus{}
			yyc4282 = true
		}
	}
	yyh4282.End()
	if yyc4282 {
		*v = yyv4282
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4286 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4287 := &yyv4286
		yy4287.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4288 := *v
	yyh4288, yyl4288 := z.DecSliceHelperStart()
	var yyc4288 bool
	if yyl4288 == 0 {
		if yyv4288 == nil {
			yyv4288 = []DownwardAPIVolumeFile{}
			yyc4288 = true
		} else if len(yyv4288) != 0 {
			yyv4288 = yyv4288[:0]
			yyc4288 = true
		}
	} else if yyl4288 > 0 {
		var yyrr4288, yyrl4288 int
		var yyrt4288 bool
		if yyl4288 > cap(yyv4288) {

			yyrg4288 := len(yyv4288) > 0
			yyv24288 := yyv4288
			yyrl4288, yyrt4288 = z.DecInferLen(yyl4288, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4288 {
				if yyrl4288 <= cap(yyv4288) {
					yyv4288 = yyv4288[:yyrl4288]
				} else {
					yyv4288 = make([]DownwardAPIVolumeFile, yyrl4288)
				}
			} else {
				yyv4288 = make([]DownwardAPIVolumeFile, yyrl4288)
			}
			yyc4288 = true
			yyrr4288 = len(yyv4288)
			if yyrg4288 {
				copy(yyv4288, yyv24288)
			}
		} else if yyl4288 != len(yyv4288) {
			yyv4288 = yyv4288[:yyl4288]
			yyc4288 = true
		}
		yyj4288 := 0
		for ; yyj4288 < yyrr4288; yyj4288++ {
			yyh4288.ElemContainerState(yyj4288)
			if r.TryDecodeAsNil() {
				yyv4288[yyj4288] = DownwardAPIVolumeFile{}
			} else {
				yyv4289 := &yyv4288[yyj4288]
				yyv4289.CodecDecodeSelf(d)
			}

		}
		if yyrt4288 {
			for ; yyj4288 < yyl4288; yyj4288++ {
				yyv4288 = append(yyv4288, DownwardAPIVolumeFile{})
				yyh4288.ElemContainerState(yyj4288)
				if r.TryDecodeAsNil() {
					yyv4288[yyj4288] = DownwardAPIVolumeFile{}
				} else {
					yyv4290 := &yyv4288[yyj4288]
					yyv4290.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4288 := 0
		for ; !r.CheckBreak(); yyj4288++ {

			if yyj4288 >= len(yyv4288) {
				yyv4288 = append(yyv4288, DownwardAPIVolumeFile{}) // var yyz4288 DownwardAPIVolumeFile
				yyc4288 = true
			}
			yyh4288.ElemContainerState(yyj4288)
			if yyj4288 < len(yyv4288) {
				if r.TryDecodeAsNil() {
					yyv4288[yyj4288] = DownwardAPIVolumeFile{}
				} else {
					yyv4291 := &yyv4288[yyj4288]
					yyv4291.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4288 < len(yyv4288) {
			yyv4288 = yyv4288[:yyj4288]
			yyc4288 = true
		} else if yyj4288 == 0 && yyv4288 == nil {
			yyv4288 = []DownwardAPIVolumeFile{}
			yyc4288 = true
		}
	}
	yyh4288.End()
	if yyc4288 {
		*v = yyv4288
	}
}
