/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_intstr.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [19]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq82[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq82[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(19)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.Cinder == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.CephFS == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.Flocker == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.FC == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr82 || yy2arr82 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AzureFile == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr82 || yy2arr82 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym104 := z.DecBinary()
	_ = yym104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct105 := r.ContainerType()
		if yyct105 == codecSelferValueTypeMap1234 {
			yyl105 := r.ReadMapStart()
			if yyl105 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl105, d)
			}
		} else if yyct105 == codecSelferValueTypeArray1234 {
			yyl105 := r.ReadArrayStart()
			if yyl105 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys106Slc
	var yyhl106 bool = l >= 0
	for yyj106 := 0; ; yyj106++ {
		if yyhl106 {
			if yyj106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys106Slc = r.DecodeBytes(yys106Slc, true, true)
		yys106 := string(yys106Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys106 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys106)
		} // end switch yys106
	} // end for yyj106
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj126 int
	var yyb126 bool
	var yyhl126 bool = l >= 0
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj126++
		if yyhl126 {
			yyb126 = yyj126 > l
		} else {
			yyb126 = r.CheckBreak()
		}
		if yyb126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym146 := z.EncBinary()
		_ = yym146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep147 := !z.EncBinary()
			yy2arr147 := z.EncBasicHandle().StructToArray
			var yyq147 [18]bool
			_, _, _ = yysep147, yyq147, yy2arr147
			const yyr147 bool = false
			yyq147[0] = x.HostPath != nil
			yyq147[1] = x.EmptyDir != nil
			yyq147[2] = x.GCEPersistentDisk != nil
			yyq147[3] = x.AWSElasticBlockStore != nil
			yyq147[4] = x.GitRepo != nil
			yyq147[5] = x.Secret != nil
			yyq147[6] = x.NFS != nil
			yyq147[7] = x.ISCSI != nil
			yyq147[8] = x.Glusterfs != nil
			yyq147[9] = x.PersistentVolumeClaim != nil
			yyq147[10] = x.RBD != nil
			yyq147[11] = x.FlexVolume != nil
			yyq147[12] = x.Cinder != nil
			yyq147[13] = x.CephFS != nil
			yyq147[14] = x.Flocker != nil
			yyq147[15] = x.DownwardAPI != nil
			yyq147[16] = x.FC != nil
			yyq147[17] = x.AzureFile != nil
			var yynn147 int
			if yyr147 || yy2arr147 {
				r.EncodeArrayStart(18)
			} else {
				yynn147 = 0
				for _, b := range yyq147 {
					if b {
						yynn147++
					}
				}
				r.EncodeMapStart(yynn147)
				yynn147 = 0
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym166 := z.DecBinary()
	_ = yym166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct167 := r.ContainerType()
		if yyct167 == codecSelferValueTypeMap1234 {
			yyl167 := r.ReadMapStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl167, d)
			}
		} else if yyct167 == codecSelferValueTypeArray1234 {
			yyl167 := r.ReadArrayStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys168Slc
	var yyhl168 bool = l >= 0
	for yyj168 := 0; ; yyj168++ {
		if yyhl168 {
			if yyj168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys168Slc = r.DecodeBytes(yys168Slc, true, true)
		yys168 := string(yys168Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys168 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys168)
		} // end switch yys168
	} // end for yyj168
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj187 int
	var yyb187 bool
	var yyhl187 bool = l >= 0
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj187++
		if yyhl187 {
			yyb187 = yyj187 > l
		} else {
			yyb187 = r.CheckBreak()
		}
		if yyb187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym206 := z.EncBinary()
		_ = yym206
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep207 := !z.EncBinary()
			yy2arr207 := z.EncBasicHandle().StructToArray
			var yyq207 [13]bool
			_, _, _ = yysep207, yyq207, yy2arr207
			const yyr207 bool = false
			yyq207[0] = x.GCEPersistentDisk != nil
			yyq207[1] = x.AWSElasticBlockStore != nil
			yyq207[2] = x.HostPath != nil
			yyq207[3] = x.Glusterfs != nil
			yyq207[4] = x.NFS != nil
			yyq207[5] = x.RBD != nil
			yyq207[6] = x.ISCSI != nil
			yyq207[7] = x.FlexVolume != nil
			yyq207[8] = x.Cinder != nil
			yyq207[9] = x.CephFS != nil
			yyq207[10] = x.FC != nil
			yyq207[11] = x.Flocker != nil
			yyq207[12] = x.AzureFile != nil
			var yynn207 int
			if yyr207 || yy2arr207 {
				r.EncodeArrayStart(13)
			} else {
				yynn207 = 0
				for _, b := range yyq207 {
					if b {
						yynn207++
					}
				}
				r.EncodeMapStart(yynn207)
				yynn207 = 0
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[7] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[8] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[9] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[10] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[11] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym221 := z.DecBinary()
	_ = yym221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct222 := r.ContainerType()
		if yyct222 == codecSelferValueTypeMap1234 {
			yyl222 := r.ReadMapStart()
			if yyl222 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl222, d)
			}
		} else if yyct222 == codecSelferValueTypeArray1234 {
			yyl222 := r.ReadArrayStart()
			if yyl222 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl222, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys223Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys223Slc
	var yyhl223 bool = l >= 0
	for yyj223 := 0; ; yyj223++ {
		if yyhl223 {
			if yyj223 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys223Slc = r.DecodeBytes(yys223Slc, true, true)
		yys223 := string(yys223Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys223 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys223)
		} // end switch yys223
	} // end for yyj223
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym251 := z.EncBinary()
		_ = yym251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep252 := !z.EncBinary()
			yy2arr252 := z.EncBasicHandle().StructToArray
			var yyq252 [2]bool
			_, _, _ = yysep252, yyq252, yy2arr252
			const yyr252 bool = false
			yyq252[1] = x.ReadOnly != false
			var yynn252 int
			if yyr252 || yy2arr252 {
				r.EncodeArrayStart(2)
			} else {
				yynn252 = 1
				for _, b := range yyq252 {
					if b {
						yynn252++
					}
				}
				r.EncodeMapStart(yynn252)
				yynn252 = 0
			}
			if yyr252 || yy2arr252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym254 := z.EncBinary()
				_ = yym254
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym255 := z.EncBinary()
				_ = yym255
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr252 || yy2arr252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq252[1] {
					yym257 := z.EncBinary()
					_ = yym257
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq252[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym258 := z.EncBinary()
					_ = yym258
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr252 || yy2arr252 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym259 := z.DecBinary()
	_ = yym259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct260 := r.ContainerType()
		if yyct260 == codecSelferValueTypeMap1234 {
			yyl260 := r.ReadMapStart()
			if yyl260 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl260, d)
			}
		} else if yyct260 == codecSelferValueTypeArray1234 {
			yyl260 := r.ReadArrayStart()
			if yyl260 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl260, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys261Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys261Slc
	var yyhl261 bool = l >= 0
	for yyj261 := 0; ; yyj261++ {
		if yyhl261 {
			if yyj261 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys261Slc = r.DecodeBytes(yys261Slc, true, true)
		yys261 := string(yys261Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys261 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys261)
		} // end switch yys261
	} // end for yyj261
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj264 int
	var yyb264 bool
	var yyhl264 bool = l >= 0
	yyj264++
	if yyhl264 {
		yyb264 = yyj264 > l
	} else {
		yyb264 = r.CheckBreak()
	}
	if yyb264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj264++
	if yyhl264 {
		yyb264 = yyj264 > l
	} else {
		yyb264 = r.CheckBreak()
	}
	if yyb264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj264++
		if yyhl264 {
			yyb264 = yyj264 > l
		} else {
			yyb264 = r.CheckBreak()
		}
		if yyb264 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj264-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym267 := z.EncBinary()
		_ = yym267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep268 := !z.EncBinary()
			yy2arr268 := z.EncBasicHandle().StructToArray
			var yyq268 [5]bool
			_, _, _ = yysep268, yyq268, yy2arr268
			const yyr268 bool = false
			yyq268[0] = true
			yyq268[1] = true
			yyq268[2] = true
			yyq268[3] = x.Kind != ""
			yyq268[4] = x.APIVersion != ""
			var yynn268 int
			if yyr268 || yy2arr268 {
				r.EncodeArrayStart(5)
			} else {
				yynn268 = 0
				for _, b := range yyq268 {
					if b {
						yynn268++
					}
				}
				r.EncodeMapStart(yynn268)
				yynn268 = 0
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[0] {
					yy270 := &x.ObjectMeta
					yy270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq268[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy271 := &x.ObjectMeta
					yy271.CodecEncodeSelf(e)
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[1] {
					yy273 := &x.Spec
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq268[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy274 := &x.Spec
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[2] {
					yy276 := &x.Status
					yy276.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq268[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy277 := &x.Status
					yy277.CodecEncodeSelf(e)
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[3] {
					yym279 := z.EncBinary()
					_ = yym279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq268[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym280 := z.EncBinary()
					_ = yym280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[4] {
					yym282 := z.EncBinary()
					_ = yym282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq268[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym283 := z.EncBinary()
					_ = yym283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym284 := z.DecBinary()
	_ = yym284
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct285 := r.ContainerType()
		if yyct285 == codecSelferValueTypeMap1234 {
			yyl285 := r.ReadMapStart()
			if yyl285 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl285, d)
			}
		} else if yyct285 == codecSelferValueTypeArray1234 {
			yyl285 := r.ReadArrayStart()
			if yyl285 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl285, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys286Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys286Slc
	var yyhl286 bool = l >= 0
	for yyj286 := 0; ; yyj286++ {
		if yyhl286 {
			if yyj286 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys286Slc = r.DecodeBytes(yys286Slc, true, true)
		yys286 := string(yys286Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys286 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv287 := &x.ObjectMeta
				yyv287.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv288 := &x.Spec
				yyv288.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv289 := &x.Status
				yyv289.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys286)
		} // end switch yys286
	} // end for yyj286
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj292 int
	var yyb292 bool
	var yyhl292 bool = l >= 0
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv293 := &x.ObjectMeta
		yyv293.CodecDecodeSelf(d)
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv294 := &x.Spec
		yyv294.CodecDecodeSelf(d)
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv295 := &x.Status
		yyv295.CodecDecodeSelf(d)
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj292++
		if yyhl292 {
			yyb292 = yyj292 > l
		} else {
			yyb292 = r.CheckBreak()
		}
		if yyb292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym298 := z.EncBinary()
		_ = yym298
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep299 := !z.EncBinary()
			yy2arr299 := z.EncBasicHandle().StructToArray
			var yyq299 [17]bool
			_, _, _ = yysep299, yyq299, yy2arr299
			const yyr299 bool = false
			yyq299[1] = len(x.AccessModes) != 0
			yyq299[2] = x.ClaimRef != nil
			yyq299[3] = x.PersistentVolumeReclaimPolicy != ""
			yyq299[4] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq299[5] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq299[6] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq299[7] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq299[8] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq299[9] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq299[10] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq299[11] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq299[12] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq299[13] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq299[14] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq299[15] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq299[16] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			var yynn299 int
			if yyr299 || yy2arr299 {
				r.EncodeArrayStart(17)
			} else {
				yynn299 = 1
				for _, b := range yyq299 {
					if b {
						yynn299++
					}
				}
				r.EncodeMapStart(yynn299)
				yynn299 = 0
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym302 := z.EncBinary()
						_ = yym302
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq299[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym303 := z.EncBinary()
						_ = yym303
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[2] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq299[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[3] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq299[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			var yyn306 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn306 = true
				goto LABEL306
			}
		LABEL306:
			if yyr299 || yy2arr299 {
				if yyn306 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[4] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn306 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn307 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn307 = true
				goto LABEL307
			}
		LABEL307:
			if yyr299 || yy2arr299 {
				if yyn307 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[5] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn307 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn308 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn308 = true
				goto LABEL308
			}
		LABEL308:
			if yyr299 || yy2arr299 {
				if yyn308 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[6] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn308 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn309 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn309 = true
				goto LABEL309
			}
		LABEL309:
			if yyr299 || yy2arr299 {
				if yyn309 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[7] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn309 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn310 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn310 = true
				goto LABEL310
			}
		LABEL310:
			if yyr299 || yy2arr299 {
				if yyn310 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[8] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn310 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn311 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn311 = true
				goto LABEL311
			}
		LABEL311:
			if yyr299 || yy2arr299 {
				if yyn311 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[9] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn311 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn312 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn312 = true
				goto LABEL312
			}
		LABEL312:
			if yyr299 || yy2arr299 {
				if yyn312 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[10] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn312 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn313 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn313 = true
				goto LABEL313
			}
		LABEL313:
			if yyr299 || yy2arr299 {
				if yyn313 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[11] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn313 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn314 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn314 = true
				goto LABEL314
			}
		LABEL314:
			if yyr299 || yy2arr299 {
				if yyn314 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn314 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn315 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn315 = true
				goto LABEL315
			}
		LABEL315:
			if yyr299 || yy2arr299 {
				if yyn315 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn315 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn316 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn316 = true
				goto LABEL316
			}
		LABEL316:
			if yyr299 || yy2arr299 {
				if yyn316 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[14] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn316 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn317 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn317 = true
				goto LABEL317
			}
		LABEL317:
			if yyr299 || yy2arr299 {
				if yyn317 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn317 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn318 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn318 = true
				goto LABEL318
			}
		LABEL318:
			if yyr299 || yy2arr299 {
				if yyn318 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[16] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn318 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym319 := z.DecBinary()
	_ = yym319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct320 := r.ContainerType()
		if yyct320 == codecSelferValueTypeMap1234 {
			yyl320 := r.ReadMapStart()
			if yyl320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl320, d)
			}
		} else if yyct320 == codecSelferValueTypeArray1234 {
			yyl320 := r.ReadArrayStart()
			if yyl320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys321Slc
	var yyhl321 bool = l >= 0
	for yyj321 := 0; ; yyj321++ {
		if yyhl321 {
			if yyj321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys321Slc = r.DecodeBytes(yys321Slc, true, true)
		yys321 := string(yys321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys321 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv322 := &x.Capacity
				yyv322.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv323 := &x.AccessModes
				yym324 := z.DecBinary()
				_ = yym324
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv323), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys321)
		} // end switch yys321
	} // end for yyj321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj340 int
	var yyb340 bool
	var yyhl340 bool = l >= 0
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv341 := &x.Capacity
		yyv341.CodecDecodeSelf(d)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv342 := &x.AccessModes
		yym343 := z.DecBinary()
		_ = yym343
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv342), d)
		}
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj340++
		if yyhl340 {
			yyb340 = yyj340 > l
		} else {
			yyb340 = r.CheckBreak()
		}
		if yyb340 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj340-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym359 := z.EncBinary()
	_ = yym359
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym360 := z.DecBinary()
	_ = yym360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym361 := z.EncBinary()
		_ = yym361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep362 := !z.EncBinary()
			yy2arr362 := z.EncBasicHandle().StructToArray
			var yyq362 [3]bool
			_, _, _ = yysep362, yyq362, yy2arr362
			const yyr362 bool = false
			yyq362[0] = x.Phase != ""
			yyq362[1] = x.Message != ""
			yyq362[2] = x.Reason != ""
			var yynn362 int
			if yyr362 || yy2arr362 {
				r.EncodeArrayStart(3)
			} else {
				yynn362 = 0
				for _, b := range yyq362 {
					if b {
						yynn362++
					}
				}
				r.EncodeMapStart(yynn362)
				yynn362 = 0
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq362[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq362[1] {
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq362[2] {
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym370 := z.DecBinary()
	_ = yym370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct371 := r.ContainerType()
		if yyct371 == codecSelferValueTypeMap1234 {
			yyl371 := r.ReadMapStart()
			if yyl371 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl371, d)
			}
		} else if yyct371 == codecSelferValueTypeArray1234 {
			yyl371 := r.ReadArrayStart()
			if yyl371 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys372Slc
	var yyhl372 bool = l >= 0
	for yyj372 := 0; ; yyj372++ {
		if yyhl372 {
			if yyj372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys372Slc = r.DecodeBytes(yys372Slc, true, true)
		yys372 := string(yys372Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys372 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys372)
		} // end switch yys372
	} // end for yyj372
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj376 int
	var yyb376 bool
	var yyhl376 bool = l >= 0
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj376++
		if yyhl376 {
			yyb376 = yyj376 > l
		} else {
			yyb376 = r.CheckBreak()
		}
		if yyb376 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj376-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym380 := z.EncBinary()
		_ = yym380
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep381 := !z.EncBinary()
			yy2arr381 := z.EncBasicHandle().StructToArray
			var yyq381 [4]bool
			_, _, _ = yysep381, yyq381, yy2arr381
			const yyr381 bool = false
			yyq381[0] = true
			yyq381[2] = x.Kind != ""
			yyq381[3] = x.APIVersion != ""
			var yynn381 int
			if yyr381 || yy2arr381 {
				r.EncodeArrayStart(4)
			} else {
				yynn381 = 1
				for _, b := range yyq381 {
					if b {
						yynn381++
					}
				}
				r.EncodeMapStart(yynn381)
				yynn381 = 0
			}
			if yyr381 || yy2arr381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq381[0] {
					yy383 := &x.ListMeta
					yym384 := z.EncBinary()
					_ = yym384
					if false {
					} else if z.HasExtensions() && z.EncExt(yy383) {
					} else {
						z.EncFallback(yy383)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq381[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy385 := &x.ListMeta
					yym386 := z.EncBinary()
					_ = yym386
					if false {
					} else if z.HasExtensions() && z.EncExt(yy385) {
					} else {
						z.EncFallback(yy385)
					}
				}
			}
			if yyr381 || yy2arr381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym388 := z.EncBinary()
					_ = yym388
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym389 := z.EncBinary()
					_ = yym389
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr381 || yy2arr381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq381[2] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq381[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr381 || yy2arr381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq381[3] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq381[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr381 || yy2arr381 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym396 := z.DecBinary()
	_ = yym396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct397 := r.ContainerType()
		if yyct397 == codecSelferValueTypeMap1234 {
			yyl397 := r.ReadMapStart()
			if yyl397 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl397, d)
			}
		} else if yyct397 == codecSelferValueTypeArray1234 {
			yyl397 := r.ReadArrayStart()
			if yyl397 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys398Slc
	var yyhl398 bool = l >= 0
	for yyj398 := 0; ; yyj398++ {
		if yyhl398 {
			if yyj398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys398Slc = r.DecodeBytes(yys398Slc, true, true)
		yys398 := string(yys398Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys398 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv399 := &x.ListMeta
				yym400 := z.DecBinary()
				_ = yym400
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv399) {
				} else {
					z.DecFallback(yyv399, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv401 := &x.Items
				yym402 := z.DecBinary()
				_ = yym402
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv401), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys398)
		} // end switch yys398
	} // end for yyj398
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj405 int
	var yyb405 bool
	var yyhl405 bool = l >= 0
	yyj405++
	if yyhl405 {
		yyb405 = yyj405 > l
	} else {
		yyb405 = r.CheckBreak()
	}
	if yyb405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv406 := &x.ListMeta
		yym407 := z.DecBinary()
		_ = yym407
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv406) {
		} else {
			z.DecFallback(yyv406, false)
		}
	}
	yyj405++
	if yyhl405 {
		yyb405 = yyj405 > l
	} else {
		yyb405 = r.CheckBreak()
	}
	if yyb405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv408 := &x.Items
		yym409 := z.DecBinary()
		_ = yym409
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv408), d)
		}
	}
	yyj405++
	if yyhl405 {
		yyb405 = yyj405 > l
	} else {
		yyb405 = r.CheckBreak()
	}
	if yyb405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj405++
	if yyhl405 {
		yyb405 = yyj405 > l
	} else {
		yyb405 = r.CheckBreak()
	}
	if yyb405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj405++
		if yyhl405 {
			yyb405 = yyj405 > l
		} else {
			yyb405 = r.CheckBreak()
		}
		if yyb405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym412 := z.EncBinary()
		_ = yym412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep413 := !z.EncBinary()
			yy2arr413 := z.EncBasicHandle().StructToArray
			var yyq413 [5]bool
			_, _, _ = yysep413, yyq413, yy2arr413
			const yyr413 bool = false
			yyq413[0] = true
			yyq413[1] = true
			yyq413[2] = true
			yyq413[3] = x.Kind != ""
			yyq413[4] = x.APIVersion != ""
			var yynn413 int
			if yyr413 || yy2arr413 {
				r.EncodeArrayStart(5)
			} else {
				yynn413 = 0
				for _, b := range yyq413 {
					if b {
						yynn413++
					}
				}
				r.EncodeMapStart(yynn413)
				yynn413 = 0
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[0] {
					yy415 := &x.ObjectMeta
					yy415.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq413[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.ObjectMeta
					yy416.CodecEncodeSelf(e)
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[1] {
					yy418 := &x.Spec
					yy418.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy419 := &x.Spec
					yy419.CodecEncodeSelf(e)
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[2] {
					yy421 := &x.Status
					yy421.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy422 := &x.Status
					yy422.CodecEncodeSelf(e)
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[3] {
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[4] {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym429 := z.DecBinary()
	_ = yym429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct430 := r.ContainerType()
		if yyct430 == codecSelferValueTypeMap1234 {
			yyl430 := r.ReadMapStart()
			if yyl430 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl430, d)
			}
		} else if yyct430 == codecSelferValueTypeArray1234 {
			yyl430 := r.ReadArrayStart()
			if yyl430 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl430, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys431Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys431Slc
	var yyhl431 bool = l >= 0
	for yyj431 := 0; ; yyj431++ {
		if yyhl431 {
			if yyj431 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys431Slc = r.DecodeBytes(yys431Slc, true, true)
		yys431 := string(yys431Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys431 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv432 := &x.ObjectMeta
				yyv432.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv433 := &x.Spec
				yyv433.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv434 := &x.Status
				yyv434.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys431)
		} // end switch yys431
	} // end for yyj431
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv438 := &x.ObjectMeta
		yyv438.CodecDecodeSelf(d)
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv439 := &x.Spec
		yyv439.CodecDecodeSelf(d)
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv440 := &x.Status
		yyv440.CodecDecodeSelf(d)
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym443 := z.EncBinary()
		_ = yym443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep444 := !z.EncBinary()
			yy2arr444 := z.EncBasicHandle().StructToArray
			var yyq444 [4]bool
			_, _, _ = yysep444, yyq444, yy2arr444
			const yyr444 bool = false
			yyq444[0] = true
			yyq444[2] = x.Kind != ""
			yyq444[3] = x.APIVersion != ""
			var yynn444 int
			if yyr444 || yy2arr444 {
				r.EncodeArrayStart(4)
			} else {
				yynn444 = 1
				for _, b := range yyq444 {
					if b {
						yynn444++
					}
				}
				r.EncodeMapStart(yynn444)
				yynn444 = 0
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq444[0] {
					yy446 := &x.ListMeta
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy446) {
					} else {
						z.EncFallback(yy446)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy448 := &x.ListMeta
					yym449 := z.EncBinary()
					_ = yym449
					if false {
					} else if z.HasExtensions() && z.EncExt(yy448) {
					} else {
						z.EncFallback(yy448)
					}
				}
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym452 := z.EncBinary()
					_ = yym452
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq444[2] {
					yym454 := z.EncBinary()
					_ = yym454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq444[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym455 := z.EncBinary()
					_ = yym455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq444[3] {
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq444[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym458 := z.EncBinary()
					_ = yym458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr444 || yy2arr444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym459 := z.DecBinary()
	_ = yym459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct460 := r.ContainerType()
		if yyct460 == codecSelferValueTypeMap1234 {
			yyl460 := r.ReadMapStart()
			if yyl460 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl460, d)
			}
		} else if yyct460 == codecSelferValueTypeArray1234 {
			yyl460 := r.ReadArrayStart()
			if yyl460 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys461Slc
	var yyhl461 bool = l >= 0
	for yyj461 := 0; ; yyj461++ {
		if yyhl461 {
			if yyj461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys461Slc = r.DecodeBytes(yys461Slc, true, true)
		yys461 := string(yys461Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys461 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv462 := &x.ListMeta
				yym463 := z.DecBinary()
				_ = yym463
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv462) {
				} else {
					z.DecFallback(yyv462, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv464 := &x.Items
				yym465 := z.DecBinary()
				_ = yym465
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv464), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys461)
		} // end switch yys461
	} // end for yyj461
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj468 int
	var yyb468 bool
	var yyhl468 bool = l >= 0
	yyj468++
	if yyhl468 {
		yyb468 = yyj468 > l
	} else {
		yyb468 = r.CheckBreak()
	}
	if yyb468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv469 := &x.ListMeta
		yym470 := z.DecBinary()
		_ = yym470
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv469) {
		} else {
			z.DecFallback(yyv469, false)
		}
	}
	yyj468++
	if yyhl468 {
		yyb468 = yyj468 > l
	} else {
		yyb468 = r.CheckBreak()
	}
	if yyb468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv471 := &x.Items
		yym472 := z.DecBinary()
		_ = yym472
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv471), d)
		}
	}
	yyj468++
	if yyhl468 {
		yyb468 = yyj468 > l
	} else {
		yyb468 = r.CheckBreak()
	}
	if yyb468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj468++
	if yyhl468 {
		yyb468 = yyj468 > l
	} else {
		yyb468 = r.CheckBreak()
	}
	if yyb468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj468++
		if yyhl468 {
			yyb468 = yyj468 > l
		} else {
			yyb468 = r.CheckBreak()
		}
		if yyb468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym475 := z.EncBinary()
		_ = yym475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep476 := !z.EncBinary()
			yy2arr476 := z.EncBasicHandle().StructToArray
			var yyq476 [3]bool
			_, _, _ = yysep476, yyq476, yy2arr476
			const yyr476 bool = false
			yyq476[0] = len(x.AccessModes) != 0
			yyq476[1] = true
			yyq476[2] = x.VolumeName != ""
			var yynn476 int
			if yyr476 || yy2arr476 {
				r.EncodeArrayStart(3)
			} else {
				yynn476 = 0
				for _, b := range yyq476 {
					if b {
						yynn476++
					}
				}
				r.EncodeMapStart(yynn476)
				yynn476 = 0
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[1] {
					yy481 := &x.Resources
					yy481.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy482 := &x.Resources
					yy482.CodecEncodeSelf(e)
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[2] {
					yym484 := z.EncBinary()
					_ = yym484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym485 := z.EncBinary()
					_ = yym485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym486 := z.DecBinary()
	_ = yym486
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct487 := r.ContainerType()
		if yyct487 == codecSelferValueTypeMap1234 {
			yyl487 := r.ReadMapStart()
			if yyl487 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl487, d)
			}
		} else if yyct487 == codecSelferValueTypeArray1234 {
			yyl487 := r.ReadArrayStart()
			if yyl487 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl487, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys488Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys488Slc
	var yyhl488 bool = l >= 0
	for yyj488 := 0; ; yyj488++ {
		if yyhl488 {
			if yyj488 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys488Slc = r.DecodeBytes(yys488Slc, true, true)
		yys488 := string(yys488Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys488 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv489 := &x.AccessModes
				yym490 := z.DecBinary()
				_ = yym490
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv489), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv491 := &x.Resources
				yyv491.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys488)
		} // end switch yys488
	} // end for yyj488
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj493 int
	var yyb493 bool
	var yyhl493 bool = l >= 0
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv494 := &x.AccessModes
		yym495 := z.DecBinary()
		_ = yym495
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv494), d)
		}
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv496 := &x.Resources
		yyv496.CodecDecodeSelf(d)
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj493++
		if yyhl493 {
			yyb493 = yyj493 > l
		} else {
			yyb493 = r.CheckBreak()
		}
		if yyb493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym498 := z.EncBinary()
		_ = yym498
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep499 := !z.EncBinary()
			yy2arr499 := z.EncBasicHandle().StructToArray
			var yyq499 [3]bool
			_, _, _ = yysep499, yyq499, yy2arr499
			const yyr499 bool = false
			yyq499[0] = x.Phase != ""
			yyq499[1] = len(x.AccessModes) != 0
			yyq499[2] = len(x.Capacity) != 0
			var yynn499 int
			if yyr499 || yy2arr499 {
				r.EncodeArrayStart(3)
			} else {
				yynn499 = 0
				for _, b := range yyq499 {
					if b {
						yynn499++
					}
				}
				r.EncodeMapStart(yynn499)
				yynn499 = 0
			}
			if yyr499 || yy2arr499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq499[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq499[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr499 || yy2arr499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq499[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym502 := z.EncBinary()
						_ = yym502
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq499[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym503 := z.EncBinary()
						_ = yym503
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr499 || yy2arr499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq499[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq499[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr499 || yy2arr499 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym505 := z.DecBinary()
	_ = yym505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct506 := r.ContainerType()
		if yyct506 == codecSelferValueTypeMap1234 {
			yyl506 := r.ReadMapStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl506, d)
			}
		} else if yyct506 == codecSelferValueTypeArray1234 {
			yyl506 := r.ReadArrayStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys507Slc
	var yyhl507 bool = l >= 0
	for yyj507 := 0; ; yyj507++ {
		if yyhl507 {
			if yyj507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys507Slc = r.DecodeBytes(yys507Slc, true, true)
		yys507 := string(yys507Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys507 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv509 := &x.AccessModes
				yym510 := z.DecBinary()
				_ = yym510
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv509), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv511 := &x.Capacity
				yyv511.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys507)
		} // end switch yys507
	} // end for yyj507
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj512 int
	var yyb512 bool
	var yyhl512 bool = l >= 0
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv514 := &x.AccessModes
		yym515 := z.DecBinary()
		_ = yym515
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv514), d)
		}
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv516 := &x.Capacity
		yyv516.CodecDecodeSelf(d)
	}
	for {
		yyj512++
		if yyhl512 {
			yyb512 = yyj512 > l
		} else {
			yyb512 = r.CheckBreak()
		}
		if yyb512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym517 := z.EncBinary()
	_ = yym517
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym518 := z.DecBinary()
	_ = yym518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [1]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			var yynn524 int
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(1)
			} else {
				yynn524 = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
				yynn524 = 0
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym528 := z.DecBinary()
	_ = yym528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct529 := r.ContainerType()
		if yyct529 == codecSelferValueTypeMap1234 {
			yyl529 := r.ReadMapStart()
			if yyl529 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl529, d)
			}
		} else if yyct529 == codecSelferValueTypeArray1234 {
			yyl529 := r.ReadArrayStart()
			if yyl529 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl529, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys530Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys530Slc
	var yyhl530 bool = l >= 0
	for yyj530 := 0; ; yyj530++ {
		if yyhl530 {
			if yyj530 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys530Slc = r.DecodeBytes(yys530Slc, true, true)
		yys530 := string(yys530Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys530 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys530)
		} // end switch yys530
	} // end for yyj530
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj532 int
	var yyb532 bool
	var yyhl532 bool = l >= 0
	yyj532++
	if yyhl532 {
		yyb532 = yyj532 > l
	} else {
		yyb532 = r.CheckBreak()
	}
	if yyb532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj532++
		if yyhl532 {
			yyb532 = yyj532 > l
		} else {
			yyb532 = r.CheckBreak()
		}
		if yyb532 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj532-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym534 := z.EncBinary()
		_ = yym534
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep535 := !z.EncBinary()
			yy2arr535 := z.EncBasicHandle().StructToArray
			var yyq535 [1]bool
			_, _, _ = yysep535, yyq535, yy2arr535
			const yyr535 bool = false
			yyq535[0] = x.Medium != ""
			var yynn535 int
			if yyr535 || yy2arr535 {
				r.EncodeArrayStart(1)
			} else {
				yynn535 = 0
				for _, b := range yyq535 {
					if b {
						yynn535++
					}
				}
				r.EncodeMapStart(yynn535)
				yynn535 = 0
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq535[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq535[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct538 := r.ContainerType()
		if yyct538 == codecSelferValueTypeMap1234 {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if yyct538 == codecSelferValueTypeArray1234 {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys539 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj541 int
	var yyb541 bool
	var yyhl541 bool = l >= 0
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj541++
		if yyhl541 {
			yyb541 = yyj541 > l
		} else {
			yyb541 = r.CheckBreak()
		}
		if yyb541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym543 := z.EncBinary()
	_ = yym543
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym544 := z.DecBinary()
	_ = yym544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym545 := z.EncBinary()
	_ = yym545
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym546 := z.DecBinary()
	_ = yym546
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym547 := z.EncBinary()
		_ = yym547
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep548 := !z.EncBinary()
			yy2arr548 := z.EncBasicHandle().StructToArray
			var yyq548 [4]bool
			_, _, _ = yysep548, yyq548, yy2arr548
			const yyr548 bool = false
			yyq548[1] = x.FSType != ""
			yyq548[2] = x.Partition != 0
			yyq548[3] = x.ReadOnly != false
			var yynn548 int
			if yyr548 || yy2arr548 {
				r.EncodeArrayStart(4)
			} else {
				yynn548 = 1
				for _, b := range yyq548 {
					if b {
						yynn548++
					}
				}
				r.EncodeMapStart(yynn548)
				yynn548 = 0
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym550 := z.EncBinary()
				_ = yym550
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym551 := z.EncBinary()
				_ = yym551
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq548[1] {
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq548[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym554 := z.EncBinary()
					_ = yym554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq548[2] {
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq548[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym557 := z.EncBinary()
					_ = yym557
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq548[3] {
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq548[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym561 := z.DecBinary()
	_ = yym561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct562 := r.ContainerType()
		if yyct562 == codecSelferValueTypeMap1234 {
			yyl562 := r.ReadMapStart()
			if yyl562 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl562, d)
			}
		} else if yyct562 == codecSelferValueTypeArray1234 {
			yyl562 := r.ReadArrayStart()
			if yyl562 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys563Slc
	var yyhl563 bool = l >= 0
	for yyj563 := 0; ; yyj563++ {
		if yyhl563 {
			if yyj563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys563Slc = r.DecodeBytes(yys563Slc, true, true)
		yys563 := string(yys563Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys563 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys563)
		} // end switch yys563
	} // end for yyj563
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj568 int
	var yyb568 bool
	var yyhl568 bool = l >= 0
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj568++
		if yyhl568 {
			yyb568 = yyj568 > l
		} else {
			yyb568 = r.CheckBreak()
		}
		if yyb568 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj568-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym573 := z.EncBinary()
		_ = yym573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep574 := !z.EncBinary()
			yy2arr574 := z.EncBasicHandle().StructToArray
			var yyq574 [6]bool
			_, _, _ = yysep574, yyq574, yy2arr574
			const yyr574 bool = false
			yyq574[0] = x.TargetPortal != ""
			yyq574[1] = x.IQN != ""
			yyq574[2] = x.Lun != 0
			yyq574[3] = x.ISCSIInterface != ""
			yyq574[4] = x.FSType != ""
			yyq574[5] = x.ReadOnly != false
			var yynn574 int
			if yyr574 || yy2arr574 {
				r.EncodeArrayStart(6)
			} else {
				yynn574 = 0
				for _, b := range yyq574 {
					if b {
						yynn574++
					}
				}
				r.EncodeMapStart(yynn574)
				yynn574 = 0
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq574[0] {
					yym576 := z.EncBinary()
					_ = yym576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym577 := z.EncBinary()
					_ = yym577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq574[1] {
					yym579 := z.EncBinary()
					_ = yym579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq574[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym580 := z.EncBinary()
					_ = yym580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq574[2] {
					yym582 := z.EncBinary()
					_ = yym582
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq574[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq574[3] {
					yym585 := z.EncBinary()
					_ = yym585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq574[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym586 := z.EncBinary()
					_ = yym586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq574[4] {
					yym588 := z.EncBinary()
					_ = yym588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq574[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq574[5] {
					yym591 := z.EncBinary()
					_ = yym591
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq574[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym593 := z.DecBinary()
	_ = yym593
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct594 := r.ContainerType()
		if yyct594 == codecSelferValueTypeMap1234 {
			yyl594 := r.ReadMapStart()
			if yyl594 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl594, d)
			}
		} else if yyct594 == codecSelferValueTypeArray1234 {
			yyl594 := r.ReadArrayStart()
			if yyl594 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl594, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys595Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys595Slc
	var yyhl595 bool = l >= 0
	for yyj595 := 0; ; yyj595++ {
		if yyhl595 {
			if yyj595 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys595Slc = r.DecodeBytes(yys595Slc, true, true)
		yys595 := string(yys595Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys595 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys595)
		} // end switch yys595
	} // end for yyj595
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj602 int
	var yyb602 bool
	var yyhl602 bool = l >= 0
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj602++
		if yyhl602 {
			yyb602 = yyj602 > l
		} else {
			yyb602 = r.CheckBreak()
		}
		if yyb602 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj602-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [4]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[2] = x.FSType != ""
			yyq610[3] = x.ReadOnly != false
			var yynn610 int
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(4)
			} else {
				yynn610 = 2
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
				yynn610 = 0
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy615 := *x.Lun
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeInt(int64(yy615))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy617 := *x.Lun
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeInt(int64(yy617))
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[2] {
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq610[3] {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq610[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym625 := z.DecBinary()
	_ = yym625
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct626 := r.ContainerType()
		if yyct626 == codecSelferValueTypeMap1234 {
			yyl626 := r.ReadMapStart()
			if yyl626 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl626, d)
			}
		} else if yyct626 == codecSelferValueTypeArray1234 {
			yyl626 := r.ReadArrayStart()
			if yyl626 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl626, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys627Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys627Slc
	var yyhl627 bool = l >= 0
	for yyj627 := 0; ; yyj627++ {
		if yyhl627 {
			if yyj627 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys627Slc = r.DecodeBytes(yys627Slc, true, true)
		yys627 := string(yys627Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys627 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv628 := &x.TargetWWNs
				yym629 := z.DecBinary()
				_ = yym629
				if false {
				} else {
					z.F.DecSliceStringX(yyv628, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym631 := z.DecBinary()
				_ = yym631
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys627)
		} // end switch yys627
	} // end for yyj627
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj634 int
	var yyb634 bool
	var yyhl634 bool = l >= 0
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv635 := &x.TargetWWNs
		yym636 := z.DecBinary()
		_ = yym636
		if false {
		} else {
			z.F.DecSliceStringX(yyv635, false, d)
		}
	}
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym638 := z.DecBinary()
		_ = yym638
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj634++
		if yyhl634 {
			yyb634 = yyj634 > l
		} else {
			yyb634 = r.CheckBreak()
		}
		if yyb634 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj634-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym641 := z.EncBinary()
		_ = yym641
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep642 := !z.EncBinary()
			yy2arr642 := z.EncBasicHandle().StructToArray
			var yyq642 [5]bool
			_, _, _ = yysep642, yyq642, yy2arr642
			const yyr642 bool = false
			yyq642[1] = x.FSType != ""
			yyq642[2] = x.SecretRef != nil
			yyq642[3] = x.ReadOnly != false
			yyq642[4] = len(x.Options) != 0
			var yynn642 int
			if yyr642 || yy2arr642 {
				r.EncodeArrayStart(5)
			} else {
				yynn642 = 1
				for _, b := range yyq642 {
					if b {
						yynn642++
					}
				}
				r.EncodeMapStart(yynn642)
				yynn642 = 0
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym645 := z.EncBinary()
				_ = yym645
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq642[1] {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq642[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq642[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq642[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq642[3] {
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq642[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq642[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym654 := z.EncBinary()
						_ = yym654
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq642[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym655 := z.EncBinary()
						_ = yym655
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym656 := z.DecBinary()
	_ = yym656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct657 := r.ContainerType()
		if yyct657 == codecSelferValueTypeMap1234 {
			yyl657 := r.ReadMapStart()
			if yyl657 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl657, d)
			}
		} else if yyct657 == codecSelferValueTypeArray1234 {
			yyl657 := r.ReadArrayStart()
			if yyl657 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl657, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys658Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys658Slc
	var yyhl658 bool = l >= 0
	for yyj658 := 0; ; yyj658++ {
		if yyhl658 {
			if yyj658 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys658Slc = r.DecodeBytes(yys658Slc, true, true)
		yys658 := string(yys658Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys658 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv663 := &x.Options
				yym664 := z.DecBinary()
				_ = yym664
				if false {
				} else {
					z.F.DecMapStringStringX(yyv663, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys658)
		} // end switch yys658
	} // end for yyj658
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj665 int
	var yyb665 bool
	var yyhl665 bool = l >= 0
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv670 := &x.Options
		yym671 := z.DecBinary()
		_ = yym671
		if false {
		} else {
			z.F.DecMapStringStringX(yyv670, false, d)
		}
	}
	for {
		yyj665++
		if yyhl665 {
			yyb665 = yyj665 > l
		} else {
			yyb665 = r.CheckBreak()
		}
		if yyb665 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj665-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym672 := z.EncBinary()
		_ = yym672
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep673 := !z.EncBinary()
			yy2arr673 := z.EncBasicHandle().StructToArray
			var yyq673 [4]bool
			_, _, _ = yysep673, yyq673, yy2arr673
			const yyr673 bool = false
			yyq673[1] = x.FSType != ""
			yyq673[2] = x.Partition != 0
			yyq673[3] = x.ReadOnly != false
			var yynn673 int
			if yyr673 || yy2arr673 {
				r.EncodeArrayStart(4)
			} else {
				yynn673 = 1
				for _, b := range yyq673 {
					if b {
						yynn673++
					}
				}
				r.EncodeMapStart(yynn673)
				yynn673 = 0
			}
			if yyr673 || yy2arr673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym675 := z.EncBinary()
				_ = yym675
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym676 := z.EncBinary()
				_ = yym676
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr673 || yy2arr673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq673[1] {
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq673[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr673 || yy2arr673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq673[2] {
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq673[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym682 := z.EncBinary()
					_ = yym682
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr673 || yy2arr673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq673[3] {
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq673[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr673 || yy2arr673 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym686 := z.DecBinary()
	_ = yym686
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct687 := r.ContainerType()
		if yyct687 == codecSelferValueTypeMap1234 {
			yyl687 := r.ReadMapStart()
			if yyl687 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl687, d)
			}
		} else if yyct687 == codecSelferValueTypeArray1234 {
			yyl687 := r.ReadArrayStart()
			if yyl687 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl687, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys688Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys688Slc
	var yyhl688 bool = l >= 0
	for yyj688 := 0; ; yyj688++ {
		if yyhl688 {
			if yyj688 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys688Slc = r.DecodeBytes(yys688Slc, true, true)
		yys688 := string(yys688Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys688 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys688)
		} // end switch yys688
	} // end for yyj688
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj693 int
	var yyb693 bool
	var yyhl693 bool = l >= 0
	yyj693++
	if yyhl693 {
		yyb693 = yyj693 > l
	} else {
		yyb693 = r.CheckBreak()
	}
	if yyb693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj693++
	if yyhl693 {
		yyb693 = yyj693 > l
	} else {
		yyb693 = r.CheckBreak()
	}
	if yyb693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj693++
	if yyhl693 {
		yyb693 = yyj693 > l
	} else {
		yyb693 = r.CheckBreak()
	}
	if yyb693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj693++
	if yyhl693 {
		yyb693 = yyj693 > l
	} else {
		yyb693 = r.CheckBreak()
	}
	if yyb693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj693++
		if yyhl693 {
			yyb693 = yyj693 > l
		} else {
			yyb693 = r.CheckBreak()
		}
		if yyb693 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj693-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym698 := z.EncBinary()
		_ = yym698
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep699 := !z.EncBinary()
			yy2arr699 := z.EncBasicHandle().StructToArray
			var yyq699 [3]bool
			_, _, _ = yysep699, yyq699, yy2arr699
			const yyr699 bool = false
			yyq699[1] = x.Revision != ""
			yyq699[2] = x.Directory != ""
			var yynn699 int
			if yyr699 || yy2arr699 {
				r.EncodeArrayStart(3)
			} else {
				yynn699 = 1
				for _, b := range yyq699 {
					if b {
						yynn699++
					}
				}
				r.EncodeMapStart(yynn699)
				yynn699 = 0
			}
			if yyr699 || yy2arr699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym701 := z.EncBinary()
				_ = yym701
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym702 := z.EncBinary()
				_ = yym702
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr699 || yy2arr699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq699[1] {
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq699[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr699 || yy2arr699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq699[2] {
					yym707 := z.EncBinary()
					_ = yym707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq699[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr699 || yy2arr699 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym709 := z.DecBinary()
	_ = yym709
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct710 := r.ContainerType()
		if yyct710 == codecSelferValueTypeMap1234 {
			yyl710 := r.ReadMapStart()
			if yyl710 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl710, d)
			}
		} else if yyct710 == codecSelferValueTypeArray1234 {
			yyl710 := r.ReadArrayStart()
			if yyl710 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl710, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys711Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys711Slc
	var yyhl711 bool = l >= 0
	for yyj711 := 0; ; yyj711++ {
		if yyhl711 {
			if yyj711 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys711Slc = r.DecodeBytes(yys711Slc, true, true)
		yys711 := string(yys711Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys711 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys711)
		} // end switch yys711
	} // end for yyj711
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj715 int
	var yyb715 bool
	var yyhl715 bool = l >= 0
	yyj715++
	if yyhl715 {
		yyb715 = yyj715 > l
	} else {
		yyb715 = r.CheckBreak()
	}
	if yyb715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj715++
	if yyhl715 {
		yyb715 = yyj715 > l
	} else {
		yyb715 = r.CheckBreak()
	}
	if yyb715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj715++
	if yyhl715 {
		yyb715 = yyj715 > l
	} else {
		yyb715 = r.CheckBreak()
	}
	if yyb715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj715++
		if yyhl715 {
			yyb715 = yyj715 > l
		} else {
			yyb715 = r.CheckBreak()
		}
		if yyb715 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj715-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym719 := z.EncBinary()
		_ = yym719
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep720 := !z.EncBinary()
			yy2arr720 := z.EncBasicHandle().StructToArray
			var yyq720 [1]bool
			_, _, _ = yysep720, yyq720, yy2arr720
			const yyr720 bool = false
			yyq720[0] = x.SecretName != ""
			var yynn720 int
			if yyr720 || yy2arr720 {
				r.EncodeArrayStart(1)
			} else {
				yynn720 = 0
				for _, b := range yyq720 {
					if b {
						yynn720++
					}
				}
				r.EncodeMapStart(yynn720)
				yynn720 = 0
			}
			if yyr720 || yy2arr720 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq720[0] {
					yym722 := z.EncBinary()
					_ = yym722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq720[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr720 || yy2arr720 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym724 := z.DecBinary()
	_ = yym724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct725 := r.ContainerType()
		if yyct725 == codecSelferValueTypeMap1234 {
			yyl725 := r.ReadMapStart()
			if yyl725 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl725, d)
			}
		} else if yyct725 == codecSelferValueTypeArray1234 {
			yyl725 := r.ReadArrayStart()
			if yyl725 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys726Slc
	var yyhl726 bool = l >= 0
	for yyj726 := 0; ; yyj726++ {
		if yyhl726 {
			if yyj726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys726Slc = r.DecodeBytes(yys726Slc, true, true)
		yys726 := string(yys726Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys726 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys726)
		} // end switch yys726
	} // end for yyj726
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj728 int
	var yyb728 bool
	var yyhl728 bool = l >= 0
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj728++
		if yyhl728 {
			yyb728 = yyj728 > l
		} else {
			yyb728 = r.CheckBreak()
		}
		if yyb728 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj728-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym730 := z.EncBinary()
		_ = yym730
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep731 := !z.EncBinary()
			yy2arr731 := z.EncBasicHandle().StructToArray
			var yyq731 [3]bool
			_, _, _ = yysep731, yyq731, yy2arr731
			const yyr731 bool = false
			yyq731[2] = x.ReadOnly != false
			var yynn731 int
			if yyr731 || yy2arr731 {
				r.EncodeArrayStart(3)
			} else {
				yynn731 = 2
				for _, b := range yyq731 {
					if b {
						yynn731++
					}
				}
				r.EncodeMapStart(yynn731)
				yynn731 = 0
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym733 := z.EncBinary()
				_ = yym733
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym734 := z.EncBinary()
				_ = yym734
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym737 := z.EncBinary()
				_ = yym737
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq731[2] {
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq731[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym741 := z.DecBinary()
	_ = yym741
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct742 := r.ContainerType()
		if yyct742 == codecSelferValueTypeMap1234 {
			yyl742 := r.ReadMapStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl742, d)
			}
		} else if yyct742 == codecSelferValueTypeArray1234 {
			yyl742 := r.ReadArrayStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl742, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys743Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys743Slc
	var yyhl743 bool = l >= 0
	for yyj743 := 0; ; yyj743++ {
		if yyhl743 {
			if yyj743 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys743Slc = r.DecodeBytes(yys743Slc, true, true)
		yys743 := string(yys743Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys743 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys743)
		} // end switch yys743
	} // end for yyj743
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj747 int
	var yyb747 bool
	var yyhl747 bool = l >= 0
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj747++
		if yyhl747 {
			yyb747 = yyj747 > l
		} else {
			yyb747 = r.CheckBreak()
		}
		if yyb747 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj747-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym751 := z.EncBinary()
		_ = yym751
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep752 := !z.EncBinary()
			yy2arr752 := z.EncBasicHandle().StructToArray
			var yyq752 [3]bool
			_, _, _ = yysep752, yyq752, yy2arr752
			const yyr752 bool = false
			yyq752[2] = x.ReadOnly != false
			var yynn752 int
			if yyr752 || yy2arr752 {
				r.EncodeArrayStart(3)
			} else {
				yynn752 = 2
				for _, b := range yyq752 {
					if b {
						yynn752++
					}
				}
				r.EncodeMapStart(yynn752)
				yynn752 = 0
			}
			if yyr752 || yy2arr752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym754 := z.EncBinary()
				_ = yym754
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym755 := z.EncBinary()
				_ = yym755
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr752 || yy2arr752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym758 := z.EncBinary()
				_ = yym758
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr752 || yy2arr752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq752[2] {
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq752[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr752 || yy2arr752 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym762 := z.DecBinary()
	_ = yym762
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct763 := r.ContainerType()
		if yyct763 == codecSelferValueTypeMap1234 {
			yyl763 := r.ReadMapStart()
			if yyl763 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl763, d)
			}
		} else if yyct763 == codecSelferValueTypeArray1234 {
			yyl763 := r.ReadArrayStart()
			if yyl763 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl763, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys764Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys764Slc
	var yyhl764 bool = l >= 0
	for yyj764 := 0; ; yyj764++ {
		if yyhl764 {
			if yyj764 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys764Slc = r.DecodeBytes(yys764Slc, true, true)
		yys764 := string(yys764Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys764 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys764)
		} // end switch yys764
	} // end for yyj764
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj768 int
	var yyb768 bool
	var yyhl768 bool = l >= 0
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj768++
		if yyhl768 {
			yyb768 = yyj768 > l
		} else {
			yyb768 = r.CheckBreak()
		}
		if yyb768 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj768-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym772 := z.EncBinary()
		_ = yym772
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep773 := !z.EncBinary()
			yy2arr773 := z.EncBasicHandle().StructToArray
			var yyq773 [8]bool
			_, _, _ = yysep773, yyq773, yy2arr773
			const yyr773 bool = false
			yyq773[2] = x.FSType != ""
			yyq773[7] = x.ReadOnly != false
			var yynn773 int
			if yyr773 || yy2arr773 {
				r.EncodeArrayStart(8)
			} else {
				yynn773 = 6
				for _, b := range yyq773 {
					if b {
						yynn773++
					}
				}
				r.EncodeMapStart(yynn773)
				yynn773 = 0
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym775 := z.EncBinary()
					_ = yym775
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym778 := z.EncBinary()
				_ = yym778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym779 := z.EncBinary()
				_ = yym779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq773[2] {
					yym781 := z.EncBinary()
					_ = yym781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq773[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym784 := z.EncBinary()
				_ = yym784
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym785 := z.EncBinary()
				_ = yym785
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym787 := z.EncBinary()
				_ = yym787
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym788 := z.EncBinary()
				_ = yym788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym790 := z.EncBinary()
				_ = yym790
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym791 := z.EncBinary()
				_ = yym791
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq773[7] {
					yym794 := z.EncBinary()
					_ = yym794
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq773[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym795 := z.EncBinary()
					_ = yym795
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym796 := z.DecBinary()
	_ = yym796
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct797 := r.ContainerType()
		if yyct797 == codecSelferValueTypeMap1234 {
			yyl797 := r.ReadMapStart()
			if yyl797 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl797, d)
			}
		} else if yyct797 == codecSelferValueTypeArray1234 {
			yyl797 := r.ReadArrayStart()
			if yyl797 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl797, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys798Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys798Slc
	var yyhl798 bool = l >= 0
	for yyj798 := 0; ; yyj798++ {
		if yyhl798 {
			if yyj798 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys798Slc = r.DecodeBytes(yys798Slc, true, true)
		yys798 := string(yys798Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys798 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv799 := &x.CephMonitors
				yym800 := z.DecBinary()
				_ = yym800
				if false {
				} else {
					z.F.DecSliceStringX(yyv799, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys798)
		} // end switch yys798
	} // end for yyj798
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj808 int
	var yyb808 bool
	var yyhl808 bool = l >= 0
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv809 := &x.CephMonitors
		yym810 := z.DecBinary()
		_ = yym810
		if false {
		} else {
			z.F.DecSliceStringX(yyv809, false, d)
		}
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj808++
		if yyhl808 {
			yyb808 = yyj808 > l
		} else {
			yyb808 = r.CheckBreak()
		}
		if yyb808 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj808-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym818 := z.EncBinary()
		_ = yym818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep819 := !z.EncBinary()
			yy2arr819 := z.EncBasicHandle().StructToArray
			var yyq819 [3]bool
			_, _, _ = yysep819, yyq819, yy2arr819
			const yyr819 bool = false
			yyq819[1] = x.FSType != ""
			yyq819[2] = x.ReadOnly != false
			var yynn819 int
			if yyr819 || yy2arr819 {
				r.EncodeArrayStart(3)
			} else {
				yynn819 = 1
				for _, b := range yyq819 {
					if b {
						yynn819++
					}
				}
				r.EncodeMapStart(yynn819)
				yynn819 = 0
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym821 := z.EncBinary()
				_ = yym821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym822 := z.EncBinary()
				_ = yym822
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[1] {
					yym824 := z.EncBinary()
					_ = yym824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym825 := z.EncBinary()
					_ = yym825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[2] {
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq819[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym829 := z.DecBinary()
	_ = yym829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct830 := r.ContainerType()
		if yyct830 == codecSelferValueTypeMap1234 {
			yyl830 := r.ReadMapStart()
			if yyl830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl830, d)
			}
		} else if yyct830 == codecSelferValueTypeArray1234 {
			yyl830 := r.ReadArrayStart()
			if yyl830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys831Slc
	var yyhl831 bool = l >= 0
	for yyj831 := 0; ; yyj831++ {
		if yyhl831 {
			if yyj831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys831Slc = r.DecodeBytes(yys831Slc, true, true)
		yys831 := string(yys831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys831 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys831)
		} // end switch yys831
	} // end for yyj831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj835 int
	var yyb835 bool
	var yyhl835 bool = l >= 0
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj835++
		if yyhl835 {
			yyb835 = yyj835 > l
		} else {
			yyb835 = r.CheckBreak()
		}
		if yyb835 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj835-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym839 := z.EncBinary()
		_ = yym839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep840 := !z.EncBinary()
			yy2arr840 := z.EncBasicHandle().StructToArray
			var yyq840 [6]bool
			_, _, _ = yysep840, yyq840, yy2arr840
			const yyr840 bool = false
			yyq840[1] = x.Path != ""
			yyq840[2] = x.User != ""
			yyq840[3] = x.SecretFile != ""
			yyq840[4] = x.SecretRef != nil
			yyq840[5] = x.ReadOnly != false
			var yynn840 int
			if yyr840 || yy2arr840 {
				r.EncodeArrayStart(6)
			} else {
				yynn840 = 1
				for _, b := range yyq840 {
					if b {
						yynn840++
					}
				}
				r.EncodeMapStart(yynn840)
				yynn840 = 0
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym843 := z.EncBinary()
					_ = yym843
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[1] {
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq840[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[2] {
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq840[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[3] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq840[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq840[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[5] {
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq840[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym857 := z.DecBinary()
	_ = yym857
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct858 := r.ContainerType()
		if yyct858 == codecSelferValueTypeMap1234 {
			yyl858 := r.ReadMapStart()
			if yyl858 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl858, d)
			}
		} else if yyct858 == codecSelferValueTypeArray1234 {
			yyl858 := r.ReadArrayStart()
			if yyl858 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl858, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys859Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys859Slc
	var yyhl859 bool = l >= 0
	for yyj859 := 0; ; yyj859++ {
		if yyhl859 {
			if yyj859 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys859Slc = r.DecodeBytes(yys859Slc, true, true)
		yys859 := string(yys859Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys859 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv860 := &x.Monitors
				yym861 := z.DecBinary()
				_ = yym861
				if false {
				} else {
					z.F.DecSliceStringX(yyv860, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys859)
		} // end switch yys859
	} // end for yyj859
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj867 int
	var yyb867 bool
	var yyhl867 bool = l >= 0
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv868 := &x.Monitors
		yym869 := z.DecBinary()
		_ = yym869
		if false {
		} else {
			z.F.DecSliceStringX(yyv868, false, d)
		}
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj867++
		if yyhl867 {
			yyb867 = yyj867 > l
		} else {
			yyb867 = r.CheckBreak()
		}
		if yyb867 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj867-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym875 := z.EncBinary()
		_ = yym875
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep876 := !z.EncBinary()
			yy2arr876 := z.EncBasicHandle().StructToArray
			var yyq876 [1]bool
			_, _, _ = yysep876, yyq876, yy2arr876
			const yyr876 bool = false
			var yynn876 int
			if yyr876 || yy2arr876 {
				r.EncodeArrayStart(1)
			} else {
				yynn876 = 1
				for _, b := range yyq876 {
					if b {
						yynn876++
					}
				}
				r.EncodeMapStart(yynn876)
				yynn876 = 0
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym878 := z.EncBinary()
				_ = yym878
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym879 := z.EncBinary()
				_ = yym879
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym880 := z.DecBinary()
	_ = yym880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct881 := r.ContainerType()
		if yyct881 == codecSelferValueTypeMap1234 {
			yyl881 := r.ReadMapStart()
			if yyl881 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl881, d)
			}
		} else if yyct881 == codecSelferValueTypeArray1234 {
			yyl881 := r.ReadArrayStart()
			if yyl881 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys882Slc
	var yyhl882 bool = l >= 0
	for yyj882 := 0; ; yyj882++ {
		if yyhl882 {
			if yyj882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys882Slc = r.DecodeBytes(yys882Slc, true, true)
		yys882 := string(yys882Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys882 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys882)
		} // end switch yys882
	} // end for yyj882
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj884 int
	var yyb884 bool
	var yyhl884 bool = l >= 0
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj884++
		if yyhl884 {
			yyb884 = yyj884 > l
		} else {
			yyb884 = r.CheckBreak()
		}
		if yyb884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym886 := z.EncBinary()
		_ = yym886
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep887 := !z.EncBinary()
			yy2arr887 := z.EncBasicHandle().StructToArray
			var yyq887 [1]bool
			_, _, _ = yysep887, yyq887, yy2arr887
			const yyr887 bool = false
			yyq887[0] = len(x.Items) != 0
			var yynn887 int
			if yyr887 || yy2arr887 {
				r.EncodeArrayStart(1)
			} else {
				yynn887 = 0
				for _, b := range yyq887 {
					if b {
						yynn887++
					}
				}
				r.EncodeMapStart(yynn887)
				yynn887 = 0
			}
			if yyr887 || yy2arr887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq887[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym889 := z.EncBinary()
						_ = yym889
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq887[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym890 := z.EncBinary()
						_ = yym890
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr887 || yy2arr887 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym891 := z.DecBinary()
	_ = yym891
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct892 := r.ContainerType()
		if yyct892 == codecSelferValueTypeMap1234 {
			yyl892 := r.ReadMapStart()
			if yyl892 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl892, d)
			}
		} else if yyct892 == codecSelferValueTypeArray1234 {
			yyl892 := r.ReadArrayStart()
			if yyl892 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl892, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys893Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys893Slc
	var yyhl893 bool = l >= 0
	for yyj893 := 0; ; yyj893++ {
		if yyhl893 {
			if yyj893 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys893Slc = r.DecodeBytes(yys893Slc, true, true)
		yys893 := string(yys893Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys893 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv894 := &x.Items
				yym895 := z.DecBinary()
				_ = yym895
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv894), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys893)
		} // end switch yys893
	} // end for yyj893
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj896 int
	var yyb896 bool
	var yyhl896 bool = l >= 0
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv897 := &x.Items
		yym898 := z.DecBinary()
		_ = yym898
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv897), d)
		}
	}
	for {
		yyj896++
		if yyhl896 {
			yyb896 = yyj896 > l
		} else {
			yyb896 = r.CheckBreak()
		}
		if yyb896 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj896-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym899 := z.EncBinary()
		_ = yym899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep900 := !z.EncBinary()
			yy2arr900 := z.EncBasicHandle().StructToArray
			var yyq900 [2]bool
			_, _, _ = yysep900, yyq900, yy2arr900
			const yyr900 bool = false
			var yynn900 int
			if yyr900 || yy2arr900 {
				r.EncodeArrayStart(2)
			} else {
				yynn900 = 2
				for _, b := range yyq900 {
					if b {
						yynn900++
					}
				}
				r.EncodeMapStart(yynn900)
				yynn900 = 0
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym902 := z.EncBinary()
				_ = yym902
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym903 := z.EncBinary()
				_ = yym903
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy905 := &x.FieldRef
				yy905.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy906 := &x.FieldRef
				yy906.CodecEncodeSelf(e)
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym907 := z.DecBinary()
	_ = yym907
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct908 := r.ContainerType()
		if yyct908 == codecSelferValueTypeMap1234 {
			yyl908 := r.ReadMapStart()
			if yyl908 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl908, d)
			}
		} else if yyct908 == codecSelferValueTypeArray1234 {
			yyl908 := r.ReadArrayStart()
			if yyl908 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl908, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys909Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys909Slc
	var yyhl909 bool = l >= 0
	for yyj909 := 0; ; yyj909++ {
		if yyhl909 {
			if yyj909 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys909Slc = r.DecodeBytes(yys909Slc, true, true)
		yys909 := string(yys909Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys909 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv911 := &x.FieldRef
				yyv911.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys909)
		} // end switch yys909
	} // end for yyj909
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj912 int
	var yyb912 bool
	var yyhl912 bool = l >= 0
	yyj912++
	if yyhl912 {
		yyb912 = yyj912 > l
	} else {
		yyb912 = r.CheckBreak()
	}
	if yyb912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj912++
	if yyhl912 {
		yyb912 = yyj912 > l
	} else {
		yyb912 = r.CheckBreak()
	}
	if yyb912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv914 := &x.FieldRef
		yyv914.CodecDecodeSelf(d)
	}
	for {
		yyj912++
		if yyhl912 {
			yyb912 = yyj912 > l
		} else {
			yyb912 = r.CheckBreak()
		}
		if yyb912 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj912-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym915 := z.EncBinary()
		_ = yym915
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep916 := !z.EncBinary()
			yy2arr916 := z.EncBasicHandle().StructToArray
			var yyq916 [3]bool
			_, _, _ = yysep916, yyq916, yy2arr916
			const yyr916 bool = false
			yyq916[2] = x.ReadOnly != false
			var yynn916 int
			if yyr916 || yy2arr916 {
				r.EncodeArrayStart(3)
			} else {
				yynn916 = 2
				for _, b := range yyq916 {
					if b {
						yynn916++
					}
				}
				r.EncodeMapStart(yynn916)
				yynn916 = 0
			}
			if yyr916 || yy2arr916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym918 := z.EncBinary()
				_ = yym918
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym919 := z.EncBinary()
				_ = yym919
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr916 || yy2arr916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym921 := z.EncBinary()
				_ = yym921
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym922 := z.EncBinary()
				_ = yym922
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr916 || yy2arr916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq916[2] {
					yym924 := z.EncBinary()
					_ = yym924
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq916[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym925 := z.EncBinary()
					_ = yym925
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr916 || yy2arr916 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym926 := z.DecBinary()
	_ = yym926
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct927 := r.ContainerType()
		if yyct927 == codecSelferValueTypeMap1234 {
			yyl927 := r.ReadMapStart()
			if yyl927 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl927, d)
			}
		} else if yyct927 == codecSelferValueTypeArray1234 {
			yyl927 := r.ReadArrayStart()
			if yyl927 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl927, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys928Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys928Slc
	var yyhl928 bool = l >= 0
	for yyj928 := 0; ; yyj928++ {
		if yyhl928 {
			if yyj928 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys928Slc = r.DecodeBytes(yys928Slc, true, true)
		yys928 := string(yys928Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys928 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys928)
		} // end switch yys928
	} // end for yyj928
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj932 int
	var yyb932 bool
	var yyhl932 bool = l >= 0
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj932++
		if yyhl932 {
			yyb932 = yyj932 > l
		} else {
			yyb932 = r.CheckBreak()
		}
		if yyb932 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj932-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym936 := z.EncBinary()
		_ = yym936
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep937 := !z.EncBinary()
			yy2arr937 := z.EncBasicHandle().StructToArray
			var yyq937 [5]bool
			_, _, _ = yysep937, yyq937, yy2arr937
			const yyr937 bool = false
			yyq937[0] = x.Name != ""
			yyq937[1] = x.HostPort != 0
			yyq937[3] = x.Protocol != ""
			yyq937[4] = x.HostIP != ""
			var yynn937 int
			if yyr937 || yy2arr937 {
				r.EncodeArrayStart(5)
			} else {
				yynn937 = 1
				for _, b := range yyq937 {
					if b {
						yynn937++
					}
				}
				r.EncodeMapStart(yynn937)
				yynn937 = 0
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq937[0] {
					yym939 := z.EncBinary()
					_ = yym939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq937[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym940 := z.EncBinary()
					_ = yym940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq937[1] {
					yym942 := z.EncBinary()
					_ = yym942
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq937[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym945 := z.EncBinary()
				_ = yym945
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq937[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq937[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq937[4] {
					yym949 := z.EncBinary()
					_ = yym949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq937[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr937 || yy2arr937 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym951 := z.DecBinary()
	_ = yym951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct952 := r.ContainerType()
		if yyct952 == codecSelferValueTypeMap1234 {
			yyl952 := r.ReadMapStart()
			if yyl952 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl952, d)
			}
		} else if yyct952 == codecSelferValueTypeArray1234 {
			yyl952 := r.ReadArrayStart()
			if yyl952 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl952, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys953Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys953Slc
	var yyhl953 bool = l >= 0
	for yyj953 := 0; ; yyj953++ {
		if yyhl953 {
			if yyj953 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys953Slc = r.DecodeBytes(yys953Slc, true, true)
		yys953 := string(yys953Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys953 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys953)
		} // end switch yys953
	} // end for yyj953
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj959 int
	var yyb959 bool
	var yyhl959 bool = l >= 0
	yyj959++
	if yyhl959 {
		yyb959 = yyj959 > l
	} else {
		yyb959 = r.CheckBreak()
	}
	if yyb959 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj959++
	if yyhl959 {
		yyb959 = yyj959 > l
	} else {
		yyb959 = r.CheckBreak()
	}
	if yyb959 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj959++
	if yyhl959 {
		yyb959 = yyj959 > l
	} else {
		yyb959 = r.CheckBreak()
	}
	if yyb959 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj959++
	if yyhl959 {
		yyb959 = yyj959 > l
	} else {
		yyb959 = r.CheckBreak()
	}
	if yyb959 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj959++
	if yyhl959 {
		yyb959 = yyj959 > l
	} else {
		yyb959 = r.CheckBreak()
	}
	if yyb959 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj959++
		if yyhl959 {
			yyb959 = yyj959 > l
		} else {
			yyb959 = r.CheckBreak()
		}
		if yyb959 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj959-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym965 := z.EncBinary()
		_ = yym965
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep966 := !z.EncBinary()
			yy2arr966 := z.EncBasicHandle().StructToArray
			var yyq966 [3]bool
			_, _, _ = yysep966, yyq966, yy2arr966
			const yyr966 bool = false
			yyq966[1] = x.ReadOnly != false
			var yynn966 int
			if yyr966 || yy2arr966 {
				r.EncodeArrayStart(3)
			} else {
				yynn966 = 2
				for _, b := range yyq966 {
					if b {
						yynn966++
					}
				}
				r.EncodeMapStart(yynn966)
				yynn966 = 0
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym968 := z.EncBinary()
				_ = yym968
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym969 := z.EncBinary()
				_ = yym969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq966[1] {
					yym971 := z.EncBinary()
					_ = yym971
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq966[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym974 := z.EncBinary()
				_ = yym974
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym975 := z.EncBinary()
				_ = yym975
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym976 := z.DecBinary()
	_ = yym976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct977 := r.ContainerType()
		if yyct977 == codecSelferValueTypeMap1234 {
			yyl977 := r.ReadMapStart()
			if yyl977 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl977, d)
			}
		} else if yyct977 == codecSelferValueTypeArray1234 {
			yyl977 := r.ReadArrayStart()
			if yyl977 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl977, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys978Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys978Slc
	var yyhl978 bool = l >= 0
	for yyj978 := 0; ; yyj978++ {
		if yyhl978 {
			if yyj978 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys978Slc = r.DecodeBytes(yys978Slc, true, true)
		yys978 := string(yys978Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys978 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys978)
		} // end switch yys978
	} // end for yyj978
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj982 int
	var yyb982 bool
	var yyhl982 bool = l >= 0
	yyj982++
	if yyhl982 {
		yyb982 = yyj982 > l
	} else {
		yyb982 = r.CheckBreak()
	}
	if yyb982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj982++
	if yyhl982 {
		yyb982 = yyj982 > l
	} else {
		yyb982 = r.CheckBreak()
	}
	if yyb982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj982++
	if yyhl982 {
		yyb982 = yyj982 > l
	} else {
		yyb982 = r.CheckBreak()
	}
	if yyb982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj982++
		if yyhl982 {
			yyb982 = yyj982 > l
		} else {
			yyb982 = r.CheckBreak()
		}
		if yyb982 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj982-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym986 := z.EncBinary()
		_ = yym986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep987 := !z.EncBinary()
			yy2arr987 := z.EncBasicHandle().StructToArray
			var yyq987 [3]bool
			_, _, _ = yysep987, yyq987, yy2arr987
			const yyr987 bool = false
			yyq987[1] = x.Value != ""
			yyq987[2] = x.ValueFrom != nil
			var yynn987 int
			if yyr987 || yy2arr987 {
				r.EncodeArrayStart(3)
			} else {
				yynn987 = 1
				for _, b := range yyq987 {
					if b {
						yynn987++
					}
				}
				r.EncodeMapStart(yynn987)
				yynn987 = 0
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym989 := z.EncBinary()
				_ = yym989
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym990 := z.EncBinary()
				_ = yym990
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq987[1] {
					yym992 := z.EncBinary()
					_ = yym992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq987[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq987[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq987[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym995 := z.DecBinary()
	_ = yym995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct996 := r.ContainerType()
		if yyct996 == codecSelferValueTypeMap1234 {
			yyl996 := r.ReadMapStart()
			if yyl996 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl996, d)
			}
		} else if yyct996 == codecSelferValueTypeArray1234 {
			yyl996 := r.ReadArrayStart()
			if yyl996 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys997Slc
	var yyhl997 bool = l >= 0
	for yyj997 := 0; ; yyj997++ {
		if yyhl997 {
			if yyj997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys997Slc = r.DecodeBytes(yys997Slc, true, true)
		yys997 := string(yys997Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys997 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys997)
		} // end switch yys997
	} // end for yyj997
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1001 int
	var yyb1001 bool
	var yyhl1001 bool = l >= 0
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1001++
		if yyhl1001 {
			yyb1001 = yyj1001 > l
		} else {
			yyb1001 = r.CheckBreak()
		}
		if yyb1001 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1001-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1005 := z.EncBinary()
		_ = yym1005
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1006 := !z.EncBinary()
			yy2arr1006 := z.EncBasicHandle().StructToArray
			var yyq1006 [3]bool
			_, _, _ = yysep1006, yyq1006, yy2arr1006
			const yyr1006 bool = false
			yyq1006[0] = x.FieldRef != nil
			yyq1006[1] = x.ConfigMapKeyRef != nil
			yyq1006[2] = x.SecretKeyRef != nil
			var yynn1006 int
			if yyr1006 || yy2arr1006 {
				r.EncodeArrayStart(3)
			} else {
				yynn1006 = 0
				for _, b := range yyq1006 {
					if b {
						yynn1006++
					}
				}
				r.EncodeMapStart(yynn1006)
				yynn1006 = 0
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1006[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1006[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1006[1] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1006[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1006[2] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1006[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1010 := z.DecBinary()
	_ = yym1010
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1011 := r.ContainerType()
		if yyct1011 == codecSelferValueTypeMap1234 {
			yyl1011 := r.ReadMapStart()
			if yyl1011 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1011, d)
			}
		} else if yyct1011 == codecSelferValueTypeArray1234 {
			yyl1011 := r.ReadArrayStart()
			if yyl1011 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1011, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1012Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1012Slc
	var yyhl1012 bool = l >= 0
	for yyj1012 := 0; ; yyj1012++ {
		if yyhl1012 {
			if yyj1012 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1012Slc = r.DecodeBytes(yys1012Slc, true, true)
		yys1012 := string(yys1012Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1012 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1012)
		} // end switch yys1012
	} // end for yyj1012
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1016 int
	var yyb1016 bool
	var yyhl1016 bool = l >= 0
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1016++
		if yyhl1016 {
			yyb1016 = yyj1016 > l
		} else {
			yyb1016 = r.CheckBreak()
		}
		if yyb1016 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1016-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1020 := z.EncBinary()
		_ = yym1020
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1021 := !z.EncBinary()
			yy2arr1021 := z.EncBasicHandle().StructToArray
			var yyq1021 [2]bool
			_, _, _ = yysep1021, yyq1021, yy2arr1021
			const yyr1021 bool = false
			var yynn1021 int
			if yyr1021 || yy2arr1021 {
				r.EncodeArrayStart(2)
			} else {
				yynn1021 = 2
				for _, b := range yyq1021 {
					if b {
						yynn1021++
					}
				}
				r.EncodeMapStart(yynn1021)
				yynn1021 = 0
			}
			if yyr1021 || yy2arr1021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1023 := z.EncBinary()
				_ = yym1023
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1024 := z.EncBinary()
				_ = yym1024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1021 || yy2arr1021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1026 := z.EncBinary()
				_ = yym1026
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1027 := z.EncBinary()
				_ = yym1027
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1021 || yy2arr1021 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1028 := z.DecBinary()
	_ = yym1028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1029 := r.ContainerType()
		if yyct1029 == codecSelferValueTypeMap1234 {
			yyl1029 := r.ReadMapStart()
			if yyl1029 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1029, d)
			}
		} else if yyct1029 == codecSelferValueTypeArray1234 {
			yyl1029 := r.ReadArrayStart()
			if yyl1029 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1029, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1030Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1030Slc
	var yyhl1030 bool = l >= 0
	for yyj1030 := 0; ; yyj1030++ {
		if yyhl1030 {
			if yyj1030 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1030Slc = r.DecodeBytes(yys1030Slc, true, true)
		yys1030 := string(yys1030Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1030 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1030)
		} // end switch yys1030
	} // end for yyj1030
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1033 int
	var yyb1033 bool
	var yyhl1033 bool = l >= 0
	yyj1033++
	if yyhl1033 {
		yyb1033 = yyj1033 > l
	} else {
		yyb1033 = r.CheckBreak()
	}
	if yyb1033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1033++
	if yyhl1033 {
		yyb1033 = yyj1033 > l
	} else {
		yyb1033 = r.CheckBreak()
	}
	if yyb1033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1033++
		if yyhl1033 {
			yyb1033 = yyj1033 > l
		} else {
			yyb1033 = r.CheckBreak()
		}
		if yyb1033 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1033-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1036 := z.EncBinary()
		_ = yym1036
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1037 := !z.EncBinary()
			yy2arr1037 := z.EncBasicHandle().StructToArray
			var yyq1037 [2]bool
			_, _, _ = yysep1037, yyq1037, yy2arr1037
			const yyr1037 bool = false
			var yynn1037 int
			if yyr1037 || yy2arr1037 {
				r.EncodeArrayStart(2)
			} else {
				yynn1037 = 2
				for _, b := range yyq1037 {
					if b {
						yynn1037++
					}
				}
				r.EncodeMapStart(yynn1037)
				yynn1037 = 0
			}
			if yyr1037 || yy2arr1037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1039 := z.EncBinary()
				_ = yym1039
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1040 := z.EncBinary()
				_ = yym1040
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1037 || yy2arr1037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1037 || yy2arr1037 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1044 := z.DecBinary()
	_ = yym1044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1045 := r.ContainerType()
		if yyct1045 == codecSelferValueTypeMap1234 {
			yyl1045 := r.ReadMapStart()
			if yyl1045 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1045, d)
			}
		} else if yyct1045 == codecSelferValueTypeArray1234 {
			yyl1045 := r.ReadArrayStart()
			if yyl1045 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1045, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1046Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1046Slc
	var yyhl1046 bool = l >= 0
	for yyj1046 := 0; ; yyj1046++ {
		if yyhl1046 {
			if yyj1046 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1046Slc = r.DecodeBytes(yys1046Slc, true, true)
		yys1046 := string(yys1046Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1046 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1046)
		} // end switch yys1046
	} // end for yyj1046
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1049 int
	var yyb1049 bool
	var yyhl1049 bool = l >= 0
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj1049++
		if yyhl1049 {
			yyb1049 = yyj1049 > l
		} else {
			yyb1049 = r.CheckBreak()
		}
		if yyb1049 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1049-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1052 := z.EncBinary()
		_ = yym1052
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1053 := !z.EncBinary()
			yy2arr1053 := z.EncBasicHandle().StructToArray
			var yyq1053 [2]bool
			_, _, _ = yysep1053, yyq1053, yy2arr1053
			const yyr1053 bool = false
			var yynn1053 int
			if yyr1053 || yy2arr1053 {
				r.EncodeArrayStart(2)
			} else {
				yynn1053 = 2
				for _, b := range yyq1053 {
					if b {
						yynn1053++
					}
				}
				r.EncodeMapStart(yynn1053)
				yynn1053 = 0
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1055 := z.EncBinary()
				_ = yym1055
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1056 := z.EncBinary()
				_ = yym1056
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1058 := z.EncBinary()
				_ = yym1058
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1059 := z.EncBinary()
				_ = yym1059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1060 := z.DecBinary()
	_ = yym1060
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1061 := r.ContainerType()
		if yyct1061 == codecSelferValueTypeMap1234 {
			yyl1061 := r.ReadMapStart()
			if yyl1061 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1061, d)
			}
		} else if yyct1061 == codecSelferValueTypeArray1234 {
			yyl1061 := r.ReadArrayStart()
			if yyl1061 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1061, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1062Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1062Slc
	var yyhl1062 bool = l >= 0
	for yyj1062 := 0; ; yyj1062++ {
		if yyhl1062 {
			if yyj1062 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1062Slc = r.DecodeBytes(yys1062Slc, true, true)
		yys1062 := string(yys1062Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1062 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1062)
		} // end switch yys1062
	} // end for yyj1062
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1065 int
	var yyb1065 bool
	var yyhl1065 bool = l >= 0
	yyj1065++
	if yyhl1065 {
		yyb1065 = yyj1065 > l
	} else {
		yyb1065 = r.CheckBreak()
	}
	if yyb1065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1065++
	if yyhl1065 {
		yyb1065 = yyj1065 > l
	} else {
		yyb1065 = r.CheckBreak()
	}
	if yyb1065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj1065++
		if yyhl1065 {
			yyb1065 = yyj1065 > l
		} else {
			yyb1065 = r.CheckBreak()
		}
		if yyb1065 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1065-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1068 := z.EncBinary()
		_ = yym1068
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1069 := !z.EncBinary()
			yy2arr1069 := z.EncBasicHandle().StructToArray
			var yyq1069 [2]bool
			_, _, _ = yysep1069, yyq1069, yy2arr1069
			const yyr1069 bool = false
			var yynn1069 int
			if yyr1069 || yy2arr1069 {
				r.EncodeArrayStart(2)
			} else {
				yynn1069 = 2
				for _, b := range yyq1069 {
					if b {
						yynn1069++
					}
				}
				r.EncodeMapStart(yynn1069)
				yynn1069 = 0
			}
			if yyr1069 || yy2arr1069 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1071 := z.EncBinary()
				_ = yym1071
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1072 := z.EncBinary()
				_ = yym1072
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1069 || yy2arr1069 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1074 := z.EncBinary()
				_ = yym1074
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1075 := z.EncBinary()
				_ = yym1075
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1069 || yy2arr1069 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1076 := z.DecBinary()
	_ = yym1076
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1077 := r.ContainerType()
		if yyct1077 == codecSelferValueTypeMap1234 {
			yyl1077 := r.ReadMapStart()
			if yyl1077 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1077, d)
			}
		} else if yyct1077 == codecSelferValueTypeArray1234 {
			yyl1077 := r.ReadArrayStart()
			if yyl1077 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1077, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1078Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1078Slc
	var yyhl1078 bool = l >= 0
	for yyj1078 := 0; ; yyj1078++ {
		if yyhl1078 {
			if yyj1078 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1078Slc = r.DecodeBytes(yys1078Slc, true, true)
		yys1078 := string(yys1078Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1078 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1078)
		} // end switch yys1078
	} // end for yyj1078
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1081 int
	var yyb1081 bool
	var yyhl1081 bool = l >= 0
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1081++
		if yyhl1081 {
			yyb1081 = yyj1081 > l
		} else {
			yyb1081 = r.CheckBreak()
		}
		if yyb1081 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1081-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1084 := z.EncBinary()
		_ = yym1084
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1085 := !z.EncBinary()
			yy2arr1085 := z.EncBasicHandle().StructToArray
			var yyq1085 [5]bool
			_, _, _ = yysep1085, yyq1085, yy2arr1085
			const yyr1085 bool = false
			yyq1085[0] = x.Path != ""
			yyq1085[1] = true
			yyq1085[2] = x.Host != ""
			yyq1085[3] = x.Scheme != ""
			yyq1085[4] = len(x.HTTPHeaders) != 0
			var yynn1085 int
			if yyr1085 || yy2arr1085 {
				r.EncodeArrayStart(5)
			} else {
				yynn1085 = 0
				for _, b := range yyq1085 {
					if b {
						yynn1085++
					}
				}
				r.EncodeMapStart(yynn1085)
				yynn1085 = 0
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[0] {
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1085[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[1] {
					yy1090 := &x.Port
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1090) {
					} else if !yym1091 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1090)
					} else {
						z.EncFallback(yy1090)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1085[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1092 := &x.Port
					yym1093 := z.EncBinary()
					_ = yym1093
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1092) {
					} else if !yym1093 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1092)
					} else {
						z.EncFallback(yy1092)
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[2] {
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1085[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1085[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1099 := z.EncBinary()
						_ = yym1099
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1085[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1100 := z.EncBinary()
						_ = yym1100
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1101 := z.DecBinary()
	_ = yym1101
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1102 := r.ContainerType()
		if yyct1102 == codecSelferValueTypeMap1234 {
			yyl1102 := r.ReadMapStart()
			if yyl1102 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1102, d)
			}
		} else if yyct1102 == codecSelferValueTypeArray1234 {
			yyl1102 := r.ReadArrayStart()
			if yyl1102 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1102, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1103Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1103Slc
	var yyhl1103 bool = l >= 0
	for yyj1103 := 0; ; yyj1103++ {
		if yyhl1103 {
			if yyj1103 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1103Slc = r.DecodeBytes(yys1103Slc, true, true)
		yys1103 := string(yys1103Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1103 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1105 := &x.Port
				yym1106 := z.DecBinary()
				_ = yym1106
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1105) {
				} else if !yym1106 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1105)
				} else {
					z.DecFallback(yyv1105, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1109 := &x.HTTPHeaders
				yym1110 := z.DecBinary()
				_ = yym1110
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1109), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1103)
		} // end switch yys1103
	} // end for yyj1103
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1111 int
	var yyb1111 bool
	var yyhl1111 bool = l >= 0
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1113 := &x.Port
		yym1114 := z.DecBinary()
		_ = yym1114
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1113) {
		} else if !yym1114 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1113)
		} else {
			z.DecFallback(yyv1113, false)
		}
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1117 := &x.HTTPHeaders
		yym1118 := z.DecBinary()
		_ = yym1118
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1117), d)
		}
	}
	for {
		yyj1111++
		if yyhl1111 {
			yyb1111 = yyj1111 > l
		} else {
			yyb1111 = r.CheckBreak()
		}
		if yyb1111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1119 := z.EncBinary()
	_ = yym1119
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1120 := z.DecBinary()
	_ = yym1120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1121 := z.EncBinary()
		_ = yym1121
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1122 := !z.EncBinary()
			yy2arr1122 := z.EncBasicHandle().StructToArray
			var yyq1122 [1]bool
			_, _, _ = yysep1122, yyq1122, yy2arr1122
			const yyr1122 bool = false
			yyq1122[0] = true
			var yynn1122 int
			if yyr1122 || yy2arr1122 {
				r.EncodeArrayStart(1)
			} else {
				yynn1122 = 0
				for _, b := range yyq1122 {
					if b {
						yynn1122++
					}
				}
				r.EncodeMapStart(yynn1122)
				yynn1122 = 0
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[0] {
					yy1124 := &x.Port
					yym1125 := z.EncBinary()
					_ = yym1125
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1124) {
					} else if !yym1125 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1124)
					} else {
						z.EncFallback(yy1124)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1126 := &x.Port
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1126) {
					} else if !yym1127 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1126)
					} else {
						z.EncFallback(yy1126)
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1128 := z.DecBinary()
	_ = yym1128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1129 := r.ContainerType()
		if yyct1129 == codecSelferValueTypeMap1234 {
			yyl1129 := r.ReadMapStart()
			if yyl1129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1129, d)
			}
		} else if yyct1129 == codecSelferValueTypeArray1234 {
			yyl1129 := r.ReadArrayStart()
			if yyl1129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1130Slc
	var yyhl1130 bool = l >= 0
	for yyj1130 := 0; ; yyj1130++ {
		if yyhl1130 {
			if yyj1130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1130Slc = r.DecodeBytes(yys1130Slc, true, true)
		yys1130 := string(yys1130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1130 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1131 := &x.Port
				yym1132 := z.DecBinary()
				_ = yym1132
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1131) {
				} else if !yym1132 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1131)
				} else {
					z.DecFallback(yyv1131, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1130)
		} // end switch yys1130
	} // end for yyj1130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1133 int
	var yyb1133 bool
	var yyhl1133 bool = l >= 0
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1134 := &x.Port
		yym1135 := z.DecBinary()
		_ = yym1135
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1134) {
		} else if !yym1135 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1134)
		} else {
			z.DecFallback(yyv1134, false)
		}
	}
	for {
		yyj1133++
		if yyhl1133 {
			yyb1133 = yyj1133 > l
		} else {
			yyb1133 = r.CheckBreak()
		}
		if yyb1133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1136 := z.EncBinary()
		_ = yym1136
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1137 := !z.EncBinary()
			yy2arr1137 := z.EncBasicHandle().StructToArray
			var yyq1137 [1]bool
			_, _, _ = yysep1137, yyq1137, yy2arr1137
			const yyr1137 bool = false
			yyq1137[0] = len(x.Command) != 0
			var yynn1137 int
			if yyr1137 || yy2arr1137 {
				r.EncodeArrayStart(1)
			} else {
				yynn1137 = 0
				for _, b := range yyq1137 {
					if b {
						yynn1137++
					}
				}
				r.EncodeMapStart(yynn1137)
				yynn1137 = 0
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1137[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1139 := z.EncBinary()
						_ = yym1139
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1137[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1140 := z.EncBinary()
						_ = yym1140
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1141 := z.DecBinary()
	_ = yym1141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1142 := r.ContainerType()
		if yyct1142 == codecSelferValueTypeMap1234 {
			yyl1142 := r.ReadMapStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1142, d)
			}
		} else if yyct1142 == codecSelferValueTypeArray1234 {
			yyl1142 := r.ReadArrayStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1142, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1143Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1143Slc
	var yyhl1143 bool = l >= 0
	for yyj1143 := 0; ; yyj1143++ {
		if yyhl1143 {
			if yyj1143 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1143Slc = r.DecodeBytes(yys1143Slc, true, true)
		yys1143 := string(yys1143Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1143 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1144 := &x.Command
				yym1145 := z.DecBinary()
				_ = yym1145
				if false {
				} else {
					z.F.DecSliceStringX(yyv1144, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1143)
		} // end switch yys1143
	} // end for yyj1143
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1146 int
	var yyb1146 bool
	var yyhl1146 bool = l >= 0
	yyj1146++
	if yyhl1146 {
		yyb1146 = yyj1146 > l
	} else {
		yyb1146 = r.CheckBreak()
	}
	if yyb1146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1147 := &x.Command
		yym1148 := z.DecBinary()
		_ = yym1148
		if false {
		} else {
			z.F.DecSliceStringX(yyv1147, false, d)
		}
	}
	for {
		yyj1146++
		if yyhl1146 {
			yyb1146 = yyj1146 > l
		} else {
			yyb1146 = r.CheckBreak()
		}
		if yyb1146 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1146-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1149 := z.EncBinary()
		_ = yym1149
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1150 := !z.EncBinary()
			yy2arr1150 := z.EncBasicHandle().StructToArray
			var yyq1150 [8]bool
			_, _, _ = yysep1150, yyq1150, yy2arr1150
			const yyr1150 bool = false
			yyq1150[0] = x.InitialDelaySeconds != 0
			yyq1150[1] = x.TimeoutSeconds != 0
			yyq1150[2] = x.PeriodSeconds != 0
			yyq1150[3] = x.SuccessThreshold != 0
			yyq1150[4] = x.FailureThreshold != 0
			yyq1150[5] = x.Handler.Exec != nil && x.Exec != nil
			yyq1150[6] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1150[7] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			var yynn1150 int
			if yyr1150 || yy2arr1150 {
				r.EncodeArrayStart(8)
			} else {
				yynn1150 = 0
				for _, b := range yyq1150 {
					if b {
						yynn1150++
					}
				}
				r.EncodeMapStart(yynn1150)
				yynn1150 = 0
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1150[0] {
					yym1152 := z.EncBinary()
					_ = yym1152
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1150[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1153 := z.EncBinary()
					_ = yym1153
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1150[1] {
					yym1155 := z.EncBinary()
					_ = yym1155
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1150[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1156 := z.EncBinary()
					_ = yym1156
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1150[2] {
					yym1158 := z.EncBinary()
					_ = yym1158
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1150[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1159 := z.EncBinary()
					_ = yym1159
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1150[3] {
					yym1161 := z.EncBinary()
					_ = yym1161
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1150[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1162 := z.EncBinary()
					_ = yym1162
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1150[4] {
					yym1164 := z.EncBinary()
					_ = yym1164
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1150[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1165 := z.EncBinary()
					_ = yym1165
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			var yyn1166 bool
			if x.Handler.Exec == nil {
				yyn1166 = true
				goto LABEL1166
			}
		LABEL1166:
			if yyr1150 || yy2arr1150 {
				if yyn1166 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1150[5] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1150[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1166 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1167 bool
			if x.Handler.HTTPGet == nil {
				yyn1167 = true
				goto LABEL1167
			}
		LABEL1167:
			if yyr1150 || yy2arr1150 {
				if yyn1167 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1150[6] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1150[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1167 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1168 bool
			if x.Handler.TCPSocket == nil {
				yyn1168 = true
				goto LABEL1168
			}
		LABEL1168:
			if yyr1150 || yy2arr1150 {
				if yyn1168 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1150[7] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1150[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1168 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1169 := z.DecBinary()
	_ = yym1169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1170 := r.ContainerType()
		if yyct1170 == codecSelferValueTypeMap1234 {
			yyl1170 := r.ReadMapStart()
			if yyl1170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1170, d)
			}
		} else if yyct1170 == codecSelferValueTypeArray1234 {
			yyl1170 := r.ReadArrayStart()
			if yyl1170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1171Slc
	var yyhl1171 bool = l >= 0
	for yyj1171 := 0; ; yyj1171++ {
		if yyhl1171 {
			if yyj1171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1171Slc = r.DecodeBytes(yys1171Slc, true, true)
		yys1171 := string(yys1171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1171 {
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1171)
		} // end switch yys1171
	} // end for yyj1171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1180 int
	var yyb1180 bool
	var yyhl1180 bool = l >= 0
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1180++
		if yyhl1180 {
			yyb1180 = yyj1180 > l
		} else {
			yyb1180 = r.CheckBreak()
		}
		if yyb1180 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1180-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1189 := z.EncBinary()
	_ = yym1189
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1190 := z.DecBinary()
	_ = yym1190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1191 := z.EncBinary()
	_ = yym1191
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1192 := z.DecBinary()
	_ = yym1192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1193 := z.EncBinary()
		_ = yym1193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1194 := !z.EncBinary()
			yy2arr1194 := z.EncBasicHandle().StructToArray
			var yyq1194 [2]bool
			_, _, _ = yysep1194, yyq1194, yy2arr1194
			const yyr1194 bool = false
			yyq1194[0] = len(x.Add) != 0
			yyq1194[1] = len(x.Drop) != 0
			var yynn1194 int
			if yyr1194 || yy2arr1194 {
				r.EncodeArrayStart(2)
			} else {
				yynn1194 = 0
				for _, b := range yyq1194 {
					if b {
						yynn1194++
					}
				}
				r.EncodeMapStart(yynn1194)
				yynn1194 = 0
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1196 := z.EncBinary()
						_ = yym1196
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1194[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1197 := z.EncBinary()
						_ = yym1197
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1199 := z.EncBinary()
						_ = yym1199
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1194[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1200 := z.EncBinary()
						_ = yym1200
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1201 := z.DecBinary()
	_ = yym1201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1202 := r.ContainerType()
		if yyct1202 == codecSelferValueTypeMap1234 {
			yyl1202 := r.ReadMapStart()
			if yyl1202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1202, d)
			}
		} else if yyct1202 == codecSelferValueTypeArray1234 {
			yyl1202 := r.ReadArrayStart()
			if yyl1202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1203Slc
	var yyhl1203 bool = l >= 0
	for yyj1203 := 0; ; yyj1203++ {
		if yyhl1203 {
			if yyj1203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1203Slc = r.DecodeBytes(yys1203Slc, true, true)
		yys1203 := string(yys1203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1203 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1204 := &x.Add
				yym1205 := z.DecBinary()
				_ = yym1205
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1204), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1206 := &x.Drop
				yym1207 := z.DecBinary()
				_ = yym1207
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1206), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1203)
		} // end switch yys1203
	} // end for yyj1203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1208 int
	var yyb1208 bool
	var yyhl1208 bool = l >= 0
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1209 := &x.Add
		yym1210 := z.DecBinary()
		_ = yym1210
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1209), d)
		}
	}
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1211 := &x.Drop
		yym1212 := z.DecBinary()
		_ = yym1212
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1211), d)
		}
	}
	for {
		yyj1208++
		if yyhl1208 {
			yyb1208 = yyj1208 > l
		} else {
			yyb1208 = r.CheckBreak()
		}
		if yyb1208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1213 := z.EncBinary()
		_ = yym1213
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1214 := !z.EncBinary()
			yy2arr1214 := z.EncBasicHandle().StructToArray
			var yyq1214 [2]bool
			_, _, _ = yysep1214, yyq1214, yy2arr1214
			const yyr1214 bool = false
			yyq1214[0] = len(x.Limits) != 0
			yyq1214[1] = len(x.Requests) != 0
			var yynn1214 int
			if yyr1214 || yy2arr1214 {
				r.EncodeArrayStart(2)
			} else {
				yynn1214 = 0
				for _, b := range yyq1214 {
					if b {
						yynn1214++
					}
				}
				r.EncodeMapStart(yynn1214)
				yynn1214 = 0
			}
			if yyr1214 || yy2arr1214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1214[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1214[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1214 || yy2arr1214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1214[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1214[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1214 || yy2arr1214 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1217 := z.DecBinary()
	_ = yym1217
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1218 := r.ContainerType()
		if yyct1218 == codecSelferValueTypeMap1234 {
			yyl1218 := r.ReadMapStart()
			if yyl1218 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1218, d)
			}
		} else if yyct1218 == codecSelferValueTypeArray1234 {
			yyl1218 := r.ReadArrayStart()
			if yyl1218 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1218, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1219Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1219Slc
	var yyhl1219 bool = l >= 0
	for yyj1219 := 0; ; yyj1219++ {
		if yyhl1219 {
			if yyj1219 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1219Slc = r.DecodeBytes(yys1219Slc, true, true)
		yys1219 := string(yys1219Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1219 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1220 := &x.Limits
				yyv1220.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1221 := &x.Requests
				yyv1221.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1219)
		} // end switch yys1219
	} // end for yyj1219
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1222 int
	var yyb1222 bool
	var yyhl1222 bool = l >= 0
	yyj1222++
	if yyhl1222 {
		yyb1222 = yyj1222 > l
	} else {
		yyb1222 = r.CheckBreak()
	}
	if yyb1222 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1223 := &x.Limits
		yyv1223.CodecDecodeSelf(d)
	}
	yyj1222++
	if yyhl1222 {
		yyb1222 = yyj1222 > l
	} else {
		yyb1222 = r.CheckBreak()
	}
	if yyb1222 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1224 := &x.Requests
		yyv1224.CodecDecodeSelf(d)
	}
	for {
		yyj1222++
		if yyhl1222 {
			yyb1222 = yyj1222 > l
		} else {
			yyb1222 = r.CheckBreak()
		}
		if yyb1222 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1222-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1225 := z.EncBinary()
		_ = yym1225
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1226 := !z.EncBinary()
			yy2arr1226 := z.EncBasicHandle().StructToArray
			var yyq1226 [18]bool
			_, _, _ = yysep1226, yyq1226, yy2arr1226
			const yyr1226 bool = false
			yyq1226[2] = len(x.Command) != 0
			yyq1226[3] = len(x.Args) != 0
			yyq1226[4] = x.WorkingDir != ""
			yyq1226[5] = len(x.Ports) != 0
			yyq1226[6] = len(x.Env) != 0
			yyq1226[7] = true
			yyq1226[8] = len(x.VolumeMounts) != 0
			yyq1226[9] = x.LivenessProbe != nil
			yyq1226[10] = x.ReadinessProbe != nil
			yyq1226[11] = x.Lifecycle != nil
			yyq1226[12] = x.TerminationMessagePath != ""
			yyq1226[14] = x.SecurityContext != nil
			yyq1226[15] = x.Stdin != false
			yyq1226[16] = x.StdinOnce != false
			yyq1226[17] = x.TTY != false
			var yynn1226 int
			if yyr1226 || yy2arr1226 {
				r.EncodeArrayStart(18)
			} else {
				yynn1226 = 3
				for _, b := range yyq1226 {
					if b {
						yynn1226++
					}
				}
				r.EncodeMapStart(yynn1226)
				yynn1226 = 0
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1228 := z.EncBinary()
				_ = yym1228
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1229 := z.EncBinary()
				_ = yym1229
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1231 := z.EncBinary()
				_ = yym1231
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1232 := z.EncBinary()
				_ = yym1232
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1234 := z.EncBinary()
						_ = yym1234
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1226[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1235 := z.EncBinary()
						_ = yym1235
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1237 := z.EncBinary()
						_ = yym1237
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1226[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1238 := z.EncBinary()
						_ = yym1238
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[4] {
					yym1240 := z.EncBinary()
					_ = yym1240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1226[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1241 := z.EncBinary()
					_ = yym1241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1243 := z.EncBinary()
						_ = yym1243
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1226[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1244 := z.EncBinary()
						_ = yym1244
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1246 := z.EncBinary()
						_ = yym1246
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1226[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1247 := z.EncBinary()
						_ = yym1247
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[7] {
					yy1249 := &x.Resources
					yy1249.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1226[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1250 := &x.Resources
					yy1250.CodecEncodeSelf(e)
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1252 := z.EncBinary()
						_ = yym1252
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1226[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1253 := z.EncBinary()
						_ = yym1253
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1226[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1226[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1226[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[12] {
					yym1258 := z.EncBinary()
					_ = yym1258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1226[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1259 := z.EncBinary()
					_ = yym1259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1226[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[15] {
					yym1263 := z.EncBinary()
					_ = yym1263
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1226[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1264 := z.EncBinary()
					_ = yym1264
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[16] {
					yym1266 := z.EncBinary()
					_ = yym1266
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1226[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1267 := z.EncBinary()
					_ = yym1267
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[17] {
					yym1269 := z.EncBinary()
					_ = yym1269
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1226[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1270 := z.EncBinary()
					_ = yym1270
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1271 := z.DecBinary()
	_ = yym1271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1272 := r.ContainerType()
		if yyct1272 == codecSelferValueTypeMap1234 {
			yyl1272 := r.ReadMapStart()
			if yyl1272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1272, d)
			}
		} else if yyct1272 == codecSelferValueTypeArray1234 {
			yyl1272 := r.ReadArrayStart()
			if yyl1272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1273Slc
	var yyhl1273 bool = l >= 0
	for yyj1273 := 0; ; yyj1273++ {
		if yyhl1273 {
			if yyj1273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1273Slc = r.DecodeBytes(yys1273Slc, true, true)
		yys1273 := string(yys1273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1273 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1276 := &x.Command
				yym1277 := z.DecBinary()
				_ = yym1277
				if false {
				} else {
					z.F.DecSliceStringX(yyv1276, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1278 := &x.Args
				yym1279 := z.DecBinary()
				_ = yym1279
				if false {
				} else {
					z.F.DecSliceStringX(yyv1278, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1281 := &x.Ports
				yym1282 := z.DecBinary()
				_ = yym1282
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1281), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1283 := &x.Env
				yym1284 := z.DecBinary()
				_ = yym1284
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1283), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1285 := &x.Resources
				yyv1285.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1286 := &x.VolumeMounts
				yym1287 := z.DecBinary()
				_ = yym1287
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1286), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1273)
		} // end switch yys1273
	} // end for yyj1273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1297 int
	var yyb1297 bool
	var yyhl1297 bool = l >= 0
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1300 := &x.Command
		yym1301 := z.DecBinary()
		_ = yym1301
		if false {
		} else {
			z.F.DecSliceStringX(yyv1300, false, d)
		}
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1302 := &x.Args
		yym1303 := z.DecBinary()
		_ = yym1303
		if false {
		} else {
			z.F.DecSliceStringX(yyv1302, false, d)
		}
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1305 := &x.Ports
		yym1306 := z.DecBinary()
		_ = yym1306
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1305), d)
		}
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1307 := &x.Env
		yym1308 := z.DecBinary()
		_ = yym1308
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1307), d)
		}
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1309 := &x.Resources
		yyv1309.CodecDecodeSelf(d)
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1310 := &x.VolumeMounts
		yym1311 := z.DecBinary()
		_ = yym1311
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1310), d)
		}
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1297++
		if yyhl1297 {
			yyb1297 = yyj1297 > l
		} else {
			yyb1297 = r.CheckBreak()
		}
		if yyb1297 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1297-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1321 := z.EncBinary()
		_ = yym1321
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1322 := !z.EncBinary()
			yy2arr1322 := z.EncBasicHandle().StructToArray
			var yyq1322 [3]bool
			_, _, _ = yysep1322, yyq1322, yy2arr1322
			const yyr1322 bool = false
			yyq1322[0] = x.Exec != nil
			yyq1322[1] = x.HTTPGet != nil
			yyq1322[2] = x.TCPSocket != nil
			var yynn1322 int
			if yyr1322 || yy2arr1322 {
				r.EncodeArrayStart(3)
			} else {
				yynn1322 = 0
				for _, b := range yyq1322 {
					if b {
						yynn1322++
					}
				}
				r.EncodeMapStart(yynn1322)
				yynn1322 = 0
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1322[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1322[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1322[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1322[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1322[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1322[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1326 := z.DecBinary()
	_ = yym1326
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1327 := r.ContainerType()
		if yyct1327 == codecSelferValueTypeMap1234 {
			yyl1327 := r.ReadMapStart()
			if yyl1327 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1327, d)
			}
		} else if yyct1327 == codecSelferValueTypeArray1234 {
			yyl1327 := r.ReadArrayStart()
			if yyl1327 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1327, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1328Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1328Slc
	var yyhl1328 bool = l >= 0
	for yyj1328 := 0; ; yyj1328++ {
		if yyhl1328 {
			if yyj1328 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1328Slc = r.DecodeBytes(yys1328Slc, true, true)
		yys1328 := string(yys1328Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1328 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1328)
		} // end switch yys1328
	} // end for yyj1328
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1332 int
	var yyb1332 bool
	var yyhl1332 bool = l >= 0
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1332++
		if yyhl1332 {
			yyb1332 = yyj1332 > l
		} else {
			yyb1332 = r.CheckBreak()
		}
		if yyb1332 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1332-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1336 := z.EncBinary()
		_ = yym1336
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1337 := !z.EncBinary()
			yy2arr1337 := z.EncBasicHandle().StructToArray
			var yyq1337 [2]bool
			_, _, _ = yysep1337, yyq1337, yy2arr1337
			const yyr1337 bool = false
			yyq1337[0] = x.PostStart != nil
			yyq1337[1] = x.PreStop != nil
			var yynn1337 int
			if yyr1337 || yy2arr1337 {
				r.EncodeArrayStart(2)
			} else {
				yynn1337 = 0
				for _, b := range yyq1337 {
					if b {
						yynn1337++
					}
				}
				r.EncodeMapStart(yynn1337)
				yynn1337 = 0
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1337[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1337[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1337[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1337[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1340 := z.DecBinary()
	_ = yym1340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1341 := r.ContainerType()
		if yyct1341 == codecSelferValueTypeMap1234 {
			yyl1341 := r.ReadMapStart()
			if yyl1341 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1341, d)
			}
		} else if yyct1341 == codecSelferValueTypeArray1234 {
			yyl1341 := r.ReadArrayStart()
			if yyl1341 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1342Slc
	var yyhl1342 bool = l >= 0
	for yyj1342 := 0; ; yyj1342++ {
		if yyhl1342 {
			if yyj1342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1342Slc = r.DecodeBytes(yys1342Slc, true, true)
		yys1342 := string(yys1342Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1342 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1342)
		} // end switch yys1342
	} // end for yyj1342
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1345 int
	var yyb1345 bool
	var yyhl1345 bool = l >= 0
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1345++
		if yyhl1345 {
			yyb1345 = yyj1345 > l
		} else {
			yyb1345 = r.CheckBreak()
		}
		if yyb1345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1348 := z.EncBinary()
	_ = yym1348
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1349 := z.DecBinary()
	_ = yym1349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1350 := z.EncBinary()
		_ = yym1350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1351 := !z.EncBinary()
			yy2arr1351 := z.EncBasicHandle().StructToArray
			var yyq1351 [2]bool
			_, _, _ = yysep1351, yyq1351, yy2arr1351
			const yyr1351 bool = false
			yyq1351[0] = x.Reason != ""
			yyq1351[1] = x.Message != ""
			var yynn1351 int
			if yyr1351 || yy2arr1351 {
				r.EncodeArrayStart(2)
			} else {
				yynn1351 = 0
				for _, b := range yyq1351 {
					if b {
						yynn1351++
					}
				}
				r.EncodeMapStart(yynn1351)
				yynn1351 = 0
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1351[0] {
					yym1353 := z.EncBinary()
					_ = yym1353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1354 := z.EncBinary()
					_ = yym1354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1351[1] {
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1351[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1357 := z.EncBinary()
					_ = yym1357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1358 := z.DecBinary()
	_ = yym1358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1359 := r.ContainerType()
		if yyct1359 == codecSelferValueTypeMap1234 {
			yyl1359 := r.ReadMapStart()
			if yyl1359 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1359, d)
			}
		} else if yyct1359 == codecSelferValueTypeArray1234 {
			yyl1359 := r.ReadArrayStart()
			if yyl1359 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1360Slc
	var yyhl1360 bool = l >= 0
	for yyj1360 := 0; ; yyj1360++ {
		if yyhl1360 {
			if yyj1360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1360Slc = r.DecodeBytes(yys1360Slc, true, true)
		yys1360 := string(yys1360Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1360 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1360)
		} // end switch yys1360
	} // end for yyj1360
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1363 int
	var yyb1363 bool
	var yyhl1363 bool = l >= 0
	yyj1363++
	if yyhl1363 {
		yyb1363 = yyj1363 > l
	} else {
		yyb1363 = r.CheckBreak()
	}
	if yyb1363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1363++
	if yyhl1363 {
		yyb1363 = yyj1363 > l
	} else {
		yyb1363 = r.CheckBreak()
	}
	if yyb1363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1363++
		if yyhl1363 {
			yyb1363 = yyj1363 > l
		} else {
			yyb1363 = r.CheckBreak()
		}
		if yyb1363 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1363-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1366 := z.EncBinary()
		_ = yym1366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1367 := !z.EncBinary()
			yy2arr1367 := z.EncBasicHandle().StructToArray
			var yyq1367 [1]bool
			_, _, _ = yysep1367, yyq1367, yy2arr1367
			const yyr1367 bool = false
			yyq1367[0] = true
			var yynn1367 int
			if yyr1367 || yy2arr1367 {
				r.EncodeArrayStart(1)
			} else {
				yynn1367 = 0
				for _, b := range yyq1367 {
					if b {
						yynn1367++
					}
				}
				r.EncodeMapStart(yynn1367)
				yynn1367 = 0
			}
			if yyr1367 || yy2arr1367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1367[0] {
					yy1369 := &x.StartedAt
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1369) {
					} else if yym1370 {
						z.EncBinaryMarshal(yy1369)
					} else if !yym1370 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1369)
					} else {
						z.EncFallback(yy1369)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1367[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1371 := &x.StartedAt
					yym1372 := z.EncBinary()
					_ = yym1372
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1371) {
					} else if yym1372 {
						z.EncBinaryMarshal(yy1371)
					} else if !yym1372 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1371)
					} else {
						z.EncFallback(yy1371)
					}
				}
			}
			if yyr1367 || yy2arr1367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1373 := z.DecBinary()
	_ = yym1373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1374 := r.ContainerType()
		if yyct1374 == codecSelferValueTypeMap1234 {
			yyl1374 := r.ReadMapStart()
			if yyl1374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1374, d)
			}
		} else if yyct1374 == codecSelferValueTypeArray1234 {
			yyl1374 := r.ReadArrayStart()
			if yyl1374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1375Slc
	var yyhl1375 bool = l >= 0
	for yyj1375 := 0; ; yyj1375++ {
		if yyhl1375 {
			if yyj1375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1375Slc = r.DecodeBytes(yys1375Slc, true, true)
		yys1375 := string(yys1375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1375 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1376 := &x.StartedAt
				yym1377 := z.DecBinary()
				_ = yym1377
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1376) {
				} else if yym1377 {
					z.DecBinaryUnmarshal(yyv1376)
				} else if !yym1377 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1376)
				} else {
					z.DecFallback(yyv1376, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1375)
		} // end switch yys1375
	} // end for yyj1375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1378 int
	var yyb1378 bool
	var yyhl1378 bool = l >= 0
	yyj1378++
	if yyhl1378 {
		yyb1378 = yyj1378 > l
	} else {
		yyb1378 = r.CheckBreak()
	}
	if yyb1378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1379 := &x.StartedAt
		yym1380 := z.DecBinary()
		_ = yym1380
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1379) {
		} else if yym1380 {
			z.DecBinaryUnmarshal(yyv1379)
		} else if !yym1380 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1379)
		} else {
			z.DecFallback(yyv1379, false)
		}
	}
	for {
		yyj1378++
		if yyhl1378 {
			yyb1378 = yyj1378 > l
		} else {
			yyb1378 = r.CheckBreak()
		}
		if yyb1378 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1378-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1381 := z.EncBinary()
		_ = yym1381
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1382 := !z.EncBinary()
			yy2arr1382 := z.EncBasicHandle().StructToArray
			var yyq1382 [7]bool
			_, _, _ = yysep1382, yyq1382, yy2arr1382
			const yyr1382 bool = false
			yyq1382[1] = x.Signal != 0
			yyq1382[2] = x.Reason != ""
			yyq1382[3] = x.Message != ""
			yyq1382[4] = true
			yyq1382[5] = true
			yyq1382[6] = x.ContainerID != ""
			var yynn1382 int
			if yyr1382 || yy2arr1382 {
				r.EncodeArrayStart(7)
			} else {
				yynn1382 = 1
				for _, b := range yyq1382 {
					if b {
						yynn1382++
					}
				}
				r.EncodeMapStart(yynn1382)
				yynn1382 = 0
			}
			if yyr1382 || yy2arr1382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1384 := z.EncBinary()
				_ = yym1384
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1385 := z.EncBinary()
				_ = yym1385
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1382 || yy2arr1382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1382[1] {
					yym1387 := z.EncBinary()
					_ = yym1387
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1382[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1382 || yy2arr1382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1382[2] {
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1382[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1382 || yy2arr1382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1382[3] {
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1382[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1382 || yy2arr1382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1382[4] {
					yy1396 := &x.StartedAt
					yym1397 := z.EncBinary()
					_ = yym1397
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1396) {
					} else if yym1397 {
						z.EncBinaryMarshal(yy1396)
					} else if !yym1397 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1396)
					} else {
						z.EncFallback(yy1396)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1382[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1398 := &x.StartedAt
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1398) {
					} else if yym1399 {
						z.EncBinaryMarshal(yy1398)
					} else if !yym1399 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1398)
					} else {
						z.EncFallback(yy1398)
					}
				}
			}
			if yyr1382 || yy2arr1382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1382[5] {
					yy1401 := &x.FinishedAt
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1401) {
					} else if yym1402 {
						z.EncBinaryMarshal(yy1401)
					} else if !yym1402 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1401)
					} else {
						z.EncFallback(yy1401)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1382[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1403 := &x.FinishedAt
					yym1404 := z.EncBinary()
					_ = yym1404
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1403) {
					} else if yym1404 {
						z.EncBinaryMarshal(yy1403)
					} else if !yym1404 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1403)
					} else {
						z.EncFallback(yy1403)
					}
				}
			}
			if yyr1382 || yy2arr1382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1382[6] {
					yym1406 := z.EncBinary()
					_ = yym1406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1382[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1382 || yy2arr1382 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1408 := z.DecBinary()
	_ = yym1408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1409 := r.ContainerType()
		if yyct1409 == codecSelferValueTypeMap1234 {
			yyl1409 := r.ReadMapStart()
			if yyl1409 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1409, d)
			}
		} else if yyct1409 == codecSelferValueTypeArray1234 {
			yyl1409 := r.ReadArrayStart()
			if yyl1409 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1409, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1410Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1410Slc
	var yyhl1410 bool = l >= 0
	for yyj1410 := 0; ; yyj1410++ {
		if yyhl1410 {
			if yyj1410 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1410Slc = r.DecodeBytes(yys1410Slc, true, true)
		yys1410 := string(yys1410Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1410 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1415 := &x.StartedAt
				yym1416 := z.DecBinary()
				_ = yym1416
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1415) {
				} else if yym1416 {
					z.DecBinaryUnmarshal(yyv1415)
				} else if !yym1416 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1415)
				} else {
					z.DecFallback(yyv1415, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1417 := &x.FinishedAt
				yym1418 := z.DecBinary()
				_ = yym1418
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1417) {
				} else if yym1418 {
					z.DecBinaryUnmarshal(yyv1417)
				} else if !yym1418 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1417)
				} else {
					z.DecFallback(yyv1417, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1410)
		} // end switch yys1410
	} // end for yyj1410
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1420 int
	var yyb1420 bool
	var yyhl1420 bool = l >= 0
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1425 := &x.StartedAt
		yym1426 := z.DecBinary()
		_ = yym1426
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1425) {
		} else if yym1426 {
			z.DecBinaryUnmarshal(yyv1425)
		} else if !yym1426 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1425)
		} else {
			z.DecFallback(yyv1425, false)
		}
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1427 := &x.FinishedAt
		yym1428 := z.DecBinary()
		_ = yym1428
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1427) {
		} else if yym1428 {
			z.DecBinaryUnmarshal(yyv1427)
		} else if !yym1428 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1427)
		} else {
			z.DecFallback(yyv1427, false)
		}
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1420++
		if yyhl1420 {
			yyb1420 = yyj1420 > l
		} else {
			yyb1420 = r.CheckBreak()
		}
		if yyb1420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1430 := z.EncBinary()
		_ = yym1430
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1431 := !z.EncBinary()
			yy2arr1431 := z.EncBasicHandle().StructToArray
			var yyq1431 [3]bool
			_, _, _ = yysep1431, yyq1431, yy2arr1431
			const yyr1431 bool = false
			yyq1431[0] = x.Waiting != nil
			yyq1431[1] = x.Running != nil
			yyq1431[2] = x.Terminated != nil
			var yynn1431 int
			if yyr1431 || yy2arr1431 {
				r.EncodeArrayStart(3)
			} else {
				yynn1431 = 0
				for _, b := range yyq1431 {
					if b {
						yynn1431++
					}
				}
				r.EncodeMapStart(yynn1431)
				yynn1431 = 0
			}
			if yyr1431 || yy2arr1431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1431[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1431[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1431 || yy2arr1431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1431[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1431[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1431 || yy2arr1431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1431[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1431[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1431 || yy2arr1431 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1435 := z.DecBinary()
	_ = yym1435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1436 := r.ContainerType()
		if yyct1436 == codecSelferValueTypeMap1234 {
			yyl1436 := r.ReadMapStart()
			if yyl1436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1436, d)
			}
		} else if yyct1436 == codecSelferValueTypeArray1234 {
			yyl1436 := r.ReadArrayStart()
			if yyl1436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1437Slc
	var yyhl1437 bool = l >= 0
	for yyj1437 := 0; ; yyj1437++ {
		if yyhl1437 {
			if yyj1437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1437Slc = r.DecodeBytes(yys1437Slc, true, true)
		yys1437 := string(yys1437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1437 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1437)
		} // end switch yys1437
	} // end for yyj1437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1441 int
	var yyb1441 bool
	var yyhl1441 bool = l >= 0
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1441++
		if yyhl1441 {
			yyb1441 = yyj1441 > l
		} else {
			yyb1441 = r.CheckBreak()
		}
		if yyb1441 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1441-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1445 := z.EncBinary()
		_ = yym1445
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1446 := !z.EncBinary()
			yy2arr1446 := z.EncBasicHandle().StructToArray
			var yyq1446 [8]bool
			_, _, _ = yysep1446, yyq1446, yy2arr1446
			const yyr1446 bool = false
			yyq1446[1] = true
			yyq1446[2] = true
			yyq1446[7] = x.ContainerID != ""
			var yynn1446 int
			if yyr1446 || yy2arr1446 {
				r.EncodeArrayStart(8)
			} else {
				yynn1446 = 5
				for _, b := range yyq1446 {
					if b {
						yynn1446++
					}
				}
				r.EncodeMapStart(yynn1446)
				yynn1446 = 0
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1448 := z.EncBinary()
				_ = yym1448
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1449 := z.EncBinary()
				_ = yym1449
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1446[1] {
					yy1451 := &x.State
					yy1451.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1446[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1452 := &x.State
					yy1452.CodecEncodeSelf(e)
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1446[2] {
					yy1454 := &x.LastTerminationState
					yy1454.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1446[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1455 := &x.LastTerminationState
					yy1455.CodecEncodeSelf(e)
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1457 := z.EncBinary()
				_ = yym1457
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1458 := z.EncBinary()
				_ = yym1458
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1460 := z.EncBinary()
				_ = yym1460
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1461 := z.EncBinary()
				_ = yym1461
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1463 := z.EncBinary()
				_ = yym1463
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1464 := z.EncBinary()
				_ = yym1464
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1466 := z.EncBinary()
				_ = yym1466
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1467 := z.EncBinary()
				_ = yym1467
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1446[7] {
					yym1469 := z.EncBinary()
					_ = yym1469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1446[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1470 := z.EncBinary()
					_ = yym1470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1471 := z.DecBinary()
	_ = yym1471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1472 := r.ContainerType()
		if yyct1472 == codecSelferValueTypeMap1234 {
			yyl1472 := r.ReadMapStart()
			if yyl1472 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1472, d)
			}
		} else if yyct1472 == codecSelferValueTypeArray1234 {
			yyl1472 := r.ReadArrayStart()
			if yyl1472 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1472, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1473Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1473Slc
	var yyhl1473 bool = l >= 0
	for yyj1473 := 0; ; yyj1473++ {
		if yyhl1473 {
			if yyj1473 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1473Slc = r.DecodeBytes(yys1473Slc, true, true)
		yys1473 := string(yys1473Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1473 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1475 := &x.State
				yyv1475.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1476 := &x.LastTerminationState
				yyv1476.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1473)
		} // end switch yys1473
	} // end for yyj1473
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1482 int
	var yyb1482 bool
	var yyhl1482 bool = l >= 0
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1484 := &x.State
		yyv1484.CodecDecodeSelf(d)
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1485 := &x.LastTerminationState
		yyv1485.CodecDecodeSelf(d)
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1482++
		if yyhl1482 {
			yyb1482 = yyj1482 > l
		} else {
			yyb1482 = r.CheckBreak()
		}
		if yyb1482 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1482-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1491 := z.EncBinary()
	_ = yym1491
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1492 := z.DecBinary()
	_ = yym1492
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1493 := z.EncBinary()
	_ = yym1493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1494 := z.DecBinary()
	_ = yym1494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1495 := z.EncBinary()
		_ = yym1495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1496 := !z.EncBinary()
			yy2arr1496 := z.EncBasicHandle().StructToArray
			var yyq1496 [6]bool
			_, _, _ = yysep1496, yyq1496, yy2arr1496
			const yyr1496 bool = false
			yyq1496[2] = true
			yyq1496[3] = true
			yyq1496[4] = x.Reason != ""
			yyq1496[5] = x.Message != ""
			var yynn1496 int
			if yyr1496 || yy2arr1496 {
				r.EncodeArrayStart(6)
			} else {
				yynn1496 = 2
				for _, b := range yyq1496 {
					if b {
						yynn1496++
					}
				}
				r.EncodeMapStart(yynn1496)
				yynn1496 = 0
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[2] {
					yy1500 := &x.LastProbeTime
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1500) {
					} else if yym1501 {
						z.EncBinaryMarshal(yy1500)
					} else if !yym1501 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1500)
					} else {
						z.EncFallback(yy1500)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1502 := &x.LastProbeTime
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1502) {
					} else if yym1503 {
						z.EncBinaryMarshal(yy1502)
					} else if !yym1503 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1502)
					} else {
						z.EncFallback(yy1502)
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[3] {
					yy1505 := &x.LastTransitionTime
					yym1506 := z.EncBinary()
					_ = yym1506
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1505) {
					} else if yym1506 {
						z.EncBinaryMarshal(yy1505)
					} else if !yym1506 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1505)
					} else {
						z.EncFallback(yy1505)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1507 := &x.LastTransitionTime
					yym1508 := z.EncBinary()
					_ = yym1508
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1507) {
					} else if yym1508 {
						z.EncBinaryMarshal(yy1507)
					} else if !yym1508 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1507)
					} else {
						z.EncFallback(yy1507)
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[4] {
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1511 := z.EncBinary()
					_ = yym1511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[5] {
					yym1513 := z.EncBinary()
					_ = yym1513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1515 := z.DecBinary()
	_ = yym1515
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1516 := r.ContainerType()
		if yyct1516 == codecSelferValueTypeMap1234 {
			yyl1516 := r.ReadMapStart()
			if yyl1516 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1516, d)
			}
		} else if yyct1516 == codecSelferValueTypeArray1234 {
			yyl1516 := r.ReadArrayStart()
			if yyl1516 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1516, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1517Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1517Slc
	var yyhl1517 bool = l >= 0
	for yyj1517 := 0; ; yyj1517++ {
		if yyhl1517 {
			if yyj1517 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1517Slc = r.DecodeBytes(yys1517Slc, true, true)
		yys1517 := string(yys1517Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1517 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1520 := &x.LastProbeTime
				yym1521 := z.DecBinary()
				_ = yym1521
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1520) {
				} else if yym1521 {
					z.DecBinaryUnmarshal(yyv1520)
				} else if !yym1521 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1520)
				} else {
					z.DecFallback(yyv1520, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1522 := &x.LastTransitionTime
				yym1523 := z.DecBinary()
				_ = yym1523
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1522) {
				} else if yym1523 {
					z.DecBinaryUnmarshal(yyv1522)
				} else if !yym1523 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1522)
				} else {
					z.DecFallback(yyv1522, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1517)
		} // end switch yys1517
	} // end for yyj1517
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1526 int
	var yyb1526 bool
	var yyhl1526 bool = l >= 0
	yyj1526++
	if yyhl1526 {
		yyb1526 = yyj1526 > l
	} else {
		yyb1526 = r.CheckBreak()
	}
	if yyb1526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1526++
	if yyhl1526 {
		yyb1526 = yyj1526 > l
	} else {
		yyb1526 = r.CheckBreak()
	}
	if yyb1526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1526++
	if yyhl1526 {
		yyb1526 = yyj1526 > l
	} else {
		yyb1526 = r.CheckBreak()
	}
	if yyb1526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1529 := &x.LastProbeTime
		yym1530 := z.DecBinary()
		_ = yym1530
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1529) {
		} else if yym1530 {
			z.DecBinaryUnmarshal(yyv1529)
		} else if !yym1530 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1529)
		} else {
			z.DecFallback(yyv1529, false)
		}
	}
	yyj1526++
	if yyhl1526 {
		yyb1526 = yyj1526 > l
	} else {
		yyb1526 = r.CheckBreak()
	}
	if yyb1526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1531 := &x.LastTransitionTime
		yym1532 := z.DecBinary()
		_ = yym1532
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1531) {
		} else if yym1532 {
			z.DecBinaryUnmarshal(yyv1531)
		} else if !yym1532 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1531)
		} else {
			z.DecFallback(yyv1531, false)
		}
	}
	yyj1526++
	if yyhl1526 {
		yyb1526 = yyj1526 > l
	} else {
		yyb1526 = r.CheckBreak()
	}
	if yyb1526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1526++
	if yyhl1526 {
		yyb1526 = yyj1526 > l
	} else {
		yyb1526 = r.CheckBreak()
	}
	if yyb1526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1526++
		if yyhl1526 {
			yyb1526 = yyj1526 > l
		} else {
			yyb1526 = r.CheckBreak()
		}
		if yyb1526 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1526-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1535 := z.EncBinary()
	_ = yym1535
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1536 := z.DecBinary()
	_ = yym1536
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1537 := z.EncBinary()
		_ = yym1537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1538 := !z.EncBinary()
			yy2arr1538 := z.EncBasicHandle().StructToArray
			var yyq1538 [4]bool
			_, _, _ = yysep1538, yyq1538, yy2arr1538
			const yyr1538 bool = false
			yyq1538[0] = true
			yyq1538[2] = x.Kind != ""
			yyq1538[3] = x.APIVersion != ""
			var yynn1538 int
			if yyr1538 || yy2arr1538 {
				r.EncodeArrayStart(4)
			} else {
				yynn1538 = 1
				for _, b := range yyq1538 {
					if b {
						yynn1538++
					}
				}
				r.EncodeMapStart(yynn1538)
				yynn1538 = 0
			}
			if yyr1538 || yy2arr1538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1538[0] {
					yy1540 := &x.ListMeta
					yym1541 := z.EncBinary()
					_ = yym1541
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1540) {
					} else {
						z.EncFallback(yy1540)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1538[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1542 := &x.ListMeta
					yym1543 := z.EncBinary()
					_ = yym1543
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1542) {
					} else {
						z.EncFallback(yy1542)
					}
				}
			}
			if yyr1538 || yy2arr1538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1545 := z.EncBinary()
					_ = yym1545
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1546 := z.EncBinary()
					_ = yym1546
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1538 || yy2arr1538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1538[2] {
					yym1548 := z.EncBinary()
					_ = yym1548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1538[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1549 := z.EncBinary()
					_ = yym1549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1538 || yy2arr1538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1538[3] {
					yym1551 := z.EncBinary()
					_ = yym1551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1538[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1552 := z.EncBinary()
					_ = yym1552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1538 || yy2arr1538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1553 := z.DecBinary()
	_ = yym1553
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1554 := r.ContainerType()
		if yyct1554 == codecSelferValueTypeMap1234 {
			yyl1554 := r.ReadMapStart()
			if yyl1554 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1554, d)
			}
		} else if yyct1554 == codecSelferValueTypeArray1234 {
			yyl1554 := r.ReadArrayStart()
			if yyl1554 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1554, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1555Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1555Slc
	var yyhl1555 bool = l >= 0
	for yyj1555 := 0; ; yyj1555++ {
		if yyhl1555 {
			if yyj1555 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1555Slc = r.DecodeBytes(yys1555Slc, true, true)
		yys1555 := string(yys1555Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1555 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1556 := &x.ListMeta
				yym1557 := z.DecBinary()
				_ = yym1557
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1556) {
				} else {
					z.DecFallback(yyv1556, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1558 := &x.Items
				yym1559 := z.DecBinary()
				_ = yym1559
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1558), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1555)
		} // end switch yys1555
	} // end for yyj1555
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1562 int
	var yyb1562 bool
	var yyhl1562 bool = l >= 0
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1563 := &x.ListMeta
		yym1564 := z.DecBinary()
		_ = yym1564
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1563) {
		} else {
			z.DecFallback(yyv1563, false)
		}
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1565 := &x.Items
		yym1566 := z.DecBinary()
		_ = yym1566
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1565), d)
		}
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj1562++
		if yyhl1562 {
			yyb1562 = yyj1562 > l
		} else {
			yyb1562 = r.CheckBreak()
		}
		if yyb1562 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1562-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1569 := z.EncBinary()
	_ = yym1569
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1570 := z.DecBinary()
	_ = yym1570
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1571 := z.EncBinary()
		_ = yym1571
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1572 := !z.EncBinary()
			yy2arr1572 := z.EncBasicHandle().StructToArray
			var yyq1572 [1]bool
			_, _, _ = yysep1572, yyq1572, yy2arr1572
			const yyr1572 bool = false
			var yynn1572 int
			if yyr1572 || yy2arr1572 {
				r.EncodeArrayStart(1)
			} else {
				yynn1572 = 1
				for _, b := range yyq1572 {
					if b {
						yynn1572++
					}
				}
				r.EncodeMapStart(yynn1572)
				yynn1572 = 0
			}
			if yyr1572 || yy2arr1572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1574 := z.EncBinary()
					_ = yym1574
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1575 := z.EncBinary()
					_ = yym1575
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1572 || yy2arr1572 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1576 := z.DecBinary()
	_ = yym1576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1577 := r.ContainerType()
		if yyct1577 == codecSelferValueTypeMap1234 {
			yyl1577 := r.ReadMapStart()
			if yyl1577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1577, d)
			}
		} else if yyct1577 == codecSelferValueTypeArray1234 {
			yyl1577 := r.ReadArrayStart()
			if yyl1577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1578Slc
	var yyhl1578 bool = l >= 0
	for yyj1578 := 0; ; yyj1578++ {
		if yyhl1578 {
			if yyj1578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1578Slc = r.DecodeBytes(yys1578Slc, true, true)
		yys1578 := string(yys1578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1578 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1579 := &x.NodeSelectorTerms
				yym1580 := z.DecBinary()
				_ = yym1580
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1579), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1578)
		} // end switch yys1578
	} // end for yyj1578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1581 int
	var yyb1581 bool
	var yyhl1581 bool = l >= 0
	yyj1581++
	if yyhl1581 {
		yyb1581 = yyj1581 > l
	} else {
		yyb1581 = r.CheckBreak()
	}
	if yyb1581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1582 := &x.NodeSelectorTerms
		yym1583 := z.DecBinary()
		_ = yym1583
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1582), d)
		}
	}
	for {
		yyj1581++
		if yyhl1581 {
			yyb1581 = yyj1581 > l
		} else {
			yyb1581 = r.CheckBreak()
		}
		if yyb1581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1584 := z.EncBinary()
		_ = yym1584
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1585 := !z.EncBinary()
			yy2arr1585 := z.EncBasicHandle().StructToArray
			var yyq1585 [1]bool
			_, _, _ = yysep1585, yyq1585, yy2arr1585
			const yyr1585 bool = false
			var yynn1585 int
			if yyr1585 || yy2arr1585 {
				r.EncodeArrayStart(1)
			} else {
				yynn1585 = 1
				for _, b := range yyq1585 {
					if b {
						yynn1585++
					}
				}
				r.EncodeMapStart(yynn1585)
				yynn1585 = 0
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1587 := z.EncBinary()
					_ = yym1587
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1588 := z.EncBinary()
					_ = yym1588
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1589 := z.DecBinary()
	_ = yym1589
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1590 := r.ContainerType()
		if yyct1590 == codecSelferValueTypeMap1234 {
			yyl1590 := r.ReadMapStart()
			if yyl1590 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1590, d)
			}
		} else if yyct1590 == codecSelferValueTypeArray1234 {
			yyl1590 := r.ReadArrayStart()
			if yyl1590 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1590, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1591Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1591Slc
	var yyhl1591 bool = l >= 0
	for yyj1591 := 0; ; yyj1591++ {
		if yyhl1591 {
			if yyj1591 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1591Slc = r.DecodeBytes(yys1591Slc, true, true)
		yys1591 := string(yys1591Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1591 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1592 := &x.MatchExpressions
				yym1593 := z.DecBinary()
				_ = yym1593
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1592), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1591)
		} // end switch yys1591
	} // end for yyj1591
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1594 int
	var yyb1594 bool
	var yyhl1594 bool = l >= 0
	yyj1594++
	if yyhl1594 {
		yyb1594 = yyj1594 > l
	} else {
		yyb1594 = r.CheckBreak()
	}
	if yyb1594 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1595 := &x.MatchExpressions
		yym1596 := z.DecBinary()
		_ = yym1596
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1595), d)
		}
	}
	for {
		yyj1594++
		if yyhl1594 {
			yyb1594 = yyj1594 > l
		} else {
			yyb1594 = r.CheckBreak()
		}
		if yyb1594 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1594-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1597 := z.EncBinary()
		_ = yym1597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1598 := !z.EncBinary()
			yy2arr1598 := z.EncBasicHandle().StructToArray
			var yyq1598 [3]bool
			_, _, _ = yysep1598, yyq1598, yy2arr1598
			const yyr1598 bool = false
			yyq1598[2] = len(x.Values) != 0
			var yynn1598 int
			if yyr1598 || yy2arr1598 {
				r.EncodeArrayStart(3)
			} else {
				yynn1598 = 2
				for _, b := range yyq1598 {
					if b {
						yynn1598++
					}
				}
				r.EncodeMapStart(yynn1598)
				yynn1598 = 0
			}
			if yyr1598 || yy2arr1598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1600 := z.EncBinary()
				_ = yym1600
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1601 := z.EncBinary()
				_ = yym1601
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1598 || yy2arr1598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1598 || yy2arr1598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1598[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1604 := z.EncBinary()
						_ = yym1604
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1598[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1605 := z.EncBinary()
						_ = yym1605
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1598 || yy2arr1598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1606 := z.DecBinary()
	_ = yym1606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1607 := r.ContainerType()
		if yyct1607 == codecSelferValueTypeMap1234 {
			yyl1607 := r.ReadMapStart()
			if yyl1607 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1607, d)
			}
		} else if yyct1607 == codecSelferValueTypeArray1234 {
			yyl1607 := r.ReadArrayStart()
			if yyl1607 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1607, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1608Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1608Slc
	var yyhl1608 bool = l >= 0
	for yyj1608 := 0; ; yyj1608++ {
		if yyhl1608 {
			if yyj1608 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1608Slc = r.DecodeBytes(yys1608Slc, true, true)
		yys1608 := string(yys1608Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1608 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1611 := &x.Values
				yym1612 := z.DecBinary()
				_ = yym1612
				if false {
				} else {
					z.F.DecSliceStringX(yyv1611, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1608)
		} // end switch yys1608
	} // end for yyj1608
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1613 int
	var yyb1613 bool
	var yyhl1613 bool = l >= 0
	yyj1613++
	if yyhl1613 {
		yyb1613 = yyj1613 > l
	} else {
		yyb1613 = r.CheckBreak()
	}
	if yyb1613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1613++
	if yyhl1613 {
		yyb1613 = yyj1613 > l
	} else {
		yyb1613 = r.CheckBreak()
	}
	if yyb1613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1613++
	if yyhl1613 {
		yyb1613 = yyj1613 > l
	} else {
		yyb1613 = r.CheckBreak()
	}
	if yyb1613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1616 := &x.Values
		yym1617 := z.DecBinary()
		_ = yym1617
		if false {
		} else {
			z.F.DecSliceStringX(yyv1616, false, d)
		}
	}
	for {
		yyj1613++
		if yyhl1613 {
			yyb1613 = yyj1613 > l
		} else {
			yyb1613 = r.CheckBreak()
		}
		if yyb1613 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1613-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1618 := z.EncBinary()
	_ = yym1618
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1619 := z.DecBinary()
	_ = yym1619
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1620 := z.EncBinary()
		_ = yym1620
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1621 := !z.EncBinary()
			yy2arr1621 := z.EncBasicHandle().StructToArray
			var yyq1621 [3]bool
			_, _, _ = yysep1621, yyq1621, yy2arr1621
			const yyr1621 bool = false
			yyq1621[0] = x.NodeAffinity != nil
			yyq1621[1] = x.PodAffinity != nil
			yyq1621[2] = x.PodAntiAffinity != nil
			var yynn1621 int
			if yyr1621 || yy2arr1621 {
				r.EncodeArrayStart(3)
			} else {
				yynn1621 = 0
				for _, b := range yyq1621 {
					if b {
						yynn1621++
					}
				}
				r.EncodeMapStart(yynn1621)
				yynn1621 = 0
			}
			if yyr1621 || yy2arr1621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1621[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1621[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1621 || yy2arr1621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1621[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1621[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1621 || yy2arr1621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1621[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1621[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1621 || yy2arr1621 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1625 := z.DecBinary()
	_ = yym1625
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1626 := r.ContainerType()
		if yyct1626 == codecSelferValueTypeMap1234 {
			yyl1626 := r.ReadMapStart()
			if yyl1626 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1626, d)
			}
		} else if yyct1626 == codecSelferValueTypeArray1234 {
			yyl1626 := r.ReadArrayStart()
			if yyl1626 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1626, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1627Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1627Slc
	var yyhl1627 bool = l >= 0
	for yyj1627 := 0; ; yyj1627++ {
		if yyhl1627 {
			if yyj1627 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1627Slc = r.DecodeBytes(yys1627Slc, true, true)
		yys1627 := string(yys1627Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1627 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1627)
		} // end switch yys1627
	} // end for yyj1627
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1631 int
	var yyb1631 bool
	var yyhl1631 bool = l >= 0
	yyj1631++
	if yyhl1631 {
		yyb1631 = yyj1631 > l
	} else {
		yyb1631 = r.CheckBreak()
	}
	if yyb1631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1631++
	if yyhl1631 {
		yyb1631 = yyj1631 > l
	} else {
		yyb1631 = r.CheckBreak()
	}
	if yyb1631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1631++
	if yyhl1631 {
		yyb1631 = yyj1631 > l
	} else {
		yyb1631 = r.CheckBreak()
	}
	if yyb1631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1631++
		if yyhl1631 {
			yyb1631 = yyj1631 > l
		} else {
			yyb1631 = r.CheckBreak()
		}
		if yyb1631 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1631-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1635 := z.EncBinary()
		_ = yym1635
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1636 := !z.EncBinary()
			yy2arr1636 := z.EncBasicHandle().StructToArray
			var yyq1636 [3]bool
			_, _, _ = yysep1636, yyq1636, yy2arr1636
			const yyr1636 bool = false
			yyq1636[0] = x.RequiredDuringSchedulingRequiredDuringExecution != nil
			yyq1636[1] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1636[2] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1636 int
			if yyr1636 || yy2arr1636 {
				r.EncodeArrayStart(3)
			} else {
				yynn1636 = 0
				for _, b := range yyq1636 {
					if b {
						yynn1636++
					}
				}
				r.EncodeMapStart(yynn1636)
				yynn1636 = 0
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1636[0] {
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingRequiredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1636[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingRequiredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingRequiredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1636[1] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1636[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1636[2] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1640 := z.EncBinary()
						_ = yym1640
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1636[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1641 := z.EncBinary()
						_ = yym1641
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1642 := z.DecBinary()
	_ = yym1642
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1643 := r.ContainerType()
		if yyct1643 == codecSelferValueTypeMap1234 {
			yyl1643 := r.ReadMapStart()
			if yyl1643 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1643, d)
			}
		} else if yyct1643 == codecSelferValueTypeArray1234 {
			yyl1643 := r.ReadArrayStart()
			if yyl1643 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1643, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1644Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1644Slc
	var yyhl1644 bool = l >= 0
	for yyj1644 := 0; ; yyj1644++ {
		if yyhl1644 {
			if yyj1644 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1644Slc = r.DecodeBytes(yys1644Slc, true, true)
		yys1644 := string(yys1644Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1644 {
		case "requiredDuringSchedulingRequiredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingRequiredDuringExecution != nil {
					x.RequiredDuringSchedulingRequiredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
					x.RequiredDuringSchedulingRequiredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingRequiredDuringExecution.CodecDecodeSelf(d)
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1647 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1648 := z.DecBinary()
				_ = yym1648
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1647), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1644)
		} // end switch yys1644
	} // end for yyj1644
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1649 int
	var yyb1649 bool
	var yyhl1649 bool = l >= 0
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingRequiredDuringExecution != nil {
			x.RequiredDuringSchedulingRequiredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
			x.RequiredDuringSchedulingRequiredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingRequiredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1652 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1653 := z.DecBinary()
		_ = yym1653
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1652), d)
		}
	}
	for {
		yyj1649++
		if yyhl1649 {
			yyb1649 = yyj1649 > l
		} else {
			yyb1649 = r.CheckBreak()
		}
		if yyb1649 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1649-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1654 := z.EncBinary()
		_ = yym1654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1655 := !z.EncBinary()
			yy2arr1655 := z.EncBasicHandle().StructToArray
			var yyq1655 [2]bool
			_, _, _ = yysep1655, yyq1655, yy2arr1655
			const yyr1655 bool = false
			var yynn1655 int
			if yyr1655 || yy2arr1655 {
				r.EncodeArrayStart(2)
			} else {
				yynn1655 = 2
				for _, b := range yyq1655 {
					if b {
						yynn1655++
					}
				}
				r.EncodeMapStart(yynn1655)
				yynn1655 = 0
			}
			if yyr1655 || yy2arr1655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1657 := z.EncBinary()
				_ = yym1657
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1658 := z.EncBinary()
				_ = yym1658
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1655 || yy2arr1655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1660 := &x.Preference
				yy1660.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1661 := &x.Preference
				yy1661.CodecEncodeSelf(e)
			}
			if yyr1655 || yy2arr1655 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1662 := z.DecBinary()
	_ = yym1662
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1663 := r.ContainerType()
		if yyct1663 == codecSelferValueTypeMap1234 {
			yyl1663 := r.ReadMapStart()
			if yyl1663 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1663, d)
			}
		} else if yyct1663 == codecSelferValueTypeArray1234 {
			yyl1663 := r.ReadArrayStart()
			if yyl1663 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1663, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1664Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1664Slc
	var yyhl1664 bool = l >= 0
	for yyj1664 := 0; ; yyj1664++ {
		if yyhl1664 {
			if yyj1664 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1664Slc = r.DecodeBytes(yys1664Slc, true, true)
		yys1664 := string(yys1664Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1664 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1666 := &x.Preference
				yyv1666.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1664)
		} // end switch yys1664
	} // end for yyj1664
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1667 int
	var yyb1667 bool
	var yyhl1667 bool = l >= 0
	yyj1667++
	if yyhl1667 {
		yyb1667 = yyj1667 > l
	} else {
		yyb1667 = r.CheckBreak()
	}
	if yyb1667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1667++
	if yyhl1667 {
		yyb1667 = yyj1667 > l
	} else {
		yyb1667 = r.CheckBreak()
	}
	if yyb1667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1669 := &x.Preference
		yyv1669.CodecDecodeSelf(d)
	}
	for {
		yyj1667++
		if yyhl1667 {
			yyb1667 = yyj1667 > l
		} else {
			yyb1667 = r.CheckBreak()
		}
		if yyb1667 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1667-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1670 := z.EncBinary()
		_ = yym1670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1671 := !z.EncBinary()
			yy2arr1671 := z.EncBasicHandle().StructToArray
			var yyq1671 [2]bool
			_, _, _ = yysep1671, yyq1671, yy2arr1671
			const yyr1671 bool = false
			yyq1671[0] = len(x.MatchLabels) != 0
			yyq1671[1] = len(x.MatchExpressions) != 0
			var yynn1671 int
			if yyr1671 || yy2arr1671 {
				r.EncodeArrayStart(2)
			} else {
				yynn1671 = 0
				for _, b := range yyq1671 {
					if b {
						yynn1671++
					}
				}
				r.EncodeMapStart(yynn1671)
				yynn1671 = 0
			}
			if yyr1671 || yy2arr1671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1671[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1673 := z.EncBinary()
						_ = yym1673
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1671[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1674 := z.EncBinary()
						_ = yym1674
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1671 || yy2arr1671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1671[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1676 := z.EncBinary()
						_ = yym1676
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1671[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1677 := z.EncBinary()
						_ = yym1677
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1671 || yy2arr1671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1678 := z.DecBinary()
	_ = yym1678
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1679 := r.ContainerType()
		if yyct1679 == codecSelferValueTypeMap1234 {
			yyl1679 := r.ReadMapStart()
			if yyl1679 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1679, d)
			}
		} else if yyct1679 == codecSelferValueTypeArray1234 {
			yyl1679 := r.ReadArrayStart()
			if yyl1679 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1679, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1680Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1680Slc
	var yyhl1680 bool = l >= 0
	for yyj1680 := 0; ; yyj1680++ {
		if yyhl1680 {
			if yyj1680 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1680Slc = r.DecodeBytes(yys1680Slc, true, true)
		yys1680 := string(yys1680Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1680 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1681 := &x.MatchLabels
				yym1682 := z.DecBinary()
				_ = yym1682
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1681, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1683 := &x.MatchExpressions
				yym1684 := z.DecBinary()
				_ = yym1684
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1683), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1680)
		} // end switch yys1680
	} // end for yyj1680
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1685 int
	var yyb1685 bool
	var yyhl1685 bool = l >= 0
	yyj1685++
	if yyhl1685 {
		yyb1685 = yyj1685 > l
	} else {
		yyb1685 = r.CheckBreak()
	}
	if yyb1685 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1686 := &x.MatchLabels
		yym1687 := z.DecBinary()
		_ = yym1687
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1686, false, d)
		}
	}
	yyj1685++
	if yyhl1685 {
		yyb1685 = yyj1685 > l
	} else {
		yyb1685 = r.CheckBreak()
	}
	if yyb1685 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1688 := &x.MatchExpressions
		yym1689 := z.DecBinary()
		_ = yym1689
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1688), d)
		}
	}
	for {
		yyj1685++
		if yyhl1685 {
			yyb1685 = yyj1685 > l
		} else {
			yyb1685 = r.CheckBreak()
		}
		if yyb1685 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1685-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1690 := z.EncBinary()
		_ = yym1690
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1691 := !z.EncBinary()
			yy2arr1691 := z.EncBasicHandle().StructToArray
			var yyq1691 [3]bool
			_, _, _ = yysep1691, yyq1691, yy2arr1691
			const yyr1691 bool = false
			yyq1691[2] = len(x.Values) != 0
			var yynn1691 int
			if yyr1691 || yy2arr1691 {
				r.EncodeArrayStart(3)
			} else {
				yynn1691 = 2
				for _, b := range yyq1691 {
					if b {
						yynn1691++
					}
				}
				r.EncodeMapStart(yynn1691)
				yynn1691 = 0
			}
			if yyr1691 || yy2arr1691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1693 := z.EncBinary()
				_ = yym1693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1694 := z.EncBinary()
				_ = yym1694
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1691 || yy2arr1691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1691 || yy2arr1691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1691[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1697 := z.EncBinary()
						_ = yym1697
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1691[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1698 := z.EncBinary()
						_ = yym1698
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1691 || yy2arr1691 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1699 := z.DecBinary()
	_ = yym1699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1700 := r.ContainerType()
		if yyct1700 == codecSelferValueTypeMap1234 {
			yyl1700 := r.ReadMapStart()
			if yyl1700 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1700, d)
			}
		} else if yyct1700 == codecSelferValueTypeArray1234 {
			yyl1700 := r.ReadArrayStart()
			if yyl1700 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1700, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1701Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1701Slc
	var yyhl1701 bool = l >= 0
	for yyj1701 := 0; ; yyj1701++ {
		if yyhl1701 {
			if yyj1701 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1701Slc = r.DecodeBytes(yys1701Slc, true, true)
		yys1701 := string(yys1701Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1701 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1704 := &x.Values
				yym1705 := z.DecBinary()
				_ = yym1705
				if false {
				} else {
					z.F.DecSliceStringX(yyv1704, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1701)
		} // end switch yys1701
	} // end for yyj1701
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1706 int
	var yyb1706 bool
	var yyhl1706 bool = l >= 0
	yyj1706++
	if yyhl1706 {
		yyb1706 = yyj1706 > l
	} else {
		yyb1706 = r.CheckBreak()
	}
	if yyb1706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1706++
	if yyhl1706 {
		yyb1706 = yyj1706 > l
	} else {
		yyb1706 = r.CheckBreak()
	}
	if yyb1706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1706++
	if yyhl1706 {
		yyb1706 = yyj1706 > l
	} else {
		yyb1706 = r.CheckBreak()
	}
	if yyb1706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1709 := &x.Values
		yym1710 := z.DecBinary()
		_ = yym1710
		if false {
		} else {
			z.F.DecSliceStringX(yyv1709, false, d)
		}
	}
	for {
		yyj1706++
		if yyhl1706 {
			yyb1706 = yyj1706 > l
		} else {
			yyb1706 = r.CheckBreak()
		}
		if yyb1706 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1706-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1711 := z.EncBinary()
	_ = yym1711
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1712 := z.DecBinary()
	_ = yym1712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1713 := z.EncBinary()
		_ = yym1713
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1714 := !z.EncBinary()
			yy2arr1714 := z.EncBasicHandle().StructToArray
			var yyq1714 [3]bool
			_, _, _ = yysep1714, yyq1714, yy2arr1714
			const yyr1714 bool = false
			yyq1714[0] = len(x.RequiredDuringSchedulingRequiredDuringExecution) != 0
			yyq1714[1] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1714[2] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1714 int
			if yyr1714 || yy2arr1714 {
				r.EncodeArrayStart(3)
			} else {
				yynn1714 = 0
				for _, b := range yyq1714 {
					if b {
						yynn1714++
					}
				}
				r.EncodeMapStart(yynn1714)
				yynn1714 = 0
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[0] {
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1716 := z.EncBinary()
						_ = yym1716
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingRequiredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingRequiredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1717 := z.EncBinary()
						_ = yym1717
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingRequiredDuringExecution), e)
						}
					}
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[1] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1719 := z.EncBinary()
						_ = yym1719
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1720 := z.EncBinary()
						_ = yym1720
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[2] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1722 := z.EncBinary()
						_ = yym1722
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1723 := z.EncBinary()
						_ = yym1723
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1724 := z.DecBinary()
	_ = yym1724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1725 := r.ContainerType()
		if yyct1725 == codecSelferValueTypeMap1234 {
			yyl1725 := r.ReadMapStart()
			if yyl1725 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1725, d)
			}
		} else if yyct1725 == codecSelferValueTypeArray1234 {
			yyl1725 := r.ReadArrayStart()
			if yyl1725 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1726Slc
	var yyhl1726 bool = l >= 0
	for yyj1726 := 0; ; yyj1726++ {
		if yyhl1726 {
			if yyj1726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1726Slc = r.DecodeBytes(yys1726Slc, true, true)
		yys1726 := string(yys1726Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1726 {
		case "requiredDuringSchedulingRequiredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingRequiredDuringExecution = nil
			} else {
				yyv1727 := &x.RequiredDuringSchedulingRequiredDuringExecution
				yym1728 := z.DecBinary()
				_ = yym1728
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1727), d)
				}
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1729 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1730 := z.DecBinary()
				_ = yym1730
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1729), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1731 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1732 := z.DecBinary()
				_ = yym1732
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1731), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1726)
		} // end switch yys1726
	} // end for yyj1726
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1733 int
	var yyb1733 bool
	var yyhl1733 bool = l >= 0
	yyj1733++
	if yyhl1733 {
		yyb1733 = yyj1733 > l
	} else {
		yyb1733 = r.CheckBreak()
	}
	if yyb1733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingRequiredDuringExecution = nil
	} else {
		yyv1734 := &x.RequiredDuringSchedulingRequiredDuringExecution
		yym1735 := z.DecBinary()
		_ = yym1735
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1734), d)
		}
	}
	yyj1733++
	if yyhl1733 {
		yyb1733 = yyj1733 > l
	} else {
		yyb1733 = r.CheckBreak()
	}
	if yyb1733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1736 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1737 := z.DecBinary()
		_ = yym1737
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1736), d)
		}
	}
	yyj1733++
	if yyhl1733 {
		yyb1733 = yyj1733 > l
	} else {
		yyb1733 = r.CheckBreak()
	}
	if yyb1733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1738 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1739 := z.DecBinary()
		_ = yym1739
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1738), d)
		}
	}
	for {
		yyj1733++
		if yyhl1733 {
			yyb1733 = yyj1733 > l
		} else {
			yyb1733 = r.CheckBreak()
		}
		if yyb1733 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1733-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1740 := z.EncBinary()
		_ = yym1740
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1741 := !z.EncBinary()
			yy2arr1741 := z.EncBasicHandle().StructToArray
			var yyq1741 [3]bool
			_, _, _ = yysep1741, yyq1741, yy2arr1741
			const yyr1741 bool = false
			yyq1741[0] = len(x.RequiredDuringSchedulingRequiredDuringExecution) != 0
			yyq1741[1] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1741[2] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1741 int
			if yyr1741 || yy2arr1741 {
				r.EncodeArrayStart(3)
			} else {
				yynn1741 = 0
				for _, b := range yyq1741 {
					if b {
						yynn1741++
					}
				}
				r.EncodeMapStart(yynn1741)
				yynn1741 = 0
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[0] {
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1743 := z.EncBinary()
						_ = yym1743
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingRequiredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1741[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingRequiredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1744 := z.EncBinary()
						_ = yym1744
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingRequiredDuringExecution), e)
						}
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[1] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1746 := z.EncBinary()
						_ = yym1746
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1741[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1747 := z.EncBinary()
						_ = yym1747
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[2] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1749 := z.EncBinary()
						_ = yym1749
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1741[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1750 := z.EncBinary()
						_ = yym1750
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1751 := z.DecBinary()
	_ = yym1751
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1752 := r.ContainerType()
		if yyct1752 == codecSelferValueTypeMap1234 {
			yyl1752 := r.ReadMapStart()
			if yyl1752 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1752, d)
			}
		} else if yyct1752 == codecSelferValueTypeArray1234 {
			yyl1752 := r.ReadArrayStart()
			if yyl1752 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1752, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1753Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1753Slc
	var yyhl1753 bool = l >= 0
	for yyj1753 := 0; ; yyj1753++ {
		if yyhl1753 {
			if yyj1753 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1753Slc = r.DecodeBytes(yys1753Slc, true, true)
		yys1753 := string(yys1753Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1753 {
		case "requiredDuringSchedulingRequiredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingRequiredDuringExecution = nil
			} else {
				yyv1754 := &x.RequiredDuringSchedulingRequiredDuringExecution
				yym1755 := z.DecBinary()
				_ = yym1755
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1754), d)
				}
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1756 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1757 := z.DecBinary()
				_ = yym1757
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1756), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1758 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1759 := z.DecBinary()
				_ = yym1759
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1758), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1753)
		} // end switch yys1753
	} // end for yyj1753
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1760 int
	var yyb1760 bool
	var yyhl1760 bool = l >= 0
	yyj1760++
	if yyhl1760 {
		yyb1760 = yyj1760 > l
	} else {
		yyb1760 = r.CheckBreak()
	}
	if yyb1760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingRequiredDuringExecution = nil
	} else {
		yyv1761 := &x.RequiredDuringSchedulingRequiredDuringExecution
		yym1762 := z.DecBinary()
		_ = yym1762
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1761), d)
		}
	}
	yyj1760++
	if yyhl1760 {
		yyb1760 = yyj1760 > l
	} else {
		yyb1760 = r.CheckBreak()
	}
	if yyb1760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1763 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1764 := z.DecBinary()
		_ = yym1764
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1763), d)
		}
	}
	yyj1760++
	if yyhl1760 {
		yyb1760 = yyj1760 > l
	} else {
		yyb1760 = r.CheckBreak()
	}
	if yyb1760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1765 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1766 := z.DecBinary()
		_ = yym1766
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1765), d)
		}
	}
	for {
		yyj1760++
		if yyhl1760 {
			yyb1760 = yyj1760 > l
		} else {
			yyb1760 = r.CheckBreak()
		}
		if yyb1760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1767 := z.EncBinary()
		_ = yym1767
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1768 := !z.EncBinary()
			yy2arr1768 := z.EncBasicHandle().StructToArray
			var yyq1768 [2]bool
			_, _, _ = yysep1768, yyq1768, yy2arr1768
			const yyr1768 bool = false
			var yynn1768 int
			if yyr1768 || yy2arr1768 {
				r.EncodeArrayStart(2)
			} else {
				yynn1768 = 2
				for _, b := range yyq1768 {
					if b {
						yynn1768++
					}
				}
				r.EncodeMapStart(yynn1768)
				yynn1768 = 0
			}
			if yyr1768 || yy2arr1768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1770 := z.EncBinary()
				_ = yym1770
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1771 := z.EncBinary()
				_ = yym1771
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1768 || yy2arr1768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1773 := &x.PodAffinityTerm
				yy1773.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1774 := &x.PodAffinityTerm
				yy1774.CodecEncodeSelf(e)
			}
			if yyr1768 || yy2arr1768 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1775 := z.DecBinary()
	_ = yym1775
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1776 := r.ContainerType()
		if yyct1776 == codecSelferValueTypeMap1234 {
			yyl1776 := r.ReadMapStart()
			if yyl1776 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1776, d)
			}
		} else if yyct1776 == codecSelferValueTypeArray1234 {
			yyl1776 := r.ReadArrayStart()
			if yyl1776 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1776, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1777Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1777Slc
	var yyhl1777 bool = l >= 0
	for yyj1777 := 0; ; yyj1777++ {
		if yyhl1777 {
			if yyj1777 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1777Slc = r.DecodeBytes(yys1777Slc, true, true)
		yys1777 := string(yys1777Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1777 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1779 := &x.PodAffinityTerm
				yyv1779.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1777)
		} // end switch yys1777
	} // end for yyj1777
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1780 int
	var yyb1780 bool
	var yyhl1780 bool = l >= 0
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1782 := &x.PodAffinityTerm
		yyv1782.CodecDecodeSelf(d)
	}
	for {
		yyj1780++
		if yyhl1780 {
			yyb1780 = yyj1780 > l
		} else {
			yyb1780 = r.CheckBreak()
		}
		if yyb1780 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1780-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1783 := z.EncBinary()
		_ = yym1783
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1784 := !z.EncBinary()
			yy2arr1784 := z.EncBasicHandle().StructToArray
			var yyq1784 [3]bool
			_, _, _ = yysep1784, yyq1784, yy2arr1784
			const yyr1784 bool = false
			yyq1784[0] = x.LabelSelector != nil
			yyq1784[2] = x.TopologyKey != ""
			var yynn1784 int
			if yyr1784 || yy2arr1784 {
				r.EncodeArrayStart(3)
			} else {
				yynn1784 = 1
				for _, b := range yyq1784 {
					if b {
						yynn1784++
					}
				}
				r.EncodeMapStart(yynn1784)
				yynn1784 = 0
			}
			if yyr1784 || yy2arr1784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1784[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						x.LabelSelector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1784[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						x.LabelSelector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1784 || yy2arr1784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1787 := z.EncBinary()
					_ = yym1787
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Namespaces), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1788 := z.EncBinary()
					_ = yym1788
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Namespaces), e)
					}
				}
			}
			if yyr1784 || yy2arr1784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1784[2] {
					yym1790 := z.EncBinary()
					_ = yym1790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1784[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1791 := z.EncBinary()
					_ = yym1791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1784 || yy2arr1784 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1792 := z.DecBinary()
	_ = yym1792
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1793 := r.ContainerType()
		if yyct1793 == codecSelferValueTypeMap1234 {
			yyl1793 := r.ReadMapStart()
			if yyl1793 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1793, d)
			}
		} else if yyct1793 == codecSelferValueTypeArray1234 {
			yyl1793 := r.ReadArrayStart()
			if yyl1793 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1793, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1794Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1794Slc
	var yyhl1794 bool = l >= 0
	for yyj1794 := 0; ; yyj1794++ {
		if yyhl1794 {
			if yyj1794 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1794Slc = r.DecodeBytes(yys1794Slc, true, true)
		yys1794 := string(yys1794Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1794 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(LabelSelector)
				}
				x.LabelSelector.CodecDecodeSelf(d)
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1796 := &x.Namespaces
				yym1797 := z.DecBinary()
				_ = yym1797
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv1796), d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1794)
		} // end switch yys1794
	} // end for yyj1794
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1799 int
	var yyb1799 bool
	var yyhl1799 bool = l >= 0
	yyj1799++
	if yyhl1799 {
		yyb1799 = yyj1799 > l
	} else {
		yyb1799 = r.CheckBreak()
	}
	if yyb1799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(LabelSelector)
		}
		x.LabelSelector.CodecDecodeSelf(d)
	}
	yyj1799++
	if yyhl1799 {
		yyb1799 = yyj1799 > l
	} else {
		yyb1799 = r.CheckBreak()
	}
	if yyb1799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1801 := &x.Namespaces
		yym1802 := z.DecBinary()
		_ = yym1802
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv1801), d)
		}
	}
	yyj1799++
	if yyhl1799 {
		yyb1799 = yyj1799 > l
	} else {
		yyb1799 = r.CheckBreak()
	}
	if yyb1799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1799++
		if yyhl1799 {
			yyb1799 = yyj1799 > l
		} else {
			yyb1799 = r.CheckBreak()
		}
		if yyb1799 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1799-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1804 := z.EncBinary()
		_ = yym1804
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1805 := !z.EncBinary()
			yy2arr1805 := z.EncBasicHandle().StructToArray
			var yyq1805 [12]bool
			_, _, _ = yysep1805, yyq1805, yy2arr1805
			const yyr1805 bool = false
			yyq1805[2] = x.RestartPolicy != ""
			yyq1805[3] = x.TerminationGracePeriodSeconds != nil
			yyq1805[4] = x.ActiveDeadlineSeconds != nil
			yyq1805[5] = x.DNSPolicy != ""
			yyq1805[6] = len(x.NodeSelector) != 0
			yyq1805[7] = x.Affinity != nil
			yyq1805[9] = x.NodeName != ""
			yyq1805[10] = x.SecurityContext != nil
			yyq1805[11] = len(x.ImagePullSecrets) != 0
			var yynn1805 int
			if yyr1805 || yy2arr1805 {
				r.EncodeArrayStart(12)
			} else {
				yynn1805 = 3
				for _, b := range yyq1805 {
					if b {
						yynn1805++
					}
				}
				r.EncodeMapStart(yynn1805)
				yynn1805 = 0
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1807 := z.EncBinary()
					_ = yym1807
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1808 := z.EncBinary()
					_ = yym1808
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1810 := z.EncBinary()
					_ = yym1810
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1805[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1814 := *x.TerminationGracePeriodSeconds
						yym1815 := z.EncBinary()
						_ = yym1815
						if false {
						} else {
							r.EncodeInt(int64(yy1814))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1805[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1816 := *x.TerminationGracePeriodSeconds
						yym1817 := z.EncBinary()
						_ = yym1817
						if false {
						} else {
							r.EncodeInt(int64(yy1816))
						}
					}
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1819 := *x.ActiveDeadlineSeconds
						yym1820 := z.EncBinary()
						_ = yym1820
						if false {
						} else {
							r.EncodeInt(int64(yy1819))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1805[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1821 := *x.ActiveDeadlineSeconds
						yym1822 := z.EncBinary()
						_ = yym1822
						if false {
						} else {
							r.EncodeInt(int64(yy1821))
						}
					}
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1805[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1825 := z.EncBinary()
						_ = yym1825
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1805[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1826 := z.EncBinary()
						_ = yym1826
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[7] {
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1805[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("affinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1829 := z.EncBinary()
				_ = yym1829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1830 := z.EncBinary()
				_ = yym1830
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[9] {
					yym1832 := z.EncBinary()
					_ = yym1832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1805[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1833 := z.EncBinary()
					_ = yym1833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[10] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1805[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[11] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1836 := z.EncBinary()
						_ = yym1836
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1805[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1837 := z.EncBinary()
						_ = yym1837
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1838 := z.DecBinary()
	_ = yym1838
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1839 := r.ContainerType()
		if yyct1839 == codecSelferValueTypeMap1234 {
			yyl1839 := r.ReadMapStart()
			if yyl1839 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1839, d)
			}
		} else if yyct1839 == codecSelferValueTypeArray1234 {
			yyl1839 := r.ReadArrayStart()
			if yyl1839 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1839, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1840Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1840Slc
	var yyhl1840 bool = l >= 0
	for yyj1840 := 0; ; yyj1840++ {
		if yyhl1840 {
			if yyj1840 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1840Slc = r.DecodeBytes(yys1840Slc, true, true)
		yys1840 := string(yys1840Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1840 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1841 := &x.Volumes
				yym1842 := z.DecBinary()
				_ = yym1842
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1841), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1843 := &x.Containers
				yym1844 := z.DecBinary()
				_ = yym1844
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1843), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1847 := z.DecBinary()
				_ = yym1847
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1849 := z.DecBinary()
				_ = yym1849
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1851 := &x.NodeSelector
				yym1852 := z.DecBinary()
				_ = yym1852
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1851, false, d)
				}
			}
		case "affinity":
			if r.TryDecodeAsNil() {
				if x.Affinity != nil {
					x.Affinity = nil
				}
			} else {
				if x.Affinity == nil {
					x.Affinity = new(Affinity)
				}
				x.Affinity.CodecDecodeSelf(d)
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1857 := &x.ImagePullSecrets
				yym1858 := z.DecBinary()
				_ = yym1858
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1857), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1840)
		} // end switch yys1840
	} // end for yyj1840
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1859 int
	var yyb1859 bool
	var yyhl1859 bool = l >= 0
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1860 := &x.Volumes
		yym1861 := z.DecBinary()
		_ = yym1861
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1860), d)
		}
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1862 := &x.Containers
		yym1863 := z.DecBinary()
		_ = yym1863
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1862), d)
		}
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1866 := z.DecBinary()
		_ = yym1866
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1868 := z.DecBinary()
		_ = yym1868
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1870 := &x.NodeSelector
		yym1871 := z.DecBinary()
		_ = yym1871
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1870, false, d)
		}
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Affinity != nil {
			x.Affinity = nil
		}
	} else {
		if x.Affinity == nil {
			x.Affinity = new(Affinity)
		}
		x.Affinity.CodecDecodeSelf(d)
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1876 := &x.ImagePullSecrets
		yym1877 := z.DecBinary()
		_ = yym1877
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1876), d)
		}
	}
	for {
		yyj1859++
		if yyhl1859 {
			yyb1859 = yyj1859 > l
		} else {
			yyb1859 = r.CheckBreak()
		}
		if yyb1859 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1859-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1878 := z.EncBinary()
		_ = yym1878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1879 := !z.EncBinary()
			yy2arr1879 := z.EncBasicHandle().StructToArray
			var yyq1879 [8]bool
			_, _, _ = yysep1879, yyq1879, yy2arr1879
			const yyr1879 bool = false
			yyq1879[0] = x.HostNetwork != false
			yyq1879[1] = x.HostPID != false
			yyq1879[2] = x.HostIPC != false
			yyq1879[3] = x.SELinuxOptions != nil
			yyq1879[4] = x.RunAsUser != nil
			yyq1879[5] = x.RunAsNonRoot != nil
			yyq1879[6] = len(x.SupplementalGroups) != 0
			yyq1879[7] = x.FSGroup != nil
			var yynn1879 int
			if yyr1879 || yy2arr1879 {
				r.EncodeArrayStart(8)
			} else {
				yynn1879 = 0
				for _, b := range yyq1879 {
					if b {
						yynn1879++
					}
				}
				r.EncodeMapStart(yynn1879)
				yynn1879 = 0
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[0] {
					yym1881 := z.EncBinary()
					_ = yym1881
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1879[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1882 := z.EncBinary()
					_ = yym1882
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[1] {
					yym1884 := z.EncBinary()
					_ = yym1884
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1879[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1885 := z.EncBinary()
					_ = yym1885
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[2] {
					yym1887 := z.EncBinary()
					_ = yym1887
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1879[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1888 := z.EncBinary()
					_ = yym1888
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1891 := *x.RunAsUser
						yym1892 := z.EncBinary()
						_ = yym1892
						if false {
						} else {
							r.EncodeInt(int64(yy1891))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1893 := *x.RunAsUser
						yym1894 := z.EncBinary()
						_ = yym1894
						if false {
						} else {
							r.EncodeInt(int64(yy1893))
						}
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1896 := *x.RunAsNonRoot
						yym1897 := z.EncBinary()
						_ = yym1897
						if false {
						} else {
							r.EncodeBool(bool(yy1896))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1898 := *x.RunAsNonRoot
						yym1899 := z.EncBinary()
						_ = yym1899
						if false {
						} else {
							r.EncodeBool(bool(yy1898))
						}
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1901 := z.EncBinary()
						_ = yym1901
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1902 := z.EncBinary()
						_ = yym1902
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1904 := *x.FSGroup
						yym1905 := z.EncBinary()
						_ = yym1905
						if false {
						} else {
							r.EncodeInt(int64(yy1904))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1906 := *x.FSGroup
						yym1907 := z.EncBinary()
						_ = yym1907
						if false {
						} else {
							r.EncodeInt(int64(yy1906))
						}
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1908 := z.DecBinary()
	_ = yym1908
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1909 := r.ContainerType()
		if yyct1909 == codecSelferValueTypeMap1234 {
			yyl1909 := r.ReadMapStart()
			if yyl1909 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1909, d)
			}
		} else if yyct1909 == codecSelferValueTypeArray1234 {
			yyl1909 := r.ReadArrayStart()
			if yyl1909 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1909, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1910Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1910Slc
	var yyhl1910 bool = l >= 0
	for yyj1910 := 0; ; yyj1910++ {
		if yyhl1910 {
			if yyj1910 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1910Slc = r.DecodeBytes(yys1910Slc, true, true)
		yys1910 := string(yys1910Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1910 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1916 := z.DecBinary()
				_ = yym1916
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1918 := z.DecBinary()
				_ = yym1918
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1919 := &x.SupplementalGroups
				yym1920 := z.DecBinary()
				_ = yym1920
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1919, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1922 := z.DecBinary()
				_ = yym1922
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1910)
		} // end switch yys1910
	} // end for yyj1910
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1923 int
	var yyb1923 bool
	var yyhl1923 bool = l >= 0
	yyj1923++
	if yyhl1923 {
		yyb1923 = yyj1923 > l
	} else {
		yyb1923 = r.CheckBreak()
	}
	if yyb1923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1923++
	if yyhl1923 {
		yyb1923 = yyj1923 > l
	} else {
		yyb1923 = r.CheckBreak()
	}
	if yyb1923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1923++
	if yyhl1923 {
		yyb1923 = yyj1923 > l
	} else {
		yyb1923 = r.CheckBreak()
	}
	if yyb1923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1923++
	if yyhl1923 {
		yyb1923 = yyj1923 > l
	} else {
		yyb1923 = r.CheckBreak()
	}
	if yyb1923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1923++
	if yyhl1923 {
		yyb1923 = yyj1923 > l
	} else {
		yyb1923 = r.CheckBreak()
	}
	if yyb1923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1929 := z.DecBinary()
		_ = yym1929
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1923++
	if yyhl1923 {
		yyb1923 = yyj1923 > l
	} else {
		yyb1923 = r.CheckBreak()
	}
	if yyb1923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1931 := z.DecBinary()
		_ = yym1931
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1923++
	if yyhl1923 {
		yyb1923 = yyj1923 > l
	} else {
		yyb1923 = r.CheckBreak()
	}
	if yyb1923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1932 := &x.SupplementalGroups
		yym1933 := z.DecBinary()
		_ = yym1933
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1932, false, d)
		}
	}
	yyj1923++
	if yyhl1923 {
		yyb1923 = yyj1923 > l
	} else {
		yyb1923 = r.CheckBreak()
	}
	if yyb1923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1935 := z.DecBinary()
		_ = yym1935
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1923++
		if yyhl1923 {
			yyb1923 = yyj1923 > l
		} else {
			yyb1923 = r.CheckBreak()
		}
		if yyb1923 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1923-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1936 := z.EncBinary()
		_ = yym1936
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1937 := !z.EncBinary()
			yy2arr1937 := z.EncBasicHandle().StructToArray
			var yyq1937 [8]bool
			_, _, _ = yysep1937, yyq1937, yy2arr1937
			const yyr1937 bool = false
			yyq1937[0] = x.Phase != ""
			yyq1937[1] = len(x.Conditions) != 0
			yyq1937[2] = x.Message != ""
			yyq1937[3] = x.Reason != ""
			yyq1937[4] = x.HostIP != ""
			yyq1937[5] = x.PodIP != ""
			yyq1937[6] = x.StartTime != nil
			yyq1937[7] = len(x.ContainerStatuses) != 0
			var yynn1937 int
			if yyr1937 || yy2arr1937 {
				r.EncodeArrayStart(8)
			} else {
				yynn1937 = 0
				for _, b := range yyq1937 {
					if b {
						yynn1937++
					}
				}
				r.EncodeMapStart(yynn1937)
				yynn1937 = 0
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1937[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1937[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1937[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1940 := z.EncBinary()
						_ = yym1940
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1937[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1941 := z.EncBinary()
						_ = yym1941
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1937[2] {
					yym1943 := z.EncBinary()
					_ = yym1943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1937[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1944 := z.EncBinary()
					_ = yym1944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1937[3] {
					yym1946 := z.EncBinary()
					_ = yym1946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1937[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1947 := z.EncBinary()
					_ = yym1947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1937[4] {
					yym1949 := z.EncBinary()
					_ = yym1949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1937[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1937[5] {
					yym1952 := z.EncBinary()
					_ = yym1952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1937[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1953 := z.EncBinary()
					_ = yym1953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1937[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1955 := z.EncBinary()
						_ = yym1955
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1955 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1955 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1937[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1956 := z.EncBinary()
						_ = yym1956
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1956 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1956 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1937[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1958 := z.EncBinary()
						_ = yym1958
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1937[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1959 := z.EncBinary()
						_ = yym1959
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1960 := z.DecBinary()
	_ = yym1960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1961 := r.ContainerType()
		if yyct1961 == codecSelferValueTypeMap1234 {
			yyl1961 := r.ReadMapStart()
			if yyl1961 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1961, d)
			}
		} else if yyct1961 == codecSelferValueTypeArray1234 {
			yyl1961 := r.ReadArrayStart()
			if yyl1961 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1962Slc
	var yyhl1962 bool = l >= 0
	for yyj1962 := 0; ; yyj1962++ {
		if yyhl1962 {
			if yyj1962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1962Slc = r.DecodeBytes(yys1962Slc, true, true)
		yys1962 := string(yys1962Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1962 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1964 := &x.Conditions
				yym1965 := z.DecBinary()
				_ = yym1965
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1964), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1971 := z.DecBinary()
				_ = yym1971
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1971 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1971 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1972 := &x.ContainerStatuses
				yym1973 := z.DecBinary()
				_ = yym1973
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1972), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1962)
		} // end switch yys1962
	} // end for yyj1962
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1974 int
	var yyb1974 bool
	var yyhl1974 bool = l >= 0
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1976 := &x.Conditions
		yym1977 := z.DecBinary()
		_ = yym1977
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1976), d)
		}
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1983 := z.DecBinary()
		_ = yym1983
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1983 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1983 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1984 := &x.ContainerStatuses
		yym1985 := z.DecBinary()
		_ = yym1985
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1984), d)
		}
	}
	for {
		yyj1974++
		if yyhl1974 {
			yyb1974 = yyj1974 > l
		} else {
			yyb1974 = r.CheckBreak()
		}
		if yyb1974 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1974-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1986 := z.EncBinary()
		_ = yym1986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1987 := !z.EncBinary()
			yy2arr1987 := z.EncBasicHandle().StructToArray
			var yyq1987 [4]bool
			_, _, _ = yysep1987, yyq1987, yy2arr1987
			const yyr1987 bool = false
			yyq1987[0] = true
			yyq1987[1] = true
			yyq1987[2] = x.Kind != ""
			yyq1987[3] = x.APIVersion != ""
			var yynn1987 int
			if yyr1987 || yy2arr1987 {
				r.EncodeArrayStart(4)
			} else {
				yynn1987 = 0
				for _, b := range yyq1987 {
					if b {
						yynn1987++
					}
				}
				r.EncodeMapStart(yynn1987)
				yynn1987 = 0
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[0] {
					yy1989 := &x.ObjectMeta
					yy1989.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1987[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1990 := &x.ObjectMeta
					yy1990.CodecEncodeSelf(e)
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[1] {
					yy1992 := &x.Status
					yy1992.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1987[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1993 := &x.Status
					yy1993.CodecEncodeSelf(e)
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[2] {
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1987[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1996 := z.EncBinary()
					_ = yym1996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[3] {
					yym1998 := z.EncBinary()
					_ = yym1998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1987[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1999 := z.EncBinary()
					_ = yym1999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2000 := z.DecBinary()
	_ = yym2000
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2001 := r.ContainerType()
		if yyct2001 == codecSelferValueTypeMap1234 {
			yyl2001 := r.ReadMapStart()
			if yyl2001 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2001, d)
			}
		} else if yyct2001 == codecSelferValueTypeArray1234 {
			yyl2001 := r.ReadArrayStart()
			if yyl2001 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2001, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2002Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2002Slc
	var yyhl2002 bool = l >= 0
	for yyj2002 := 0; ; yyj2002++ {
		if yyhl2002 {
			if yyj2002 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2002Slc = r.DecodeBytes(yys2002Slc, true, true)
		yys2002 := string(yys2002Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2002 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2003 := &x.ObjectMeta
				yyv2003.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2004 := &x.Status
				yyv2004.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2002)
		} // end switch yys2002
	} // end for yyj2002
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2007 int
	var yyb2007 bool
	var yyhl2007 bool = l >= 0
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2008 := &x.ObjectMeta
		yyv2008.CodecDecodeSelf(d)
	}
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2009 := &x.Status
		yyv2009.CodecDecodeSelf(d)
	}
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2007++
		if yyhl2007 {
			yyb2007 = yyj2007 > l
		} else {
			yyb2007 = r.CheckBreak()
		}
		if yyb2007 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2007-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2012 := z.EncBinary()
		_ = yym2012
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2013 := !z.EncBinary()
			yy2arr2013 := z.EncBasicHandle().StructToArray
			var yyq2013 [5]bool
			_, _, _ = yysep2013, yyq2013, yy2arr2013
			const yyr2013 bool = false
			yyq2013[0] = true
			yyq2013[1] = true
			yyq2013[2] = true
			yyq2013[3] = x.Kind != ""
			yyq2013[4] = x.APIVersion != ""
			var yynn2013 int
			if yyr2013 || yy2arr2013 {
				r.EncodeArrayStart(5)
			} else {
				yynn2013 = 0
				for _, b := range yyq2013 {
					if b {
						yynn2013++
					}
				}
				r.EncodeMapStart(yynn2013)
				yynn2013 = 0
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2013[0] {
					yy2015 := &x.ObjectMeta
					yy2015.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2013[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2016 := &x.ObjectMeta
					yy2016.CodecEncodeSelf(e)
				}
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2013[1] {
					yy2018 := &x.Spec
					yy2018.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2013[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2019 := &x.Spec
					yy2019.CodecEncodeSelf(e)
				}
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2013[2] {
					yy2021 := &x.Status
					yy2021.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2013[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2022 := &x.Status
					yy2022.CodecEncodeSelf(e)
				}
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2013[3] {
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2013[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2013[4] {
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2013[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2029 := z.DecBinary()
	_ = yym2029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2030 := r.ContainerType()
		if yyct2030 == codecSelferValueTypeMap1234 {
			yyl2030 := r.ReadMapStart()
			if yyl2030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2030, d)
			}
		} else if yyct2030 == codecSelferValueTypeArray1234 {
			yyl2030 := r.ReadArrayStart()
			if yyl2030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2031Slc
	var yyhl2031 bool = l >= 0
	for yyj2031 := 0; ; yyj2031++ {
		if yyhl2031 {
			if yyj2031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2031Slc = r.DecodeBytes(yys2031Slc, true, true)
		yys2031 := string(yys2031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2031 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2032 := &x.ObjectMeta
				yyv2032.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2033 := &x.Spec
				yyv2033.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2034 := &x.Status
				yyv2034.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2031)
		} // end switch yys2031
	} // end for yyj2031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2037 int
	var yyb2037 bool
	var yyhl2037 bool = l >= 0
	yyj2037++
	if yyhl2037 {
		yyb2037 = yyj2037 > l
	} else {
		yyb2037 = r.CheckBreak()
	}
	if yyb2037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2038 := &x.ObjectMeta
		yyv2038.CodecDecodeSelf(d)
	}
	yyj2037++
	if yyhl2037 {
		yyb2037 = yyj2037 > l
	} else {
		yyb2037 = r.CheckBreak()
	}
	if yyb2037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2039 := &x.Spec
		yyv2039.CodecDecodeSelf(d)
	}
	yyj2037++
	if yyhl2037 {
		yyb2037 = yyj2037 > l
	} else {
		yyb2037 = r.CheckBreak()
	}
	if yyb2037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2040 := &x.Status
		yyv2040.CodecDecodeSelf(d)
	}
	yyj2037++
	if yyhl2037 {
		yyb2037 = yyj2037 > l
	} else {
		yyb2037 = r.CheckBreak()
	}
	if yyb2037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2037++
	if yyhl2037 {
		yyb2037 = yyj2037 > l
	} else {
		yyb2037 = r.CheckBreak()
	}
	if yyb2037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2037++
		if yyhl2037 {
			yyb2037 = yyj2037 > l
		} else {
			yyb2037 = r.CheckBreak()
		}
		if yyb2037 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2037-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2043 := z.EncBinary()
		_ = yym2043
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2044 := !z.EncBinary()
			yy2arr2044 := z.EncBasicHandle().StructToArray
			var yyq2044 [2]bool
			_, _, _ = yysep2044, yyq2044, yy2arr2044
			const yyr2044 bool = false
			yyq2044[0] = true
			yyq2044[1] = true
			var yynn2044 int
			if yyr2044 || yy2arr2044 {
				r.EncodeArrayStart(2)
			} else {
				yynn2044 = 0
				for _, b := range yyq2044 {
					if b {
						yynn2044++
					}
				}
				r.EncodeMapStart(yynn2044)
				yynn2044 = 0
			}
			if yyr2044 || yy2arr2044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2044[0] {
					yy2046 := &x.ObjectMeta
					yy2046.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2044[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2047 := &x.ObjectMeta
					yy2047.CodecEncodeSelf(e)
				}
			}
			if yyr2044 || yy2arr2044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2044[1] {
					yy2049 := &x.Spec
					yy2049.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2044[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2050 := &x.Spec
					yy2050.CodecEncodeSelf(e)
				}
			}
			if yyr2044 || yy2arr2044 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2051 := z.DecBinary()
	_ = yym2051
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2052 := r.ContainerType()
		if yyct2052 == codecSelferValueTypeMap1234 {
			yyl2052 := r.ReadMapStart()
			if yyl2052 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2052, d)
			}
		} else if yyct2052 == codecSelferValueTypeArray1234 {
			yyl2052 := r.ReadArrayStart()
			if yyl2052 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2052, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2053Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2053Slc
	var yyhl2053 bool = l >= 0
	for yyj2053 := 0; ; yyj2053++ {
		if yyhl2053 {
			if yyj2053 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2053Slc = r.DecodeBytes(yys2053Slc, true, true)
		yys2053 := string(yys2053Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2053 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2054 := &x.ObjectMeta
				yyv2054.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2055 := &x.Spec
				yyv2055.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2053)
		} // end switch yys2053
	} // end for yyj2053
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2056 int
	var yyb2056 bool
	var yyhl2056 bool = l >= 0
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2057 := &x.ObjectMeta
		yyv2057.CodecDecodeSelf(d)
	}
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2058 := &x.Spec
		yyv2058.CodecDecodeSelf(d)
	}
	for {
		yyj2056++
		if yyhl2056 {
			yyb2056 = yyj2056 > l
		} else {
			yyb2056 = r.CheckBreak()
		}
		if yyb2056 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2056-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2059 := z.EncBinary()
		_ = yym2059
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2060 := !z.EncBinary()
			yy2arr2060 := z.EncBasicHandle().StructToArray
			var yyq2060 [4]bool
			_, _, _ = yysep2060, yyq2060, yy2arr2060
			const yyr2060 bool = false
			yyq2060[0] = true
			yyq2060[1] = true
			yyq2060[2] = x.Kind != ""
			yyq2060[3] = x.APIVersion != ""
			var yynn2060 int
			if yyr2060 || yy2arr2060 {
				r.EncodeArrayStart(4)
			} else {
				yynn2060 = 0
				for _, b := range yyq2060 {
					if b {
						yynn2060++
					}
				}
				r.EncodeMapStart(yynn2060)
				yynn2060 = 0
			}
			if yyr2060 || yy2arr2060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2060[0] {
					yy2062 := &x.ObjectMeta
					yy2062.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2060[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2063 := &x.ObjectMeta
					yy2063.CodecEncodeSelf(e)
				}
			}
			if yyr2060 || yy2arr2060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2060[1] {
					yy2065 := &x.Template
					yy2065.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2060[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2066 := &x.Template
					yy2066.CodecEncodeSelf(e)
				}
			}
			if yyr2060 || yy2arr2060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2060[2] {
					yym2068 := z.EncBinary()
					_ = yym2068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2060[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2060 || yy2arr2060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2060[3] {
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2060[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2060 || yy2arr2060 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2073 := z.DecBinary()
	_ = yym2073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2074 := r.ContainerType()
		if yyct2074 == codecSelferValueTypeMap1234 {
			yyl2074 := r.ReadMapStart()
			if yyl2074 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2074, d)
			}
		} else if yyct2074 == codecSelferValueTypeArray1234 {
			yyl2074 := r.ReadArrayStart()
			if yyl2074 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2075Slc
	var yyhl2075 bool = l >= 0
	for yyj2075 := 0; ; yyj2075++ {
		if yyhl2075 {
			if yyj2075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2075Slc = r.DecodeBytes(yys2075Slc, true, true)
		yys2075 := string(yys2075Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2075 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2076 := &x.ObjectMeta
				yyv2076.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2077 := &x.Template
				yyv2077.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2075)
		} // end switch yys2075
	} // end for yyj2075
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2080 int
	var yyb2080 bool
	var yyhl2080 bool = l >= 0
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2081 := &x.ObjectMeta
		yyv2081.CodecDecodeSelf(d)
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2082 := &x.Template
		yyv2082.CodecDecodeSelf(d)
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2080++
		if yyhl2080 {
			yyb2080 = yyj2080 > l
		} else {
			yyb2080 = r.CheckBreak()
		}
		if yyb2080 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2080-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2085 := z.EncBinary()
		_ = yym2085
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2086 := !z.EncBinary()
			yy2arr2086 := z.EncBasicHandle().StructToArray
			var yyq2086 [4]bool
			_, _, _ = yysep2086, yyq2086, yy2arr2086
			const yyr2086 bool = false
			yyq2086[0] = true
			yyq2086[2] = x.Kind != ""
			yyq2086[3] = x.APIVersion != ""
			var yynn2086 int
			if yyr2086 || yy2arr2086 {
				r.EncodeArrayStart(4)
			} else {
				yynn2086 = 1
				for _, b := range yyq2086 {
					if b {
						yynn2086++
					}
				}
				r.EncodeMapStart(yynn2086)
				yynn2086 = 0
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2086[0] {
					yy2088 := &x.ListMeta
					yym2089 := z.EncBinary()
					_ = yym2089
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2088) {
					} else {
						z.EncFallback(yy2088)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2086[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2090 := &x.ListMeta
					yym2091 := z.EncBinary()
					_ = yym2091
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2090) {
					} else {
						z.EncFallback(yy2090)
					}
				}
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2093 := z.EncBinary()
					_ = yym2093
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2094 := z.EncBinary()
					_ = yym2094
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2086[2] {
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2086[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2097 := z.EncBinary()
					_ = yym2097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2086[3] {
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2086[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2100 := z.EncBinary()
					_ = yym2100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2101 := z.DecBinary()
	_ = yym2101
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2102 := r.ContainerType()
		if yyct2102 == codecSelferValueTypeMap1234 {
			yyl2102 := r.ReadMapStart()
			if yyl2102 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2102, d)
			}
		} else if yyct2102 == codecSelferValueTypeArray1234 {
			yyl2102 := r.ReadArrayStart()
			if yyl2102 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2102, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2103Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2103Slc
	var yyhl2103 bool = l >= 0
	for yyj2103 := 0; ; yyj2103++ {
		if yyhl2103 {
			if yyj2103 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2103Slc = r.DecodeBytes(yys2103Slc, true, true)
		yys2103 := string(yys2103Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2103 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2104 := &x.ListMeta
				yym2105 := z.DecBinary()
				_ = yym2105
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2104) {
				} else {
					z.DecFallback(yyv2104, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2106 := &x.Items
				yym2107 := z.DecBinary()
				_ = yym2107
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2106), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2103)
		} // end switch yys2103
	} // end for yyj2103
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2110 int
	var yyb2110 bool
	var yyhl2110 bool = l >= 0
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2111 := &x.ListMeta
		yym2112 := z.DecBinary()
		_ = yym2112
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2111) {
		} else {
			z.DecFallback(yyv2111, false)
		}
	}
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2113 := &x.Items
		yym2114 := z.DecBinary()
		_ = yym2114
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2113), d)
		}
	}
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2110++
		if yyhl2110 {
			yyb2110 = yyj2110 > l
		} else {
			yyb2110 = r.CheckBreak()
		}
		if yyb2110 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2110-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2117 := z.EncBinary()
		_ = yym2117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2118 := !z.EncBinary()
			yy2arr2118 := z.EncBasicHandle().StructToArray
			var yyq2118 [3]bool
			_, _, _ = yysep2118, yyq2118, yy2arr2118
			const yyr2118 bool = false
			yyq2118[2] = x.Template != nil
			var yynn2118 int
			if yyr2118 || yy2arr2118 {
				r.EncodeArrayStart(3)
			} else {
				yynn2118 = 2
				for _, b := range yyq2118 {
					if b {
						yynn2118++
					}
				}
				r.EncodeMapStart(yynn2118)
				yynn2118 = 0
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2120 := z.EncBinary()
				_ = yym2120
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2121 := z.EncBinary()
				_ = yym2121
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2123 := z.EncBinary()
					_ = yym2123
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2124 := z.EncBinary()
					_ = yym2124
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2118[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2118[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2126 := z.DecBinary()
	_ = yym2126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2127 := r.ContainerType()
		if yyct2127 == codecSelferValueTypeMap1234 {
			yyl2127 := r.ReadMapStart()
			if yyl2127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2127, d)
			}
		} else if yyct2127 == codecSelferValueTypeArray1234 {
			yyl2127 := r.ReadArrayStart()
			if yyl2127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2128Slc
	var yyhl2128 bool = l >= 0
	for yyj2128 := 0; ; yyj2128++ {
		if yyhl2128 {
			if yyj2128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2128Slc = r.DecodeBytes(yys2128Slc, true, true)
		yys2128 := string(yys2128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2128 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2130 := &x.Selector
				yym2131 := z.DecBinary()
				_ = yym2131
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2130, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2128)
		} // end switch yys2128
	} // end for yyj2128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2133 int
	var yyb2133 bool
	var yyhl2133 bool = l >= 0
	yyj2133++
	if yyhl2133 {
		yyb2133 = yyj2133 > l
	} else {
		yyb2133 = r.CheckBreak()
	}
	if yyb2133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2133++
	if yyhl2133 {
		yyb2133 = yyj2133 > l
	} else {
		yyb2133 = r.CheckBreak()
	}
	if yyb2133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2135 := &x.Selector
		yym2136 := z.DecBinary()
		_ = yym2136
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2135, false, d)
		}
	}
	yyj2133++
	if yyhl2133 {
		yyb2133 = yyj2133 > l
	} else {
		yyb2133 = r.CheckBreak()
	}
	if yyb2133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2133++
		if yyhl2133 {
			yyb2133 = yyj2133 > l
		} else {
			yyb2133 = r.CheckBreak()
		}
		if yyb2133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2138 := z.EncBinary()
		_ = yym2138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2139 := !z.EncBinary()
			yy2arr2139 := z.EncBasicHandle().StructToArray
			var yyq2139 [2]bool
			_, _, _ = yysep2139, yyq2139, yy2arr2139
			const yyr2139 bool = false
			yyq2139[1] = x.ObservedGeneration != 0
			var yynn2139 int
			if yyr2139 || yy2arr2139 {
				r.EncodeArrayStart(2)
			} else {
				yynn2139 = 1
				for _, b := range yyq2139 {
					if b {
						yynn2139++
					}
				}
				r.EncodeMapStart(yynn2139)
				yynn2139 = 0
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2141 := z.EncBinary()
				_ = yym2141
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2142 := z.EncBinary()
				_ = yym2142
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[1] {
					yym2144 := z.EncBinary()
					_ = yym2144
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2139[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2145 := z.EncBinary()
					_ = yym2145
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2146 := z.DecBinary()
	_ = yym2146
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2147 := r.ContainerType()
		if yyct2147 == codecSelferValueTypeMap1234 {
			yyl2147 := r.ReadMapStart()
			if yyl2147 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2147, d)
			}
		} else if yyct2147 == codecSelferValueTypeArray1234 {
			yyl2147 := r.ReadArrayStart()
			if yyl2147 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2147, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2148Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2148Slc
	var yyhl2148 bool = l >= 0
	for yyj2148 := 0; ; yyj2148++ {
		if yyhl2148 {
			if yyj2148 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2148Slc = r.DecodeBytes(yys2148Slc, true, true)
		yys2148 := string(yys2148Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2148 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2148)
		} // end switch yys2148
	} // end for yyj2148
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2151 int
	var yyb2151 bool
	var yyhl2151 bool = l >= 0
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2151++
	if yyhl2151 {
		yyb2151 = yyj2151 > l
	} else {
		yyb2151 = r.CheckBreak()
	}
	if yyb2151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2151++
		if yyhl2151 {
			yyb2151 = yyj2151 > l
		} else {
			yyb2151 = r.CheckBreak()
		}
		if yyb2151 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2151-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2154 := z.EncBinary()
		_ = yym2154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2155 := !z.EncBinary()
			yy2arr2155 := z.EncBasicHandle().StructToArray
			var yyq2155 [5]bool
			_, _, _ = yysep2155, yyq2155, yy2arr2155
			const yyr2155 bool = false
			yyq2155[0] = true
			yyq2155[1] = true
			yyq2155[2] = true
			yyq2155[3] = x.Kind != ""
			yyq2155[4] = x.APIVersion != ""
			var yynn2155 int
			if yyr2155 || yy2arr2155 {
				r.EncodeArrayStart(5)
			} else {
				yynn2155 = 0
				for _, b := range yyq2155 {
					if b {
						yynn2155++
					}
				}
				r.EncodeMapStart(yynn2155)
				yynn2155 = 0
			}
			if yyr2155 || yy2arr2155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2155[0] {
					yy2157 := &x.ObjectMeta
					yy2157.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2155[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2158 := &x.ObjectMeta
					yy2158.CodecEncodeSelf(e)
				}
			}
			if yyr2155 || yy2arr2155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2155[1] {
					yy2160 := &x.Spec
					yy2160.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2155[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2161 := &x.Spec
					yy2161.CodecEncodeSelf(e)
				}
			}
			if yyr2155 || yy2arr2155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2155[2] {
					yy2163 := &x.Status
					yy2163.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2155[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2164 := &x.Status
					yy2164.CodecEncodeSelf(e)
				}
			}
			if yyr2155 || yy2arr2155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2155[3] {
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2155[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2167 := z.EncBinary()
					_ = yym2167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2155 || yy2arr2155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2155[4] {
					yym2169 := z.EncBinary()
					_ = yym2169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2155[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2170 := z.EncBinary()
					_ = yym2170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2155 || yy2arr2155 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2171 := z.DecBinary()
	_ = yym2171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2172 := r.ContainerType()
		if yyct2172 == codecSelferValueTypeMap1234 {
			yyl2172 := r.ReadMapStart()
			if yyl2172 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2172, d)
			}
		} else if yyct2172 == codecSelferValueTypeArray1234 {
			yyl2172 := r.ReadArrayStart()
			if yyl2172 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2173Slc
	var yyhl2173 bool = l >= 0
	for yyj2173 := 0; ; yyj2173++ {
		if yyhl2173 {
			if yyj2173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2173Slc = r.DecodeBytes(yys2173Slc, true, true)
		yys2173 := string(yys2173Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2173 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2174 := &x.ObjectMeta
				yyv2174.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2175 := &x.Spec
				yyv2175.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2176 := &x.Status
				yyv2176.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2173)
		} // end switch yys2173
	} // end for yyj2173
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2179 int
	var yyb2179 bool
	var yyhl2179 bool = l >= 0
	yyj2179++
	if yyhl2179 {
		yyb2179 = yyj2179 > l
	} else {
		yyb2179 = r.CheckBreak()
	}
	if yyb2179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2180 := &x.ObjectMeta
		yyv2180.CodecDecodeSelf(d)
	}
	yyj2179++
	if yyhl2179 {
		yyb2179 = yyj2179 > l
	} else {
		yyb2179 = r.CheckBreak()
	}
	if yyb2179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2181 := &x.Spec
		yyv2181.CodecDecodeSelf(d)
	}
	yyj2179++
	if yyhl2179 {
		yyb2179 = yyj2179 > l
	} else {
		yyb2179 = r.CheckBreak()
	}
	if yyb2179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2182 := &x.Status
		yyv2182.CodecDecodeSelf(d)
	}
	yyj2179++
	if yyhl2179 {
		yyb2179 = yyj2179 > l
	} else {
		yyb2179 = r.CheckBreak()
	}
	if yyb2179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2179++
	if yyhl2179 {
		yyb2179 = yyj2179 > l
	} else {
		yyb2179 = r.CheckBreak()
	}
	if yyb2179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2179++
		if yyhl2179 {
			yyb2179 = yyj2179 > l
		} else {
			yyb2179 = r.CheckBreak()
		}
		if yyb2179 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2179-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2185 := z.EncBinary()
		_ = yym2185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2186 := !z.EncBinary()
			yy2arr2186 := z.EncBasicHandle().StructToArray
			var yyq2186 [4]bool
			_, _, _ = yysep2186, yyq2186, yy2arr2186
			const yyr2186 bool = false
			yyq2186[0] = true
			yyq2186[2] = x.Kind != ""
			yyq2186[3] = x.APIVersion != ""
			var yynn2186 int
			if yyr2186 || yy2arr2186 {
				r.EncodeArrayStart(4)
			} else {
				yynn2186 = 1
				for _, b := range yyq2186 {
					if b {
						yynn2186++
					}
				}
				r.EncodeMapStart(yynn2186)
				yynn2186 = 0
			}
			if yyr2186 || yy2arr2186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2186[0] {
					yy2188 := &x.ListMeta
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2188) {
					} else {
						z.EncFallback(yy2188)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2186[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2190 := &x.ListMeta
					yym2191 := z.EncBinary()
					_ = yym2191
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2190) {
					} else {
						z.EncFallback(yy2190)
					}
				}
			}
			if yyr2186 || yy2arr2186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2193 := z.EncBinary()
					_ = yym2193
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2194 := z.EncBinary()
					_ = yym2194
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2186 || yy2arr2186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2186[2] {
					yym2196 := z.EncBinary()
					_ = yym2196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2186[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2197 := z.EncBinary()
					_ = yym2197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2186 || yy2arr2186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2186[3] {
					yym2199 := z.EncBinary()
					_ = yym2199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2186[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2200 := z.EncBinary()
					_ = yym2200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2186 || yy2arr2186 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2201 := z.DecBinary()
	_ = yym2201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2202 := r.ContainerType()
		if yyct2202 == codecSelferValueTypeMap1234 {
			yyl2202 := r.ReadMapStart()
			if yyl2202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2202, d)
			}
		} else if yyct2202 == codecSelferValueTypeArray1234 {
			yyl2202 := r.ReadArrayStart()
			if yyl2202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2203Slc
	var yyhl2203 bool = l >= 0
	for yyj2203 := 0; ; yyj2203++ {
		if yyhl2203 {
			if yyj2203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2203Slc = r.DecodeBytes(yys2203Slc, true, true)
		yys2203 := string(yys2203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2203 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2204 := &x.ListMeta
				yym2205 := z.DecBinary()
				_ = yym2205
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2204) {
				} else {
					z.DecFallback(yyv2204, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2206 := &x.Items
				yym2207 := z.DecBinary()
				_ = yym2207
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2206), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2203)
		} // end switch yys2203
	} // end for yyj2203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2210 int
	var yyb2210 bool
	var yyhl2210 bool = l >= 0
	yyj2210++
	if yyhl2210 {
		yyb2210 = yyj2210 > l
	} else {
		yyb2210 = r.CheckBreak()
	}
	if yyb2210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2211 := &x.ListMeta
		yym2212 := z.DecBinary()
		_ = yym2212
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2211) {
		} else {
			z.DecFallback(yyv2211, false)
		}
	}
	yyj2210++
	if yyhl2210 {
		yyb2210 = yyj2210 > l
	} else {
		yyb2210 = r.CheckBreak()
	}
	if yyb2210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2213 := &x.Items
		yym2214 := z.DecBinary()
		_ = yym2214
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2213), d)
		}
	}
	yyj2210++
	if yyhl2210 {
		yyb2210 = yyj2210 > l
	} else {
		yyb2210 = r.CheckBreak()
	}
	if yyb2210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2210++
	if yyhl2210 {
		yyb2210 = yyj2210 > l
	} else {
		yyb2210 = r.CheckBreak()
	}
	if yyb2210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2210++
		if yyhl2210 {
			yyb2210 = yyj2210 > l
		} else {
			yyb2210 = r.CheckBreak()
		}
		if yyb2210 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2210-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2217 := z.EncBinary()
		_ = yym2217
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2218 := !z.EncBinary()
			yy2arr2218 := z.EncBasicHandle().StructToArray
			var yyq2218 [4]bool
			_, _, _ = yysep2218, yyq2218, yy2arr2218
			const yyr2218 bool = false
			yyq2218[0] = true
			yyq2218[2] = x.Kind != ""
			yyq2218[3] = x.APIVersion != ""
			var yynn2218 int
			if yyr2218 || yy2arr2218 {
				r.EncodeArrayStart(4)
			} else {
				yynn2218 = 1
				for _, b := range yyq2218 {
					if b {
						yynn2218++
					}
				}
				r.EncodeMapStart(yynn2218)
				yynn2218 = 0
			}
			if yyr2218 || yy2arr2218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2218[0] {
					yy2220 := &x.ListMeta
					yym2221 := z.EncBinary()
					_ = yym2221
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2220) {
					} else {
						z.EncFallback(yy2220)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2218[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2222 := &x.ListMeta
					yym2223 := z.EncBinary()
					_ = yym2223
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2222) {
					} else {
						z.EncFallback(yy2222)
					}
				}
			}
			if yyr2218 || yy2arr2218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2225 := z.EncBinary()
					_ = yym2225
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2226 := z.EncBinary()
					_ = yym2226
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2218 || yy2arr2218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2218[2] {
					yym2228 := z.EncBinary()
					_ = yym2228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2218[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2229 := z.EncBinary()
					_ = yym2229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2218 || yy2arr2218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2218[3] {
					yym2231 := z.EncBinary()
					_ = yym2231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2218[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2232 := z.EncBinary()
					_ = yym2232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2218 || yy2arr2218 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2233 := z.DecBinary()
	_ = yym2233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2234 := r.ContainerType()
		if yyct2234 == codecSelferValueTypeMap1234 {
			yyl2234 := r.ReadMapStart()
			if yyl2234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2234, d)
			}
		} else if yyct2234 == codecSelferValueTypeArray1234 {
			yyl2234 := r.ReadArrayStart()
			if yyl2234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2235Slc
	var yyhl2235 bool = l >= 0
	for yyj2235 := 0; ; yyj2235++ {
		if yyhl2235 {
			if yyj2235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2235Slc = r.DecodeBytes(yys2235Slc, true, true)
		yys2235 := string(yys2235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2235 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2236 := &x.ListMeta
				yym2237 := z.DecBinary()
				_ = yym2237
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2236) {
				} else {
					z.DecFallback(yyv2236, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2238 := &x.Items
				yym2239 := z.DecBinary()
				_ = yym2239
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2238), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2235)
		} // end switch yys2235
	} // end for yyj2235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2242 int
	var yyb2242 bool
	var yyhl2242 bool = l >= 0
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2243 := &x.ListMeta
		yym2244 := z.DecBinary()
		_ = yym2244
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2243) {
		} else {
			z.DecFallback(yyv2243, false)
		}
	}
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2245 := &x.Items
		yym2246 := z.DecBinary()
		_ = yym2246
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2245), d)
		}
	}
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2242++
		if yyhl2242 {
			yyb2242 = yyj2242 > l
		} else {
			yyb2242 = r.CheckBreak()
		}
		if yyb2242 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2242-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2249 := z.EncBinary()
	_ = yym2249
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2250 := z.DecBinary()
	_ = yym2250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2251 := z.EncBinary()
	_ = yym2251
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2252 := z.DecBinary()
	_ = yym2252
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2253 := z.EncBinary()
		_ = yym2253
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2254 := !z.EncBinary()
			yy2arr2254 := z.EncBasicHandle().StructToArray
			var yyq2254 [1]bool
			_, _, _ = yysep2254, yyq2254, yy2arr2254
			const yyr2254 bool = false
			yyq2254[0] = true
			var yynn2254 int
			if yyr2254 || yy2arr2254 {
				r.EncodeArrayStart(1)
			} else {
				yynn2254 = 0
				for _, b := range yyq2254 {
					if b {
						yynn2254++
					}
				}
				r.EncodeMapStart(yynn2254)
				yynn2254 = 0
			}
			if yyr2254 || yy2arr2254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2254[0] {
					yy2256 := &x.LoadBalancer
					yy2256.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2254[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2257 := &x.LoadBalancer
					yy2257.CodecEncodeSelf(e)
				}
			}
			if yyr2254 || yy2arr2254 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2258 := z.DecBinary()
	_ = yym2258
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2259 := r.ContainerType()
		if yyct2259 == codecSelferValueTypeMap1234 {
			yyl2259 := r.ReadMapStart()
			if yyl2259 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2259, d)
			}
		} else if yyct2259 == codecSelferValueTypeArray1234 {
			yyl2259 := r.ReadArrayStart()
			if yyl2259 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2259, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2260Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2260Slc
	var yyhl2260 bool = l >= 0
	for yyj2260 := 0; ; yyj2260++ {
		if yyhl2260 {
			if yyj2260 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2260Slc = r.DecodeBytes(yys2260Slc, true, true)
		yys2260 := string(yys2260Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2260 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2261 := &x.LoadBalancer
				yyv2261.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2260)
		} // end switch yys2260
	} // end for yyj2260
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2262 int
	var yyb2262 bool
	var yyhl2262 bool = l >= 0
	yyj2262++
	if yyhl2262 {
		yyb2262 = yyj2262 > l
	} else {
		yyb2262 = r.CheckBreak()
	}
	if yyb2262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2263 := &x.LoadBalancer
		yyv2263.CodecDecodeSelf(d)
	}
	for {
		yyj2262++
		if yyhl2262 {
			yyb2262 = yyj2262 > l
		} else {
			yyb2262 = r.CheckBreak()
		}
		if yyb2262 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2262-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2264 := z.EncBinary()
		_ = yym2264
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2265 := !z.EncBinary()
			yy2arr2265 := z.EncBasicHandle().StructToArray
			var yyq2265 [1]bool
			_, _, _ = yysep2265, yyq2265, yy2arr2265
			const yyr2265 bool = false
			yyq2265[0] = len(x.Ingress) != 0
			var yynn2265 int
			if yyr2265 || yy2arr2265 {
				r.EncodeArrayStart(1)
			} else {
				yynn2265 = 0
				for _, b := range yyq2265 {
					if b {
						yynn2265++
					}
				}
				r.EncodeMapStart(yynn2265)
				yynn2265 = 0
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2265[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2267 := z.EncBinary()
						_ = yym2267
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2265[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2268 := z.EncBinary()
						_ = yym2268
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2269 := z.DecBinary()
	_ = yym2269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2270 := r.ContainerType()
		if yyct2270 == codecSelferValueTypeMap1234 {
			yyl2270 := r.ReadMapStart()
			if yyl2270 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2270, d)
			}
		} else if yyct2270 == codecSelferValueTypeArray1234 {
			yyl2270 := r.ReadArrayStart()
			if yyl2270 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2270, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2271Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2271Slc
	var yyhl2271 bool = l >= 0
	for yyj2271 := 0; ; yyj2271++ {
		if yyhl2271 {
			if yyj2271 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2271Slc = r.DecodeBytes(yys2271Slc, true, true)
		yys2271 := string(yys2271Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2271 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2272 := &x.Ingress
				yym2273 := z.DecBinary()
				_ = yym2273
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2272), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2271)
		} // end switch yys2271
	} // end for yyj2271
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2274 int
	var yyb2274 bool
	var yyhl2274 bool = l >= 0
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2275 := &x.Ingress
		yym2276 := z.DecBinary()
		_ = yym2276
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2275), d)
		}
	}
	for {
		yyj2274++
		if yyhl2274 {
			yyb2274 = yyj2274 > l
		} else {
			yyb2274 = r.CheckBreak()
		}
		if yyb2274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2277 := z.EncBinary()
		_ = yym2277
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2278 := !z.EncBinary()
			yy2arr2278 := z.EncBasicHandle().StructToArray
			var yyq2278 [2]bool
			_, _, _ = yysep2278, yyq2278, yy2arr2278
			const yyr2278 bool = false
			yyq2278[0] = x.IP != ""
			yyq2278[1] = x.Hostname != ""
			var yynn2278 int
			if yyr2278 || yy2arr2278 {
				r.EncodeArrayStart(2)
			} else {
				yynn2278 = 0
				for _, b := range yyq2278 {
					if b {
						yynn2278++
					}
				}
				r.EncodeMapStart(yynn2278)
				yynn2278 = 0
			}
			if yyr2278 || yy2arr2278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2278[0] {
					yym2280 := z.EncBinary()
					_ = yym2280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2278[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2281 := z.EncBinary()
					_ = yym2281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2278 || yy2arr2278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2278[1] {
					yym2283 := z.EncBinary()
					_ = yym2283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2278[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2278 || yy2arr2278 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2285 := z.DecBinary()
	_ = yym2285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2286 := r.ContainerType()
		if yyct2286 == codecSelferValueTypeMap1234 {
			yyl2286 := r.ReadMapStart()
			if yyl2286 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2286, d)
			}
		} else if yyct2286 == codecSelferValueTypeArray1234 {
			yyl2286 := r.ReadArrayStart()
			if yyl2286 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2286, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2287Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2287Slc
	var yyhl2287 bool = l >= 0
	for yyj2287 := 0; ; yyj2287++ {
		if yyhl2287 {
			if yyj2287 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2287Slc = r.DecodeBytes(yys2287Slc, true, true)
		yys2287 := string(yys2287Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2287 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2287)
		} // end switch yys2287
	} // end for yyj2287
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2290 int
	var yyb2290 bool
	var yyhl2290 bool = l >= 0
	yyj2290++
	if yyhl2290 {
		yyb2290 = yyj2290 > l
	} else {
		yyb2290 = r.CheckBreak()
	}
	if yyb2290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2290++
	if yyhl2290 {
		yyb2290 = yyj2290 > l
	} else {
		yyb2290 = r.CheckBreak()
	}
	if yyb2290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2290++
		if yyhl2290 {
			yyb2290 = yyj2290 > l
		} else {
			yyb2290 = r.CheckBreak()
		}
		if yyb2290 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2290-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2293 := z.EncBinary()
		_ = yym2293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2294 := !z.EncBinary()
			yy2arr2294 := z.EncBasicHandle().StructToArray
			var yyq2294 [7]bool
			_, _, _ = yysep2294, yyq2294, yy2arr2294
			const yyr2294 bool = false
			yyq2294[0] = x.Type != ""
			yyq2294[3] = x.ClusterIP != ""
			yyq2294[4] = len(x.ExternalIPs) != 0
			yyq2294[5] = x.LoadBalancerIP != ""
			yyq2294[6] = x.SessionAffinity != ""
			var yynn2294 int
			if yyr2294 || yy2arr2294 {
				r.EncodeArrayStart(7)
			} else {
				yynn2294 = 2
				for _, b := range yyq2294 {
					if b {
						yynn2294++
					}
				}
				r.EncodeMapStart(yynn2294)
				yynn2294 = 0
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2297 := z.EncBinary()
					_ = yym2297
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2298 := z.EncBinary()
					_ = yym2298
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2300 := z.EncBinary()
					_ = yym2300
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2301 := z.EncBinary()
					_ = yym2301
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[3] {
					yym2303 := z.EncBinary()
					_ = yym2303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2294[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2304 := z.EncBinary()
					_ = yym2304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2306 := z.EncBinary()
						_ = yym2306
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2294[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2307 := z.EncBinary()
						_ = yym2307
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[5] {
					yym2309 := z.EncBinary()
					_ = yym2309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2294[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2310 := z.EncBinary()
					_ = yym2310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2294[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2312 := z.DecBinary()
	_ = yym2312
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2313 := r.ContainerType()
		if yyct2313 == codecSelferValueTypeMap1234 {
			yyl2313 := r.ReadMapStart()
			if yyl2313 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2313, d)
			}
		} else if yyct2313 == codecSelferValueTypeArray1234 {
			yyl2313 := r.ReadArrayStart()
			if yyl2313 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2313, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2314Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2314Slc
	var yyhl2314 bool = l >= 0
	for yyj2314 := 0; ; yyj2314++ {
		if yyhl2314 {
			if yyj2314 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2314Slc = r.DecodeBytes(yys2314Slc, true, true)
		yys2314 := string(yys2314Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2314 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2316 := &x.Ports
				yym2317 := z.DecBinary()
				_ = yym2317
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2316), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2318 := &x.Selector
				yym2319 := z.DecBinary()
				_ = yym2319
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2318, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2321 := &x.ExternalIPs
				yym2322 := z.DecBinary()
				_ = yym2322
				if false {
				} else {
					z.F.DecSliceStringX(yyv2321, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2314)
		} // end switch yys2314
	} // end for yyj2314
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2325 int
	var yyb2325 bool
	var yyhl2325 bool = l >= 0
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2327 := &x.Ports
		yym2328 := z.DecBinary()
		_ = yym2328
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2327), d)
		}
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2329 := &x.Selector
		yym2330 := z.DecBinary()
		_ = yym2330
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2329, false, d)
		}
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2332 := &x.ExternalIPs
		yym2333 := z.DecBinary()
		_ = yym2333
		if false {
		} else {
			z.F.DecSliceStringX(yyv2332, false, d)
		}
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj2325++
		if yyhl2325 {
			yyb2325 = yyj2325 > l
		} else {
			yyb2325 = r.CheckBreak()
		}
		if yyb2325 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2325-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2336 := z.EncBinary()
		_ = yym2336
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2337 := !z.EncBinary()
			yy2arr2337 := z.EncBasicHandle().StructToArray
			var yyq2337 [5]bool
			_, _, _ = yysep2337, yyq2337, yy2arr2337
			const yyr2337 bool = false
			var yynn2337 int
			if yyr2337 || yy2arr2337 {
				r.EncodeArrayStart(5)
			} else {
				yynn2337 = 5
				for _, b := range yyq2337 {
					if b {
						yynn2337++
					}
				}
				r.EncodeMapStart(yynn2337)
				yynn2337 = 0
			}
			if yyr2337 || yy2arr2337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2339 := z.EncBinary()
				_ = yym2339
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2340 := z.EncBinary()
				_ = yym2340
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2337 || yy2arr2337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2337 || yy2arr2337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2343 := z.EncBinary()
				_ = yym2343
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2344 := z.EncBinary()
				_ = yym2344
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2337 || yy2arr2337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2346 := &x.TargetPort
				yym2347 := z.EncBinary()
				_ = yym2347
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2346) {
				} else if !yym2347 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2346)
				} else {
					z.EncFallback(yy2346)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2348 := &x.TargetPort
				yym2349 := z.EncBinary()
				_ = yym2349
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2348) {
				} else if !yym2349 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2348)
				} else {
					z.EncFallback(yy2348)
				}
			}
			if yyr2337 || yy2arr2337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2351 := z.EncBinary()
				_ = yym2351
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2352 := z.EncBinary()
				_ = yym2352
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2337 || yy2arr2337 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2353 := z.DecBinary()
	_ = yym2353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2354 := r.ContainerType()
		if yyct2354 == codecSelferValueTypeMap1234 {
			yyl2354 := r.ReadMapStart()
			if yyl2354 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2354, d)
			}
		} else if yyct2354 == codecSelferValueTypeArray1234 {
			yyl2354 := r.ReadArrayStart()
			if yyl2354 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2354, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2355Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2355Slc
	var yyhl2355 bool = l >= 0
	for yyj2355 := 0; ; yyj2355++ {
		if yyhl2355 {
			if yyj2355 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2355Slc = r.DecodeBytes(yys2355Slc, true, true)
		yys2355 := string(yys2355Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2355 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv2359 := &x.TargetPort
				yym2360 := z.DecBinary()
				_ = yym2360
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2359) {
				} else if !yym2360 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2359)
				} else {
					z.DecFallback(yyv2359, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2355)
		} // end switch yys2355
	} // end for yyj2355
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2362 int
	var yyb2362 bool
	var yyhl2362 bool = l >= 0
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv2366 := &x.TargetPort
		yym2367 := z.DecBinary()
		_ = yym2367
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2366) {
		} else if !yym2367 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2366)
		} else {
			z.DecFallback(yyv2366, false)
		}
	}
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2362++
		if yyhl2362 {
			yyb2362 = yyj2362 > l
		} else {
			yyb2362 = r.CheckBreak()
		}
		if yyb2362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2369 := z.EncBinary()
		_ = yym2369
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2370 := !z.EncBinary()
			yy2arr2370 := z.EncBasicHandle().StructToArray
			var yyq2370 [5]bool
			_, _, _ = yysep2370, yyq2370, yy2arr2370
			const yyr2370 bool = false
			yyq2370[0] = true
			yyq2370[1] = true
			yyq2370[2] = true
			yyq2370[3] = x.Kind != ""
			yyq2370[4] = x.APIVersion != ""
			var yynn2370 int
			if yyr2370 || yy2arr2370 {
				r.EncodeArrayStart(5)
			} else {
				yynn2370 = 0
				for _, b := range yyq2370 {
					if b {
						yynn2370++
					}
				}
				r.EncodeMapStart(yynn2370)
				yynn2370 = 0
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[0] {
					yy2372 := &x.ObjectMeta
					yy2372.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2370[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2373 := &x.ObjectMeta
					yy2373.CodecEncodeSelf(e)
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[1] {
					yy2375 := &x.Spec
					yy2375.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2370[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2376 := &x.Spec
					yy2376.CodecEncodeSelf(e)
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[2] {
					yy2378 := &x.Status
					yy2378.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2370[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2379 := &x.Status
					yy2379.CodecEncodeSelf(e)
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[3] {
					yym2381 := z.EncBinary()
					_ = yym2381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2370[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2382 := z.EncBinary()
					_ = yym2382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[4] {
					yym2384 := z.EncBinary()
					_ = yym2384
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2370[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2385 := z.EncBinary()
					_ = yym2385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2386 := z.DecBinary()
	_ = yym2386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2387 := r.ContainerType()
		if yyct2387 == codecSelferValueTypeMap1234 {
			yyl2387 := r.ReadMapStart()
			if yyl2387 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2387, d)
			}
		} else if yyct2387 == codecSelferValueTypeArray1234 {
			yyl2387 := r.ReadArrayStart()
			if yyl2387 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2387, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2388Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2388Slc
	var yyhl2388 bool = l >= 0
	for yyj2388 := 0; ; yyj2388++ {
		if yyhl2388 {
			if yyj2388 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2388Slc = r.DecodeBytes(yys2388Slc, true, true)
		yys2388 := string(yys2388Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2388 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2389 := &x.ObjectMeta
				yyv2389.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2390 := &x.Spec
				yyv2390.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2391 := &x.Status
				yyv2391.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2388)
		} // end switch yys2388
	} // end for yyj2388
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2394 int
	var yyb2394 bool
	var yyhl2394 bool = l >= 0
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2395 := &x.ObjectMeta
		yyv2395.CodecDecodeSelf(d)
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2396 := &x.Spec
		yyv2396.CodecDecodeSelf(d)
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2397 := &x.Status
		yyv2397.CodecDecodeSelf(d)
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2394++
		if yyhl2394 {
			yyb2394 = yyj2394 > l
		} else {
			yyb2394 = r.CheckBreak()
		}
		if yyb2394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2400 := z.EncBinary()
		_ = yym2400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2401 := !z.EncBinary()
			yy2arr2401 := z.EncBasicHandle().StructToArray
			var yyq2401 [5]bool
			_, _, _ = yysep2401, yyq2401, yy2arr2401
			const yyr2401 bool = false
			yyq2401[0] = true
			yyq2401[2] = len(x.ImagePullSecrets) != 0
			yyq2401[3] = x.Kind != ""
			yyq2401[4] = x.APIVersion != ""
			var yynn2401 int
			if yyr2401 || yy2arr2401 {
				r.EncodeArrayStart(5)
			} else {
				yynn2401 = 1
				for _, b := range yyq2401 {
					if b {
						yynn2401++
					}
				}
				r.EncodeMapStart(yynn2401)
				yynn2401 = 0
			}
			if yyr2401 || yy2arr2401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2401[0] {
					yy2403 := &x.ObjectMeta
					yy2403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2401[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2404 := &x.ObjectMeta
					yy2404.CodecEncodeSelf(e)
				}
			}
			if yyr2401 || yy2arr2401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2406 := z.EncBinary()
					_ = yym2406
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2407 := z.EncBinary()
					_ = yym2407
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2401 || yy2arr2401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2401[2] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2409 := z.EncBinary()
						_ = yym2409
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2401[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2410 := z.EncBinary()
						_ = yym2410
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2401 || yy2arr2401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2401[3] {
					yym2412 := z.EncBinary()
					_ = yym2412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2401[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2413 := z.EncBinary()
					_ = yym2413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2401 || yy2arr2401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2401[4] {
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2401[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2416 := z.EncBinary()
					_ = yym2416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2401 || yy2arr2401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2417 := z.DecBinary()
	_ = yym2417
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2418 := r.ContainerType()
		if yyct2418 == codecSelferValueTypeMap1234 {
			yyl2418 := r.ReadMapStart()
			if yyl2418 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2418, d)
			}
		} else if yyct2418 == codecSelferValueTypeArray1234 {
			yyl2418 := r.ReadArrayStart()
			if yyl2418 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2418, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2419Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2419Slc
	var yyhl2419 bool = l >= 0
	for yyj2419 := 0; ; yyj2419++ {
		if yyhl2419 {
			if yyj2419 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2419Slc = r.DecodeBytes(yys2419Slc, true, true)
		yys2419 := string(yys2419Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2419 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2420 := &x.ObjectMeta
				yyv2420.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2421 := &x.Secrets
				yym2422 := z.DecBinary()
				_ = yym2422
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2421), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2423 := &x.ImagePullSecrets
				yym2424 := z.DecBinary()
				_ = yym2424
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2423), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2419)
		} // end switch yys2419
	} // end for yyj2419
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2427 int
	var yyb2427 bool
	var yyhl2427 bool = l >= 0
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2428 := &x.ObjectMeta
		yyv2428.CodecDecodeSelf(d)
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2429 := &x.Secrets
		yym2430 := z.DecBinary()
		_ = yym2430
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2429), d)
		}
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2431 := &x.ImagePullSecrets
		yym2432 := z.DecBinary()
		_ = yym2432
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2431), d)
		}
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2427++
		if yyhl2427 {
			yyb2427 = yyj2427 > l
		} else {
			yyb2427 = r.CheckBreak()
		}
		if yyb2427 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2427-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2435 := z.EncBinary()
		_ = yym2435
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2436 := !z.EncBinary()
			yy2arr2436 := z.EncBasicHandle().StructToArray
			var yyq2436 [4]bool
			_, _, _ = yysep2436, yyq2436, yy2arr2436
			const yyr2436 bool = false
			yyq2436[0] = true
			yyq2436[2] = x.Kind != ""
			yyq2436[3] = x.APIVersion != ""
			var yynn2436 int
			if yyr2436 || yy2arr2436 {
				r.EncodeArrayStart(4)
			} else {
				yynn2436 = 1
				for _, b := range yyq2436 {
					if b {
						yynn2436++
					}
				}
				r.EncodeMapStart(yynn2436)
				yynn2436 = 0
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2436[0] {
					yy2438 := &x.ListMeta
					yym2439 := z.EncBinary()
					_ = yym2439
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2438) {
					} else {
						z.EncFallback(yy2438)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2436[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2440 := &x.ListMeta
					yym2441 := z.EncBinary()
					_ = yym2441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2440) {
					} else {
						z.EncFallback(yy2440)
					}
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2443 := z.EncBinary()
					_ = yym2443
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2444 := z.EncBinary()
					_ = yym2444
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2436[2] {
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2436[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2447 := z.EncBinary()
					_ = yym2447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2436[3] {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2436[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2451 := z.DecBinary()
	_ = yym2451
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2452 := r.ContainerType()
		if yyct2452 == codecSelferValueTypeMap1234 {
			yyl2452 := r.ReadMapStart()
			if yyl2452 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2452, d)
			}
		} else if yyct2452 == codecSelferValueTypeArray1234 {
			yyl2452 := r.ReadArrayStart()
			if yyl2452 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2452, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2453Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2453Slc
	var yyhl2453 bool = l >= 0
	for yyj2453 := 0; ; yyj2453++ {
		if yyhl2453 {
			if yyj2453 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2453Slc = r.DecodeBytes(yys2453Slc, true, true)
		yys2453 := string(yys2453Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2453 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2454 := &x.ListMeta
				yym2455 := z.DecBinary()
				_ = yym2455
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2454) {
				} else {
					z.DecFallback(yyv2454, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2456 := &x.Items
				yym2457 := z.DecBinary()
				_ = yym2457
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2456), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2453)
		} // end switch yys2453
	} // end for yyj2453
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2460 int
	var yyb2460 bool
	var yyhl2460 bool = l >= 0
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2461 := &x.ListMeta
		yym2462 := z.DecBinary()
		_ = yym2462
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2461) {
		} else {
			z.DecFallback(yyv2461, false)
		}
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2463 := &x.Items
		yym2464 := z.DecBinary()
		_ = yym2464
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2463), d)
		}
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2460++
		if yyhl2460 {
			yyb2460 = yyj2460 > l
		} else {
			yyb2460 = r.CheckBreak()
		}
		if yyb2460 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2460-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2467 := z.EncBinary()
		_ = yym2467
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2468 := !z.EncBinary()
			yy2arr2468 := z.EncBasicHandle().StructToArray
			var yyq2468 [4]bool
			_, _, _ = yysep2468, yyq2468, yy2arr2468
			const yyr2468 bool = false
			yyq2468[0] = true
			yyq2468[2] = x.Kind != ""
			yyq2468[3] = x.APIVersion != ""
			var yynn2468 int
			if yyr2468 || yy2arr2468 {
				r.EncodeArrayStart(4)
			} else {
				yynn2468 = 1
				for _, b := range yyq2468 {
					if b {
						yynn2468++
					}
				}
				r.EncodeMapStart(yynn2468)
				yynn2468 = 0
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2468[0] {
					yy2470 := &x.ObjectMeta
					yy2470.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2468[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2471 := &x.ObjectMeta
					yy2471.CodecEncodeSelf(e)
				}
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2473 := z.EncBinary()
					_ = yym2473
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2474 := z.EncBinary()
					_ = yym2474
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2468[2] {
					yym2476 := z.EncBinary()
					_ = yym2476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2468[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2477 := z.EncBinary()
					_ = yym2477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2468[3] {
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2468[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2480 := z.EncBinary()
					_ = yym2480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2468 || yy2arr2468 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2481 := z.DecBinary()
	_ = yym2481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2482 := r.ContainerType()
		if yyct2482 == codecSelferValueTypeMap1234 {
			yyl2482 := r.ReadMapStart()
			if yyl2482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2482, d)
			}
		} else if yyct2482 == codecSelferValueTypeArray1234 {
			yyl2482 := r.ReadArrayStart()
			if yyl2482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2483Slc
	var yyhl2483 bool = l >= 0
	for yyj2483 := 0; ; yyj2483++ {
		if yyhl2483 {
			if yyj2483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2483Slc = r.DecodeBytes(yys2483Slc, true, true)
		yys2483 := string(yys2483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2483 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2484 := &x.ObjectMeta
				yyv2484.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2485 := &x.Subsets
				yym2486 := z.DecBinary()
				_ = yym2486
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2485), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2483)
		} // end switch yys2483
	} // end for yyj2483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2489 int
	var yyb2489 bool
	var yyhl2489 bool = l >= 0
	yyj2489++
	if yyhl2489 {
		yyb2489 = yyj2489 > l
	} else {
		yyb2489 = r.CheckBreak()
	}
	if yyb2489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2490 := &x.ObjectMeta
		yyv2490.CodecDecodeSelf(d)
	}
	yyj2489++
	if yyhl2489 {
		yyb2489 = yyj2489 > l
	} else {
		yyb2489 = r.CheckBreak()
	}
	if yyb2489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2491 := &x.Subsets
		yym2492 := z.DecBinary()
		_ = yym2492
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2491), d)
		}
	}
	yyj2489++
	if yyhl2489 {
		yyb2489 = yyj2489 > l
	} else {
		yyb2489 = r.CheckBreak()
	}
	if yyb2489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2489++
	if yyhl2489 {
		yyb2489 = yyj2489 > l
	} else {
		yyb2489 = r.CheckBreak()
	}
	if yyb2489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2489++
		if yyhl2489 {
			yyb2489 = yyj2489 > l
		} else {
			yyb2489 = r.CheckBreak()
		}
		if yyb2489 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2489-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2495 := z.EncBinary()
		_ = yym2495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2496 := !z.EncBinary()
			yy2arr2496 := z.EncBasicHandle().StructToArray
			var yyq2496 [3]bool
			_, _, _ = yysep2496, yyq2496, yy2arr2496
			const yyr2496 bool = false
			var yynn2496 int
			if yyr2496 || yy2arr2496 {
				r.EncodeArrayStart(3)
			} else {
				yynn2496 = 3
				for _, b := range yyq2496 {
					if b {
						yynn2496++
					}
				}
				r.EncodeMapStart(yynn2496)
				yynn2496 = 0
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2498 := z.EncBinary()
					_ = yym2498
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2501 := z.EncBinary()
					_ = yym2501
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2504 := z.EncBinary()
					_ = yym2504
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2505 := z.EncBinary()
					_ = yym2505
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2506 := z.DecBinary()
	_ = yym2506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2507 := r.ContainerType()
		if yyct2507 == codecSelferValueTypeMap1234 {
			yyl2507 := r.ReadMapStart()
			if yyl2507 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2507, d)
			}
		} else if yyct2507 == codecSelferValueTypeArray1234 {
			yyl2507 := r.ReadArrayStart()
			if yyl2507 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2507, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2508Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2508Slc
	var yyhl2508 bool = l >= 0
	for yyj2508 := 0; ; yyj2508++ {
		if yyhl2508 {
			if yyj2508 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2508Slc = r.DecodeBytes(yys2508Slc, true, true)
		yys2508 := string(yys2508Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2508 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2509 := &x.Addresses
				yym2510 := z.DecBinary()
				_ = yym2510
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2509), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2511 := &x.NotReadyAddresses
				yym2512 := z.DecBinary()
				_ = yym2512
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2511), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2513 := &x.Ports
				yym2514 := z.DecBinary()
				_ = yym2514
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2513), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2508)
		} // end switch yys2508
	} // end for yyj2508
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2515 int
	var yyb2515 bool
	var yyhl2515 bool = l >= 0
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2516 := &x.Addresses
		yym2517 := z.DecBinary()
		_ = yym2517
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2516), d)
		}
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2518 := &x.NotReadyAddresses
		yym2519 := z.DecBinary()
		_ = yym2519
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2518), d)
		}
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2520 := &x.Ports
		yym2521 := z.DecBinary()
		_ = yym2521
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2520), d)
		}
	}
	for {
		yyj2515++
		if yyhl2515 {
			yyb2515 = yyj2515 > l
		} else {
			yyb2515 = r.CheckBreak()
		}
		if yyb2515 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2515-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2522 := z.EncBinary()
		_ = yym2522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2523 := !z.EncBinary()
			yy2arr2523 := z.EncBasicHandle().StructToArray
			var yyq2523 [2]bool
			_, _, _ = yysep2523, yyq2523, yy2arr2523
			const yyr2523 bool = false
			var yynn2523 int
			if yyr2523 || yy2arr2523 {
				r.EncodeArrayStart(2)
			} else {
				yynn2523 = 2
				for _, b := range yyq2523 {
					if b {
						yynn2523++
					}
				}
				r.EncodeMapStart(yynn2523)
				yynn2523 = 0
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2525 := z.EncBinary()
				_ = yym2525
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2526 := z.EncBinary()
				_ = yym2526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2528 := z.DecBinary()
	_ = yym2528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2529 := r.ContainerType()
		if yyct2529 == codecSelferValueTypeMap1234 {
			yyl2529 := r.ReadMapStart()
			if yyl2529 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2529, d)
			}
		} else if yyct2529 == codecSelferValueTypeArray1234 {
			yyl2529 := r.ReadArrayStart()
			if yyl2529 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2529, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2530Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2530Slc
	var yyhl2530 bool = l >= 0
	for yyj2530 := 0; ; yyj2530++ {
		if yyhl2530 {
			if yyj2530 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2530Slc = r.DecodeBytes(yys2530Slc, true, true)
		yys2530 := string(yys2530Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2530 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2530)
		} // end switch yys2530
	} // end for yyj2530
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2533 int
	var yyb2533 bool
	var yyhl2533 bool = l >= 0
	yyj2533++
	if yyhl2533 {
		yyb2533 = yyj2533 > l
	} else {
		yyb2533 = r.CheckBreak()
	}
	if yyb2533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2533++
	if yyhl2533 {
		yyb2533 = yyj2533 > l
	} else {
		yyb2533 = r.CheckBreak()
	}
	if yyb2533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2533++
		if yyhl2533 {
			yyb2533 = yyj2533 > l
		} else {
			yyb2533 = r.CheckBreak()
		}
		if yyb2533 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2533-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2536 := z.EncBinary()
		_ = yym2536
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2537 := !z.EncBinary()
			yy2arr2537 := z.EncBasicHandle().StructToArray
			var yyq2537 [3]bool
			_, _, _ = yysep2537, yyq2537, yy2arr2537
			const yyr2537 bool = false
			var yynn2537 int
			if yyr2537 || yy2arr2537 {
				r.EncodeArrayStart(3)
			} else {
				yynn2537 = 3
				for _, b := range yyq2537 {
					if b {
						yynn2537++
					}
				}
				r.EncodeMapStart(yynn2537)
				yynn2537 = 0
			}
			if yyr2537 || yy2arr2537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2539 := z.EncBinary()
				_ = yym2539
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2540 := z.EncBinary()
				_ = yym2540
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2537 || yy2arr2537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2542 := z.EncBinary()
				_ = yym2542
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2543 := z.EncBinary()
				_ = yym2543
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2537 || yy2arr2537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2537 || yy2arr2537 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2545 := z.DecBinary()
	_ = yym2545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2546 := r.ContainerType()
		if yyct2546 == codecSelferValueTypeMap1234 {
			yyl2546 := r.ReadMapStart()
			if yyl2546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2546, d)
			}
		} else if yyct2546 == codecSelferValueTypeArray1234 {
			yyl2546 := r.ReadArrayStart()
			if yyl2546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2547Slc
	var yyhl2547 bool = l >= 0
	for yyj2547 := 0; ; yyj2547++ {
		if yyhl2547 {
			if yyj2547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2547Slc = r.DecodeBytes(yys2547Slc, true, true)
		yys2547 := string(yys2547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2547 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2547)
		} // end switch yys2547
	} // end for yyj2547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2551 int
	var yyb2551 bool
	var yyhl2551 bool = l >= 0
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2551++
		if yyhl2551 {
			yyb2551 = yyj2551 > l
		} else {
			yyb2551 = r.CheckBreak()
		}
		if yyb2551 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2551-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2555 := z.EncBinary()
		_ = yym2555
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2556 := !z.EncBinary()
			yy2arr2556 := z.EncBasicHandle().StructToArray
			var yyq2556 [4]bool
			_, _, _ = yysep2556, yyq2556, yy2arr2556
			const yyr2556 bool = false
			yyq2556[0] = true
			yyq2556[2] = x.Kind != ""
			yyq2556[3] = x.APIVersion != ""
			var yynn2556 int
			if yyr2556 || yy2arr2556 {
				r.EncodeArrayStart(4)
			} else {
				yynn2556 = 1
				for _, b := range yyq2556 {
					if b {
						yynn2556++
					}
				}
				r.EncodeMapStart(yynn2556)
				yynn2556 = 0
			}
			if yyr2556 || yy2arr2556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2556[0] {
					yy2558 := &x.ListMeta
					yym2559 := z.EncBinary()
					_ = yym2559
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2558) {
					} else {
						z.EncFallback(yy2558)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2556[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2560 := &x.ListMeta
					yym2561 := z.EncBinary()
					_ = yym2561
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2560) {
					} else {
						z.EncFallback(yy2560)
					}
				}
			}
			if yyr2556 || yy2arr2556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2564 := z.EncBinary()
					_ = yym2564
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2556 || yy2arr2556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2556[2] {
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2556[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2567 := z.EncBinary()
					_ = yym2567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2556 || yy2arr2556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2556[3] {
					yym2569 := z.EncBinary()
					_ = yym2569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2556[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2570 := z.EncBinary()
					_ = yym2570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2556 || yy2arr2556 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2571 := z.DecBinary()
	_ = yym2571
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2572 := r.ContainerType()
		if yyct2572 == codecSelferValueTypeMap1234 {
			yyl2572 := r.ReadMapStart()
			if yyl2572 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2572, d)
			}
		} else if yyct2572 == codecSelferValueTypeArray1234 {
			yyl2572 := r.ReadArrayStart()
			if yyl2572 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2572, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2573Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2573Slc
	var yyhl2573 bool = l >= 0
	for yyj2573 := 0; ; yyj2573++ {
		if yyhl2573 {
			if yyj2573 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2573Slc = r.DecodeBytes(yys2573Slc, true, true)
		yys2573 := string(yys2573Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2573 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2574 := &x.ListMeta
				yym2575 := z.DecBinary()
				_ = yym2575
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2574) {
				} else {
					z.DecFallback(yyv2574, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2576 := &x.Items
				yym2577 := z.DecBinary()
				_ = yym2577
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2576), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2573)
		} // end switch yys2573
	} // end for yyj2573
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2580 int
	var yyb2580 bool
	var yyhl2580 bool = l >= 0
	yyj2580++
	if yyhl2580 {
		yyb2580 = yyj2580 > l
	} else {
		yyb2580 = r.CheckBreak()
	}
	if yyb2580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2581 := &x.ListMeta
		yym2582 := z.DecBinary()
		_ = yym2582
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2581) {
		} else {
			z.DecFallback(yyv2581, false)
		}
	}
	yyj2580++
	if yyhl2580 {
		yyb2580 = yyj2580 > l
	} else {
		yyb2580 = r.CheckBreak()
	}
	if yyb2580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2583 := &x.Items
		yym2584 := z.DecBinary()
		_ = yym2584
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2583), d)
		}
	}
	yyj2580++
	if yyhl2580 {
		yyb2580 = yyj2580 > l
	} else {
		yyb2580 = r.CheckBreak()
	}
	if yyb2580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2580++
	if yyhl2580 {
		yyb2580 = yyj2580 > l
	} else {
		yyb2580 = r.CheckBreak()
	}
	if yyb2580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2580++
		if yyhl2580 {
			yyb2580 = yyj2580 > l
		} else {
			yyb2580 = r.CheckBreak()
		}
		if yyb2580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2587 := z.EncBinary()
		_ = yym2587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2588 := !z.EncBinary()
			yy2arr2588 := z.EncBasicHandle().StructToArray
			var yyq2588 [4]bool
			_, _, _ = yysep2588, yyq2588, yy2arr2588
			const yyr2588 bool = false
			yyq2588[0] = x.PodCIDR != ""
			yyq2588[1] = x.ExternalID != ""
			yyq2588[2] = x.ProviderID != ""
			yyq2588[3] = x.Unschedulable != false
			var yynn2588 int
			if yyr2588 || yy2arr2588 {
				r.EncodeArrayStart(4)
			} else {
				yynn2588 = 0
				for _, b := range yyq2588 {
					if b {
						yynn2588++
					}
				}
				r.EncodeMapStart(yynn2588)
				yynn2588 = 0
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2588[0] {
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2588[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2591 := z.EncBinary()
					_ = yym2591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2588[1] {
					yym2593 := z.EncBinary()
					_ = yym2593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2588[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2588[2] {
					yym2596 := z.EncBinary()
					_ = yym2596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2588[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2588[3] {
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2588[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2600 := z.EncBinary()
					_ = yym2600
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2601 := z.DecBinary()
	_ = yym2601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2602 := r.ContainerType()
		if yyct2602 == codecSelferValueTypeMap1234 {
			yyl2602 := r.ReadMapStart()
			if yyl2602 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2602, d)
			}
		} else if yyct2602 == codecSelferValueTypeArray1234 {
			yyl2602 := r.ReadArrayStart()
			if yyl2602 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2603Slc
	var yyhl2603 bool = l >= 0
	for yyj2603 := 0; ; yyj2603++ {
		if yyhl2603 {
			if yyj2603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2603Slc = r.DecodeBytes(yys2603Slc, true, true)
		yys2603 := string(yys2603Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2603 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2603)
		} // end switch yys2603
	} // end for yyj2603
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2608 int
	var yyb2608 bool
	var yyhl2608 bool = l >= 0
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2608++
		if yyhl2608 {
			yyb2608 = yyj2608 > l
		} else {
			yyb2608 = r.CheckBreak()
		}
		if yyb2608 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2608-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2613 := z.EncBinary()
		_ = yym2613
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2614 := !z.EncBinary()
			yy2arr2614 := z.EncBasicHandle().StructToArray
			var yyq2614 [1]bool
			_, _, _ = yysep2614, yyq2614, yy2arr2614
			const yyr2614 bool = false
			var yynn2614 int
			if yyr2614 || yy2arr2614 {
				r.EncodeArrayStart(1)
			} else {
				yynn2614 = 1
				for _, b := range yyq2614 {
					if b {
						yynn2614++
					}
				}
				r.EncodeMapStart(yynn2614)
				yynn2614 = 0
			}
			if yyr2614 || yy2arr2614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2616 := z.EncBinary()
				_ = yym2616
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2617 := z.EncBinary()
				_ = yym2617
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2614 || yy2arr2614 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2618 := z.DecBinary()
	_ = yym2618
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2619 := r.ContainerType()
		if yyct2619 == codecSelferValueTypeMap1234 {
			yyl2619 := r.ReadMapStart()
			if yyl2619 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2619, d)
			}
		} else if yyct2619 == codecSelferValueTypeArray1234 {
			yyl2619 := r.ReadArrayStart()
			if yyl2619 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2619, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2620Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2620Slc
	var yyhl2620 bool = l >= 0
	for yyj2620 := 0; ; yyj2620++ {
		if yyhl2620 {
			if yyj2620 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2620Slc = r.DecodeBytes(yys2620Slc, true, true)
		yys2620 := string(yys2620Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2620 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2620)
		} // end switch yys2620
	} // end for yyj2620
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2622 int
	var yyb2622 bool
	var yyhl2622 bool = l >= 0
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2622++
		if yyhl2622 {
			yyb2622 = yyj2622 > l
		} else {
			yyb2622 = r.CheckBreak()
		}
		if yyb2622 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2622-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2624 := z.EncBinary()
		_ = yym2624
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2625 := !z.EncBinary()
			yy2arr2625 := z.EncBasicHandle().StructToArray
			var yyq2625 [1]bool
			_, _, _ = yysep2625, yyq2625, yy2arr2625
			const yyr2625 bool = false
			yyq2625[0] = true
			var yynn2625 int
			if yyr2625 || yy2arr2625 {
				r.EncodeArrayStart(1)
			} else {
				yynn2625 = 0
				for _, b := range yyq2625 {
					if b {
						yynn2625++
					}
				}
				r.EncodeMapStart(yynn2625)
				yynn2625 = 0
			}
			if yyr2625 || yy2arr2625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2625[0] {
					yy2627 := &x.KubeletEndpoint
					yy2627.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2625[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2628 := &x.KubeletEndpoint
					yy2628.CodecEncodeSelf(e)
				}
			}
			if yyr2625 || yy2arr2625 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2629 := z.DecBinary()
	_ = yym2629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2630 := r.ContainerType()
		if yyct2630 == codecSelferValueTypeMap1234 {
			yyl2630 := r.ReadMapStart()
			if yyl2630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2630, d)
			}
		} else if yyct2630 == codecSelferValueTypeArray1234 {
			yyl2630 := r.ReadArrayStart()
			if yyl2630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2631Slc
	var yyhl2631 bool = l >= 0
	for yyj2631 := 0; ; yyj2631++ {
		if yyhl2631 {
			if yyj2631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2631Slc = r.DecodeBytes(yys2631Slc, true, true)
		yys2631 := string(yys2631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2631 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2632 := &x.KubeletEndpoint
				yyv2632.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2631)
		} // end switch yys2631
	} // end for yyj2631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2633 int
	var yyb2633 bool
	var yyhl2633 bool = l >= 0
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2634 := &x.KubeletEndpoint
		yyv2634.CodecDecodeSelf(d)
	}
	for {
		yyj2633++
		if yyhl2633 {
			yyb2633 = yyj2633 > l
		} else {
			yyb2633 = r.CheckBreak()
		}
		if yyb2633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2635 := z.EncBinary()
		_ = yym2635
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2636 := !z.EncBinary()
			yy2arr2636 := z.EncBasicHandle().StructToArray
			var yyq2636 [8]bool
			_, _, _ = yysep2636, yyq2636, yy2arr2636
			const yyr2636 bool = false
			var yynn2636 int
			if yyr2636 || yy2arr2636 {
				r.EncodeArrayStart(8)
			} else {
				yynn2636 = 8
				for _, b := range yyq2636 {
					if b {
						yynn2636++
					}
				}
				r.EncodeMapStart(yynn2636)
				yynn2636 = 0
			}
			if yyr2636 || yy2arr2636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2638 := z.EncBinary()
				_ = yym2638
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2639 := z.EncBinary()
				_ = yym2639
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2636 || yy2arr2636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2641 := z.EncBinary()
				_ = yym2641
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2642 := z.EncBinary()
				_ = yym2642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2636 || yy2arr2636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2644 := z.EncBinary()
				_ = yym2644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2645 := z.EncBinary()
				_ = yym2645
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2636 || yy2arr2636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2647 := z.EncBinary()
				_ = yym2647
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2648 := z.EncBinary()
				_ = yym2648
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2636 || yy2arr2636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2650 := z.EncBinary()
				_ = yym2650
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2651 := z.EncBinary()
				_ = yym2651
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2636 || yy2arr2636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2653 := z.EncBinary()
				_ = yym2653
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2654 := z.EncBinary()
				_ = yym2654
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2636 || yy2arr2636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2656 := z.EncBinary()
				_ = yym2656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2657 := z.EncBinary()
				_ = yym2657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2636 || yy2arr2636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2659 := z.EncBinary()
				_ = yym2659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2660 := z.EncBinary()
				_ = yym2660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2636 || yy2arr2636 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2661 := z.DecBinary()
	_ = yym2661
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2662 := r.ContainerType()
		if yyct2662 == codecSelferValueTypeMap1234 {
			yyl2662 := r.ReadMapStart()
			if yyl2662 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2662, d)
			}
		} else if yyct2662 == codecSelferValueTypeArray1234 {
			yyl2662 := r.ReadArrayStart()
			if yyl2662 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2662, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2663Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2663Slc
	var yyhl2663 bool = l >= 0
	for yyj2663 := 0; ; yyj2663++ {
		if yyhl2663 {
			if yyj2663 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2663Slc = r.DecodeBytes(yys2663Slc, true, true)
		yys2663 := string(yys2663Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2663 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2663)
		} // end switch yys2663
	} // end for yyj2663
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2672 int
	var yyb2672 bool
	var yyhl2672 bool = l >= 0
	yyj2672++
	if yyhl2672 {
		yyb2672 = yyj2672 > l
	} else {
		yyb2672 = r.CheckBreak()
	}
	if yyb2672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2672++
	if yyhl2672 {
		yyb2672 = yyj2672 > l
	} else {
		yyb2672 = r.CheckBreak()
	}
	if yyb2672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2672++
	if yyhl2672 {
		yyb2672 = yyj2672 > l
	} else {
		yyb2672 = r.CheckBreak()
	}
	if yyb2672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2672++
	if yyhl2672 {
		yyb2672 = yyj2672 > l
	} else {
		yyb2672 = r.CheckBreak()
	}
	if yyb2672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2672++
	if yyhl2672 {
		yyb2672 = yyj2672 > l
	} else {
		yyb2672 = r.CheckBreak()
	}
	if yyb2672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2672++
	if yyhl2672 {
		yyb2672 = yyj2672 > l
	} else {
		yyb2672 = r.CheckBreak()
	}
	if yyb2672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2672++
	if yyhl2672 {
		yyb2672 = yyj2672 > l
	} else {
		yyb2672 = r.CheckBreak()
	}
	if yyb2672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2672++
	if yyhl2672 {
		yyb2672 = yyj2672 > l
	} else {
		yyb2672 = r.CheckBreak()
	}
	if yyb2672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2672++
		if yyhl2672 {
			yyb2672 = yyj2672 > l
		} else {
			yyb2672 = r.CheckBreak()
		}
		if yyb2672 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2672-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2681 := z.EncBinary()
		_ = yym2681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2682 := !z.EncBinary()
			yy2arr2682 := z.EncBasicHandle().StructToArray
			var yyq2682 [8]bool
			_, _, _ = yysep2682, yyq2682, yy2arr2682
			const yyr2682 bool = false
			yyq2682[0] = len(x.Capacity) != 0
			yyq2682[1] = len(x.Allocatable) != 0
			yyq2682[2] = x.Phase != ""
			yyq2682[3] = len(x.Conditions) != 0
			yyq2682[4] = len(x.Addresses) != 0
			yyq2682[5] = true
			yyq2682[6] = true
			var yynn2682 int
			if yyr2682 || yy2arr2682 {
				r.EncodeArrayStart(8)
			} else {
				yynn2682 = 1
				for _, b := range yyq2682 {
					if b {
						yynn2682++
					}
				}
				r.EncodeMapStart(yynn2682)
				yynn2682 = 0
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2682[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2682[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2682[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2682[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2682[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2682[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2682[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2687 := z.EncBinary()
						_ = yym2687
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2682[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2688 := z.EncBinary()
						_ = yym2688
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2682[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2690 := z.EncBinary()
						_ = yym2690
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2682[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2691 := z.EncBinary()
						_ = yym2691
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2682[5] {
					yy2693 := &x.DaemonEndpoints
					yy2693.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2682[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2694 := &x.DaemonEndpoints
					yy2694.CodecEncodeSelf(e)
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2682[6] {
					yy2696 := &x.NodeInfo
					yy2696.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2682[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2697 := &x.NodeInfo
					yy2697.CodecEncodeSelf(e)
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("images"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2700 := z.EncBinary()
					_ = yym2700
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2701 := z.DecBinary()
	_ = yym2701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2702 := r.ContainerType()
		if yyct2702 == codecSelferValueTypeMap1234 {
			yyl2702 := r.ReadMapStart()
			if yyl2702 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2702, d)
			}
		} else if yyct2702 == codecSelferValueTypeArray1234 {
			yyl2702 := r.ReadArrayStart()
			if yyl2702 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2703Slc
	var yyhl2703 bool = l >= 0
	for yyj2703 := 0; ; yyj2703++ {
		if yyhl2703 {
			if yyj2703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2703Slc = r.DecodeBytes(yys2703Slc, true, true)
		yys2703 := string(yys2703Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2703 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2704 := &x.Capacity
				yyv2704.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2705 := &x.Allocatable
				yyv2705.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2707 := &x.Conditions
				yym2708 := z.DecBinary()
				_ = yym2708
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2707), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2709 := &x.Addresses
				yym2710 := z.DecBinary()
				_ = yym2710
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2709), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2711 := &x.DaemonEndpoints
				yyv2711.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2712 := &x.NodeInfo
				yyv2712.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2713 := &x.Images
				yym2714 := z.DecBinary()
				_ = yym2714
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2713), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2703)
		} // end switch yys2703
	} // end for yyj2703
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2715 int
	var yyb2715 bool
	var yyhl2715 bool = l >= 0
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2716 := &x.Capacity
		yyv2716.CodecDecodeSelf(d)
	}
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2717 := &x.Allocatable
		yyv2717.CodecDecodeSelf(d)
	}
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2719 := &x.Conditions
		yym2720 := z.DecBinary()
		_ = yym2720
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2719), d)
		}
	}
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2721 := &x.Addresses
		yym2722 := z.DecBinary()
		_ = yym2722
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2721), d)
		}
	}
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2723 := &x.DaemonEndpoints
		yyv2723.CodecDecodeSelf(d)
	}
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2724 := &x.NodeInfo
		yyv2724.CodecDecodeSelf(d)
	}
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2725 := &x.Images
		yym2726 := z.DecBinary()
		_ = yym2726
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2725), d)
		}
	}
	for {
		yyj2715++
		if yyhl2715 {
			yyb2715 = yyj2715 > l
		} else {
			yyb2715 = r.CheckBreak()
		}
		if yyb2715 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2715-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2727 := z.EncBinary()
		_ = yym2727
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2728 := !z.EncBinary()
			yy2arr2728 := z.EncBasicHandle().StructToArray
			var yyq2728 [2]bool
			_, _, _ = yysep2728, yyq2728, yy2arr2728
			const yyr2728 bool = false
			yyq2728[1] = x.Size != 0
			var yynn2728 int
			if yyr2728 || yy2arr2728 {
				r.EncodeArrayStart(2)
			} else {
				yynn2728 = 1
				for _, b := range yyq2728 {
					if b {
						yynn2728++
					}
				}
				r.EncodeMapStart(yynn2728)
				yynn2728 = 0
			}
			if yyr2728 || yy2arr2728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repoTags"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			}
			if yyr2728 || yy2arr2728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2728[1] {
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2728[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("size"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				}
			}
			if yyr2728 || yy2arr2728 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2735 := z.DecBinary()
	_ = yym2735
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2736 := r.ContainerType()
		if yyct2736 == codecSelferValueTypeMap1234 {
			yyl2736 := r.ReadMapStart()
			if yyl2736 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2736, d)
			}
		} else if yyct2736 == codecSelferValueTypeArray1234 {
			yyl2736 := r.ReadArrayStart()
			if yyl2736 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2736, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2737Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2737Slc
	var yyhl2737 bool = l >= 0
	for yyj2737 := 0; ; yyj2737++ {
		if yyhl2737 {
			if yyj2737 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2737Slc = r.DecodeBytes(yys2737Slc, true, true)
		yys2737 := string(yys2737Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2737 {
		case "repoTags":
			if r.TryDecodeAsNil() {
				x.RepoTags = nil
			} else {
				yyv2738 := &x.RepoTags
				yym2739 := z.DecBinary()
				_ = yym2739
				if false {
				} else {
					z.F.DecSliceStringX(yyv2738, false, d)
				}
			}
		case "size":
			if r.TryDecodeAsNil() {
				x.Size = 0
			} else {
				x.Size = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2737)
		} // end switch yys2737
	} // end for yyj2737
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2741 int
	var yyb2741 bool
	var yyhl2741 bool = l >= 0
	yyj2741++
	if yyhl2741 {
		yyb2741 = yyj2741 > l
	} else {
		yyb2741 = r.CheckBreak()
	}
	if yyb2741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RepoTags = nil
	} else {
		yyv2742 := &x.RepoTags
		yym2743 := z.DecBinary()
		_ = yym2743
		if false {
		} else {
			z.F.DecSliceStringX(yyv2742, false, d)
		}
	}
	yyj2741++
	if yyhl2741 {
		yyb2741 = yyj2741 > l
	} else {
		yyb2741 = r.CheckBreak()
	}
	if yyb2741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Size = 0
	} else {
		x.Size = int64(r.DecodeInt(64))
	}
	for {
		yyj2741++
		if yyhl2741 {
			yyb2741 = yyj2741 > l
		} else {
			yyb2741 = r.CheckBreak()
		}
		if yyb2741 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2741-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2745 := z.EncBinary()
	_ = yym2745
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2746 := z.DecBinary()
	_ = yym2746
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2747 := z.EncBinary()
	_ = yym2747
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2748 := z.DecBinary()
	_ = yym2748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2749 := z.EncBinary()
		_ = yym2749
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2750 := !z.EncBinary()
			yy2arr2750 := z.EncBasicHandle().StructToArray
			var yyq2750 [6]bool
			_, _, _ = yysep2750, yyq2750, yy2arr2750
			const yyr2750 bool = false
			yyq2750[2] = true
			yyq2750[3] = true
			yyq2750[4] = x.Reason != ""
			yyq2750[5] = x.Message != ""
			var yynn2750 int
			if yyr2750 || yy2arr2750 {
				r.EncodeArrayStart(6)
			} else {
				yynn2750 = 2
				for _, b := range yyq2750 {
					if b {
						yynn2750++
					}
				}
				r.EncodeMapStart(yynn2750)
				yynn2750 = 0
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2750[2] {
					yy2754 := &x.LastHeartbeatTime
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2754) {
					} else if yym2755 {
						z.EncBinaryMarshal(yy2754)
					} else if !yym2755 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2754)
					} else {
						z.EncFallback(yy2754)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2750[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2756 := &x.LastHeartbeatTime
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2756) {
					} else if yym2757 {
						z.EncBinaryMarshal(yy2756)
					} else if !yym2757 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2756)
					} else {
						z.EncFallback(yy2756)
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2750[3] {
					yy2759 := &x.LastTransitionTime
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2759) {
					} else if yym2760 {
						z.EncBinaryMarshal(yy2759)
					} else if !yym2760 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2759)
					} else {
						z.EncFallback(yy2759)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2750[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2761 := &x.LastTransitionTime
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2761) {
					} else if yym2762 {
						z.EncBinaryMarshal(yy2761)
					} else if !yym2762 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2761)
					} else {
						z.EncFallback(yy2761)
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2750[4] {
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2750[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2765 := z.EncBinary()
					_ = yym2765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2750[5] {
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2750[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2768 := z.EncBinary()
					_ = yym2768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2769 := z.DecBinary()
	_ = yym2769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2770 := r.ContainerType()
		if yyct2770 == codecSelferValueTypeMap1234 {
			yyl2770 := r.ReadMapStart()
			if yyl2770 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2770, d)
			}
		} else if yyct2770 == codecSelferValueTypeArray1234 {
			yyl2770 := r.ReadArrayStart()
			if yyl2770 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2770, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2771Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2771Slc
	var yyhl2771 bool = l >= 0
	for yyj2771 := 0; ; yyj2771++ {
		if yyhl2771 {
			if yyj2771 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2771Slc = r.DecodeBytes(yys2771Slc, true, true)
		yys2771 := string(yys2771Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2771 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2774 := &x.LastHeartbeatTime
				yym2775 := z.DecBinary()
				_ = yym2775
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2774) {
				} else if yym2775 {
					z.DecBinaryUnmarshal(yyv2774)
				} else if !yym2775 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2774)
				} else {
					z.DecFallback(yyv2774, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2776 := &x.LastTransitionTime
				yym2777 := z.DecBinary()
				_ = yym2777
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2776) {
				} else if yym2777 {
					z.DecBinaryUnmarshal(yyv2776)
				} else if !yym2777 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2776)
				} else {
					z.DecFallback(yyv2776, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2771)
		} // end switch yys2771
	} // end for yyj2771
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2780 int
	var yyb2780 bool
	var yyhl2780 bool = l >= 0
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2783 := &x.LastHeartbeatTime
		yym2784 := z.DecBinary()
		_ = yym2784
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2783) {
		} else if yym2784 {
			z.DecBinaryUnmarshal(yyv2783)
		} else if !yym2784 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2783)
		} else {
			z.DecFallback(yyv2783, false)
		}
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2785 := &x.LastTransitionTime
		yym2786 := z.DecBinary()
		_ = yym2786
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2785) {
		} else if yym2786 {
			z.DecBinaryUnmarshal(yyv2785)
		} else if !yym2786 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2785)
		} else {
			z.DecFallback(yyv2785, false)
		}
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2780++
	if yyhl2780 {
		yyb2780 = yyj2780 > l
	} else {
		yyb2780 = r.CheckBreak()
	}
	if yyb2780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2780++
		if yyhl2780 {
			yyb2780 = yyj2780 > l
		} else {
			yyb2780 = r.CheckBreak()
		}
		if yyb2780 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2780-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2789 := z.EncBinary()
	_ = yym2789
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2790 := z.DecBinary()
	_ = yym2790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2791 := z.EncBinary()
		_ = yym2791
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2792 := !z.EncBinary()
			yy2arr2792 := z.EncBasicHandle().StructToArray
			var yyq2792 [2]bool
			_, _, _ = yysep2792, yyq2792, yy2arr2792
			const yyr2792 bool = false
			var yynn2792 int
			if yyr2792 || yy2arr2792 {
				r.EncodeArrayStart(2)
			} else {
				yynn2792 = 2
				for _, b := range yyq2792 {
					if b {
						yynn2792++
					}
				}
				r.EncodeMapStart(yynn2792)
				yynn2792 = 0
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2795 := z.EncBinary()
				_ = yym2795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2796 := z.EncBinary()
				_ = yym2796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2797 := z.DecBinary()
	_ = yym2797
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2798 := r.ContainerType()
		if yyct2798 == codecSelferValueTypeMap1234 {
			yyl2798 := r.ReadMapStart()
			if yyl2798 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2798, d)
			}
		} else if yyct2798 == codecSelferValueTypeArray1234 {
			yyl2798 := r.ReadArrayStart()
			if yyl2798 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2798, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2799Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2799Slc
	var yyhl2799 bool = l >= 0
	for yyj2799 := 0; ; yyj2799++ {
		if yyhl2799 {
			if yyj2799 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2799Slc = r.DecodeBytes(yys2799Slc, true, true)
		yys2799 := string(yys2799Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2799 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2799)
		} // end switch yys2799
	} // end for yyj2799
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2802 int
	var yyb2802 bool
	var yyhl2802 bool = l >= 0
	yyj2802++
	if yyhl2802 {
		yyb2802 = yyj2802 > l
	} else {
		yyb2802 = r.CheckBreak()
	}
	if yyb2802 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2802++
	if yyhl2802 {
		yyb2802 = yyj2802 > l
	} else {
		yyb2802 = r.CheckBreak()
	}
	if yyb2802 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2802++
		if yyhl2802 {
			yyb2802 = yyj2802 > l
		} else {
			yyb2802 = r.CheckBreak()
		}
		if yyb2802 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2802-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2805 := z.EncBinary()
		_ = yym2805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2806 := !z.EncBinary()
			yy2arr2806 := z.EncBasicHandle().StructToArray
			var yyq2806 [1]bool
			_, _, _ = yysep2806, yyq2806, yy2arr2806
			const yyr2806 bool = false
			yyq2806[0] = len(x.Capacity) != 0
			var yynn2806 int
			if yyr2806 || yy2arr2806 {
				r.EncodeArrayStart(1)
			} else {
				yynn2806 = 0
				for _, b := range yyq2806 {
					if b {
						yynn2806++
					}
				}
				r.EncodeMapStart(yynn2806)
				yynn2806 = 0
			}
			if yyr2806 || yy2arr2806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2806[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2806[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2806 || yy2arr2806 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2808 := z.DecBinary()
	_ = yym2808
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2809 := r.ContainerType()
		if yyct2809 == codecSelferValueTypeMap1234 {
			yyl2809 := r.ReadMapStart()
			if yyl2809 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2809, d)
			}
		} else if yyct2809 == codecSelferValueTypeArray1234 {
			yyl2809 := r.ReadArrayStart()
			if yyl2809 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2809, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2810Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2810Slc
	var yyhl2810 bool = l >= 0
	for yyj2810 := 0; ; yyj2810++ {
		if yyhl2810 {
			if yyj2810 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2810Slc = r.DecodeBytes(yys2810Slc, true, true)
		yys2810 := string(yys2810Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2810 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2811 := &x.Capacity
				yyv2811.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2810)
		} // end switch yys2810
	} // end for yyj2810
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2812 int
	var yyb2812 bool
	var yyhl2812 bool = l >= 0
	yyj2812++
	if yyhl2812 {
		yyb2812 = yyj2812 > l
	} else {
		yyb2812 = r.CheckBreak()
	}
	if yyb2812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2813 := &x.Capacity
		yyv2813.CodecDecodeSelf(d)
	}
	for {
		yyj2812++
		if yyhl2812 {
			yyb2812 = yyj2812 > l
		} else {
			yyb2812 = r.CheckBreak()
		}
		if yyb2812 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2812-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2814 := z.EncBinary()
	_ = yym2814
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2815 := z.DecBinary()
	_ = yym2815
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2816 := z.EncBinary()
		_ = yym2816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2817 := z.DecBinary()
	_ = yym2817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2818 := z.EncBinary()
		_ = yym2818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2819 := !z.EncBinary()
			yy2arr2819 := z.EncBasicHandle().StructToArray
			var yyq2819 [5]bool
			_, _, _ = yysep2819, yyq2819, yy2arr2819
			const yyr2819 bool = false
			yyq2819[0] = true
			yyq2819[1] = true
			yyq2819[2] = true
			yyq2819[3] = x.Kind != ""
			yyq2819[4] = x.APIVersion != ""
			var yynn2819 int
			if yyr2819 || yy2arr2819 {
				r.EncodeArrayStart(5)
			} else {
				yynn2819 = 0
				for _, b := range yyq2819 {
					if b {
						yynn2819++
					}
				}
				r.EncodeMapStart(yynn2819)
				yynn2819 = 0
			}
			if yyr2819 || yy2arr2819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2819[0] {
					yy2821 := &x.ObjectMeta
					yy2821.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2819[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2822 := &x.ObjectMeta
					yy2822.CodecEncodeSelf(e)
				}
			}
			if yyr2819 || yy2arr2819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2819[1] {
					yy2824 := &x.Spec
					yy2824.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2819[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2825 := &x.Spec
					yy2825.CodecEncodeSelf(e)
				}
			}
			if yyr2819 || yy2arr2819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2819[2] {
					yy2827 := &x.Status
					yy2827.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2819[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2828 := &x.Status
					yy2828.CodecEncodeSelf(e)
				}
			}
			if yyr2819 || yy2arr2819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2819[3] {
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2819[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2819 || yy2arr2819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2819[4] {
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2819[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2834 := z.EncBinary()
					_ = yym2834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2819 || yy2arr2819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2835 := z.DecBinary()
	_ = yym2835
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2836 := r.ContainerType()
		if yyct2836 == codecSelferValueTypeMap1234 {
			yyl2836 := r.ReadMapStart()
			if yyl2836 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2836, d)
			}
		} else if yyct2836 == codecSelferValueTypeArray1234 {
			yyl2836 := r.ReadArrayStart()
			if yyl2836 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2836, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2837Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2837Slc
	var yyhl2837 bool = l >= 0
	for yyj2837 := 0; ; yyj2837++ {
		if yyhl2837 {
			if yyj2837 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2837Slc = r.DecodeBytes(yys2837Slc, true, true)
		yys2837 := string(yys2837Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2837 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2838 := &x.ObjectMeta
				yyv2838.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2839 := &x.Spec
				yyv2839.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2840 := &x.Status
				yyv2840.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2837)
		} // end switch yys2837
	} // end for yyj2837
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2843 int
	var yyb2843 bool
	var yyhl2843 bool = l >= 0
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2844 := &x.ObjectMeta
		yyv2844.CodecDecodeSelf(d)
	}
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2845 := &x.Spec
		yyv2845.CodecDecodeSelf(d)
	}
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2846 := &x.Status
		yyv2846.CodecDecodeSelf(d)
	}
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2843++
		if yyhl2843 {
			yyb2843 = yyj2843 > l
		} else {
			yyb2843 = r.CheckBreak()
		}
		if yyb2843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2849 := z.EncBinary()
		_ = yym2849
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2850 := !z.EncBinary()
			yy2arr2850 := z.EncBasicHandle().StructToArray
			var yyq2850 [4]bool
			_, _, _ = yysep2850, yyq2850, yy2arr2850
			const yyr2850 bool = false
			yyq2850[0] = true
			yyq2850[2] = x.Kind != ""
			yyq2850[3] = x.APIVersion != ""
			var yynn2850 int
			if yyr2850 || yy2arr2850 {
				r.EncodeArrayStart(4)
			} else {
				yynn2850 = 1
				for _, b := range yyq2850 {
					if b {
						yynn2850++
					}
				}
				r.EncodeMapStart(yynn2850)
				yynn2850 = 0
			}
			if yyr2850 || yy2arr2850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2850[0] {
					yy2852 := &x.ListMeta
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2852) {
					} else {
						z.EncFallback(yy2852)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2850[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2854 := &x.ListMeta
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2854) {
					} else {
						z.EncFallback(yy2854)
					}
				}
			}
			if yyr2850 || yy2arr2850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2857 := z.EncBinary()
					_ = yym2857
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2858 := z.EncBinary()
					_ = yym2858
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2850 || yy2arr2850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2850[2] {
					yym2860 := z.EncBinary()
					_ = yym2860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2850[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2861 := z.EncBinary()
					_ = yym2861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2850 || yy2arr2850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2850[3] {
					yym2863 := z.EncBinary()
					_ = yym2863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2850[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2864 := z.EncBinary()
					_ = yym2864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2850 || yy2arr2850 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2865 := z.DecBinary()
	_ = yym2865
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2866 := r.ContainerType()
		if yyct2866 == codecSelferValueTypeMap1234 {
			yyl2866 := r.ReadMapStart()
			if yyl2866 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2866, d)
			}
		} else if yyct2866 == codecSelferValueTypeArray1234 {
			yyl2866 := r.ReadArrayStart()
			if yyl2866 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2866, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2867Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2867Slc
	var yyhl2867 bool = l >= 0
	for yyj2867 := 0; ; yyj2867++ {
		if yyhl2867 {
			if yyj2867 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2867Slc = r.DecodeBytes(yys2867Slc, true, true)
		yys2867 := string(yys2867Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2867 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2868 := &x.ListMeta
				yym2869 := z.DecBinary()
				_ = yym2869
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2868) {
				} else {
					z.DecFallback(yyv2868, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2870 := &x.Items
				yym2871 := z.DecBinary()
				_ = yym2871
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2870), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2867)
		} // end switch yys2867
	} // end for yyj2867
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2874 int
	var yyb2874 bool
	var yyhl2874 bool = l >= 0
	yyj2874++
	if yyhl2874 {
		yyb2874 = yyj2874 > l
	} else {
		yyb2874 = r.CheckBreak()
	}
	if yyb2874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2875 := &x.ListMeta
		yym2876 := z.DecBinary()
		_ = yym2876
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2875) {
		} else {
			z.DecFallback(yyv2875, false)
		}
	}
	yyj2874++
	if yyhl2874 {
		yyb2874 = yyj2874 > l
	} else {
		yyb2874 = r.CheckBreak()
	}
	if yyb2874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2877 := &x.Items
		yym2878 := z.DecBinary()
		_ = yym2878
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2877), d)
		}
	}
	yyj2874++
	if yyhl2874 {
		yyb2874 = yyj2874 > l
	} else {
		yyb2874 = r.CheckBreak()
	}
	if yyb2874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2874++
	if yyhl2874 {
		yyb2874 = yyj2874 > l
	} else {
		yyb2874 = r.CheckBreak()
	}
	if yyb2874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2874++
		if yyhl2874 {
			yyb2874 = yyj2874 > l
		} else {
			yyb2874 = r.CheckBreak()
		}
		if yyb2874 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2874-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2881 := z.EncBinary()
		_ = yym2881
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2882 := !z.EncBinary()
			yy2arr2882 := z.EncBasicHandle().StructToArray
			var yyq2882 [1]bool
			_, _, _ = yysep2882, yyq2882, yy2arr2882
			const yyr2882 bool = false
			var yynn2882 int
			if yyr2882 || yy2arr2882 {
				r.EncodeArrayStart(1)
			} else {
				yynn2882 = 1
				for _, b := range yyq2882 {
					if b {
						yynn2882++
					}
				}
				r.EncodeMapStart(yynn2882)
				yynn2882 = 0
			}
			if yyr2882 || yy2arr2882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2884 := z.EncBinary()
					_ = yym2884
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2885 := z.EncBinary()
					_ = yym2885
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr2882 || yy2arr2882 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2886 := z.DecBinary()
	_ = yym2886
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2887 := r.ContainerType()
		if yyct2887 == codecSelferValueTypeMap1234 {
			yyl2887 := r.ReadMapStart()
			if yyl2887 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2887, d)
			}
		} else if yyct2887 == codecSelferValueTypeArray1234 {
			yyl2887 := r.ReadArrayStart()
			if yyl2887 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2887, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2888Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2888Slc
	var yyhl2888 bool = l >= 0
	for yyj2888 := 0; ; yyj2888++ {
		if yyhl2888 {
			if yyj2888 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2888Slc = r.DecodeBytes(yys2888Slc, true, true)
		yys2888 := string(yys2888Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2888 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2889 := &x.Finalizers
				yym2890 := z.DecBinary()
				_ = yym2890
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2889), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2888)
		} // end switch yys2888
	} // end for yyj2888
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2891 int
	var yyb2891 bool
	var yyhl2891 bool = l >= 0
	yyj2891++
	if yyhl2891 {
		yyb2891 = yyj2891 > l
	} else {
		yyb2891 = r.CheckBreak()
	}
	if yyb2891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2892 := &x.Finalizers
		yym2893 := z.DecBinary()
		_ = yym2893
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2892), d)
		}
	}
	for {
		yyj2891++
		if yyhl2891 {
			yyb2891 = yyj2891 > l
		} else {
			yyb2891 = r.CheckBreak()
		}
		if yyb2891 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2891-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2894 := z.EncBinary()
	_ = yym2894
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2895 := z.DecBinary()
	_ = yym2895
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2896 := z.EncBinary()
		_ = yym2896
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2897 := !z.EncBinary()
			yy2arr2897 := z.EncBasicHandle().StructToArray
			var yyq2897 [1]bool
			_, _, _ = yysep2897, yyq2897, yy2arr2897
			const yyr2897 bool = false
			yyq2897[0] = x.Phase != ""
			var yynn2897 int
			if yyr2897 || yy2arr2897 {
				r.EncodeArrayStart(1)
			} else {
				yynn2897 = 0
				for _, b := range yyq2897 {
					if b {
						yynn2897++
					}
				}
				r.EncodeMapStart(yynn2897)
				yynn2897 = 0
			}
			if yyr2897 || yy2arr2897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2897[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2897[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2897 || yy2arr2897 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2899 := z.DecBinary()
	_ = yym2899
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2900 := r.ContainerType()
		if yyct2900 == codecSelferValueTypeMap1234 {
			yyl2900 := r.ReadMapStart()
			if yyl2900 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2900, d)
			}
		} else if yyct2900 == codecSelferValueTypeArray1234 {
			yyl2900 := r.ReadArrayStart()
			if yyl2900 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2900, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2901Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2901Slc
	var yyhl2901 bool = l >= 0
	for yyj2901 := 0; ; yyj2901++ {
		if yyhl2901 {
			if yyj2901 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2901Slc = r.DecodeBytes(yys2901Slc, true, true)
		yys2901 := string(yys2901Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2901 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2901)
		} // end switch yys2901
	} // end for yyj2901
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2903 int
	var yyb2903 bool
	var yyhl2903 bool = l >= 0
	yyj2903++
	if yyhl2903 {
		yyb2903 = yyj2903 > l
	} else {
		yyb2903 = r.CheckBreak()
	}
	if yyb2903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2903++
		if yyhl2903 {
			yyb2903 = yyj2903 > l
		} else {
			yyb2903 = r.CheckBreak()
		}
		if yyb2903 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2903-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2905 := z.EncBinary()
	_ = yym2905
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2906 := z.DecBinary()
	_ = yym2906
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2907 := z.EncBinary()
		_ = yym2907
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2908 := !z.EncBinary()
			yy2arr2908 := z.EncBasicHandle().StructToArray
			var yyq2908 [5]bool
			_, _, _ = yysep2908, yyq2908, yy2arr2908
			const yyr2908 bool = false
			yyq2908[0] = true
			yyq2908[1] = true
			yyq2908[2] = true
			yyq2908[3] = x.Kind != ""
			yyq2908[4] = x.APIVersion != ""
			var yynn2908 int
			if yyr2908 || yy2arr2908 {
				r.EncodeArrayStart(5)
			} else {
				yynn2908 = 0
				for _, b := range yyq2908 {
					if b {
						yynn2908++
					}
				}
				r.EncodeMapStart(yynn2908)
				yynn2908 = 0
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[0] {
					yy2910 := &x.ObjectMeta
					yy2910.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2908[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2911 := &x.ObjectMeta
					yy2911.CodecEncodeSelf(e)
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[1] {
					yy2913 := &x.Spec
					yy2913.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2908[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2914 := &x.Spec
					yy2914.CodecEncodeSelf(e)
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[2] {
					yy2916 := &x.Status
					yy2916.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2908[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2917 := &x.Status
					yy2917.CodecEncodeSelf(e)
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[3] {
					yym2919 := z.EncBinary()
					_ = yym2919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2908[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2920 := z.EncBinary()
					_ = yym2920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[4] {
					yym2922 := z.EncBinary()
					_ = yym2922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2908[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2924 := z.DecBinary()
	_ = yym2924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2925 := r.ContainerType()
		if yyct2925 == codecSelferValueTypeMap1234 {
			yyl2925 := r.ReadMapStart()
			if yyl2925 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2925, d)
			}
		} else if yyct2925 == codecSelferValueTypeArray1234 {
			yyl2925 := r.ReadArrayStart()
			if yyl2925 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2926Slc
	var yyhl2926 bool = l >= 0
	for yyj2926 := 0; ; yyj2926++ {
		if yyhl2926 {
			if yyj2926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2926Slc = r.DecodeBytes(yys2926Slc, true, true)
		yys2926 := string(yys2926Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2926 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2927 := &x.ObjectMeta
				yyv2927.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2928 := &x.Spec
				yyv2928.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2929 := &x.Status
				yyv2929.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2926)
		} // end switch yys2926
	} // end for yyj2926
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2932 int
	var yyb2932 bool
	var yyhl2932 bool = l >= 0
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2933 := &x.ObjectMeta
		yyv2933.CodecDecodeSelf(d)
	}
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2934 := &x.Spec
		yyv2934.CodecDecodeSelf(d)
	}
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2935 := &x.Status
		yyv2935.CodecDecodeSelf(d)
	}
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2932++
		if yyhl2932 {
			yyb2932 = yyj2932 > l
		} else {
			yyb2932 = r.CheckBreak()
		}
		if yyb2932 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2932-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2938 := z.EncBinary()
		_ = yym2938
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2939 := !z.EncBinary()
			yy2arr2939 := z.EncBasicHandle().StructToArray
			var yyq2939 [4]bool
			_, _, _ = yysep2939, yyq2939, yy2arr2939
			const yyr2939 bool = false
			yyq2939[0] = true
			yyq2939[2] = x.Kind != ""
			yyq2939[3] = x.APIVersion != ""
			var yynn2939 int
			if yyr2939 || yy2arr2939 {
				r.EncodeArrayStart(4)
			} else {
				yynn2939 = 1
				for _, b := range yyq2939 {
					if b {
						yynn2939++
					}
				}
				r.EncodeMapStart(yynn2939)
				yynn2939 = 0
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2939[0] {
					yy2941 := &x.ListMeta
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2941) {
					} else {
						z.EncFallback(yy2941)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2939[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2943 := &x.ListMeta
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2943) {
					} else {
						z.EncFallback(yy2943)
					}
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2946 := z.EncBinary()
					_ = yym2946
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2939[2] {
					yym2949 := z.EncBinary()
					_ = yym2949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2939[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2950 := z.EncBinary()
					_ = yym2950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2939[3] {
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2939[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2953 := z.EncBinary()
					_ = yym2953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2954 := z.DecBinary()
	_ = yym2954
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2955 := r.ContainerType()
		if yyct2955 == codecSelferValueTypeMap1234 {
			yyl2955 := r.ReadMapStart()
			if yyl2955 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2955, d)
			}
		} else if yyct2955 == codecSelferValueTypeArray1234 {
			yyl2955 := r.ReadArrayStart()
			if yyl2955 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2955, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2956Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2956Slc
	var yyhl2956 bool = l >= 0
	for yyj2956 := 0; ; yyj2956++ {
		if yyhl2956 {
			if yyj2956 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2956Slc = r.DecodeBytes(yys2956Slc, true, true)
		yys2956 := string(yys2956Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2956 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2957 := &x.ListMeta
				yym2958 := z.DecBinary()
				_ = yym2958
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2957) {
				} else {
					z.DecFallback(yyv2957, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2959 := &x.Items
				yym2960 := z.DecBinary()
				_ = yym2960
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2959), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2956)
		} // end switch yys2956
	} // end for yyj2956
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2963 int
	var yyb2963 bool
	var yyhl2963 bool = l >= 0
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2964 := &x.ListMeta
		yym2965 := z.DecBinary()
		_ = yym2965
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2964) {
		} else {
			z.DecFallback(yyv2964, false)
		}
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2966 := &x.Items
		yym2967 := z.DecBinary()
		_ = yym2967
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2966), d)
		}
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2963++
		if yyhl2963 {
			yyb2963 = yyj2963 > l
		} else {
			yyb2963 = r.CheckBreak()
		}
		if yyb2963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2970 := z.EncBinary()
		_ = yym2970
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2971 := !z.EncBinary()
			yy2arr2971 := z.EncBasicHandle().StructToArray
			var yyq2971 [4]bool
			_, _, _ = yysep2971, yyq2971, yy2arr2971
			const yyr2971 bool = false
			yyq2971[0] = true
			yyq2971[2] = x.Kind != ""
			yyq2971[3] = x.APIVersion != ""
			var yynn2971 int
			if yyr2971 || yy2arr2971 {
				r.EncodeArrayStart(4)
			} else {
				yynn2971 = 1
				for _, b := range yyq2971 {
					if b {
						yynn2971++
					}
				}
				r.EncodeMapStart(yynn2971)
				yynn2971 = 0
			}
			if yyr2971 || yy2arr2971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2971[0] {
					yy2973 := &x.ObjectMeta
					yy2973.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2971[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2974 := &x.ObjectMeta
					yy2974.CodecEncodeSelf(e)
				}
			}
			if yyr2971 || yy2arr2971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2976 := &x.Target
				yy2976.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2977 := &x.Target
				yy2977.CodecEncodeSelf(e)
			}
			if yyr2971 || yy2arr2971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2971[2] {
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2971[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2980 := z.EncBinary()
					_ = yym2980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2971 || yy2arr2971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2971[3] {
					yym2982 := z.EncBinary()
					_ = yym2982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2971[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2983 := z.EncBinary()
					_ = yym2983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2971 || yy2arr2971 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2984 := z.DecBinary()
	_ = yym2984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2985 := r.ContainerType()
		if yyct2985 == codecSelferValueTypeMap1234 {
			yyl2985 := r.ReadMapStart()
			if yyl2985 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2985, d)
			}
		} else if yyct2985 == codecSelferValueTypeArray1234 {
			yyl2985 := r.ReadArrayStart()
			if yyl2985 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2986Slc
	var yyhl2986 bool = l >= 0
	for yyj2986 := 0; ; yyj2986++ {
		if yyhl2986 {
			if yyj2986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2986Slc = r.DecodeBytes(yys2986Slc, true, true)
		yys2986 := string(yys2986Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2986 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2987 := &x.ObjectMeta
				yyv2987.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2988 := &x.Target
				yyv2988.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2986)
		} // end switch yys2986
	} // end for yyj2986
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2991 int
	var yyb2991 bool
	var yyhl2991 bool = l >= 0
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2992 := &x.ObjectMeta
		yyv2992.CodecDecodeSelf(d)
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2993 := &x.Target
		yyv2993.CodecDecodeSelf(d)
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2991++
		if yyhl2991 {
			yyb2991 = yyj2991 > l
		} else {
			yyb2991 = r.CheckBreak()
		}
		if yyb2991 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2991-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2996 := z.EncBinary()
		_ = yym2996
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2997 := !z.EncBinary()
			yy2arr2997 := z.EncBasicHandle().StructToArray
			var yyq2997 [3]bool
			_, _, _ = yysep2997, yyq2997, yy2arr2997
			const yyr2997 bool = false
			yyq2997[1] = x.Kind != ""
			yyq2997[2] = x.APIVersion != ""
			var yynn2997 int
			if yyr2997 || yy2arr2997 {
				r.EncodeArrayStart(3)
			} else {
				yynn2997 = 1
				for _, b := range yyq2997 {
					if b {
						yynn2997++
					}
				}
				r.EncodeMapStart(yynn2997)
				yynn2997 = 0
			}
			if yyr2997 || yy2arr2997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2999 := *x.GracePeriodSeconds
					yym3000 := z.EncBinary()
					_ = yym3000
					if false {
					} else {
						r.EncodeInt(int64(yy2999))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy3001 := *x.GracePeriodSeconds
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else {
						r.EncodeInt(int64(yy3001))
					}
				}
			}
			if yyr2997 || yy2arr2997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2997[1] {
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2997[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2997 || yy2arr2997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2997[2] {
					yym3007 := z.EncBinary()
					_ = yym3007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2997[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3008 := z.EncBinary()
					_ = yym3008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2997 || yy2arr2997 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3009 := z.DecBinary()
	_ = yym3009
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3010 := r.ContainerType()
		if yyct3010 == codecSelferValueTypeMap1234 {
			yyl3010 := r.ReadMapStart()
			if yyl3010 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3010, d)
			}
		} else if yyct3010 == codecSelferValueTypeArray1234 {
			yyl3010 := r.ReadArrayStart()
			if yyl3010 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3010, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3011Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3011Slc
	var yyhl3011 bool = l >= 0
	for yyj3011 := 0; ; yyj3011++ {
		if yyhl3011 {
			if yyj3011 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3011Slc = r.DecodeBytes(yys3011Slc, true, true)
		yys3011 := string(yys3011Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3011 {
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3013 := z.DecBinary()
				_ = yym3013
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3011)
		} // end switch yys3011
	} // end for yyj3011
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3016 int
	var yyb3016 bool
	var yyhl3016 bool = l >= 0
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3018 := z.DecBinary()
		_ = yym3018
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3016++
		if yyhl3016 {
			yyb3016 = yyj3016 > l
		} else {
			yyb3016 = r.CheckBreak()
		}
		if yyb3016 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3016-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3021 := z.EncBinary()
		_ = yym3021
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3022 := !z.EncBinary()
			yy2arr3022 := z.EncBasicHandle().StructToArray
			var yyq3022 [4]bool
			_, _, _ = yysep3022, yyq3022, yy2arr3022
			const yyr3022 bool = false
			yyq3022[2] = x.Kind != ""
			yyq3022[3] = x.APIVersion != ""
			var yynn3022 int
			if yyr3022 || yy2arr3022 {
				r.EncodeArrayStart(4)
			} else {
				yynn3022 = 2
				for _, b := range yyq3022 {
					if b {
						yynn3022++
					}
				}
				r.EncodeMapStart(yynn3022)
				yynn3022 = 0
			}
			if yyr3022 || yy2arr3022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3024 := z.EncBinary()
				_ = yym3024
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3025 := z.EncBinary()
				_ = yym3025
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3022 || yy2arr3022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3027 := z.EncBinary()
				_ = yym3027
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3028 := z.EncBinary()
				_ = yym3028
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3022 || yy2arr3022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3022[2] {
					yym3030 := z.EncBinary()
					_ = yym3030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3022[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3031 := z.EncBinary()
					_ = yym3031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3022 || yy2arr3022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3022[3] {
					yym3033 := z.EncBinary()
					_ = yym3033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3022[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3034 := z.EncBinary()
					_ = yym3034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3022 || yy2arr3022 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3035 := z.DecBinary()
	_ = yym3035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3036 := r.ContainerType()
		if yyct3036 == codecSelferValueTypeMap1234 {
			yyl3036 := r.ReadMapStart()
			if yyl3036 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3036, d)
			}
		} else if yyct3036 == codecSelferValueTypeArray1234 {
			yyl3036 := r.ReadArrayStart()
			if yyl3036 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3036, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3037Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3037Slc
	var yyhl3037 bool = l >= 0
	for yyj3037 := 0; ; yyj3037++ {
		if yyhl3037 {
			if yyj3037 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3037Slc = r.DecodeBytes(yys3037Slc, true, true)
		yys3037 := string(yys3037Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3037 {
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3037)
		} // end switch yys3037
	} // end for yyj3037
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3042 int
	var yyb3042 bool
	var yyhl3042 bool = l >= 0
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3042++
		if yyhl3042 {
			yyb3042 = yyj3042 > l
		} else {
			yyb3042 = r.CheckBreak()
		}
		if yyb3042 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3042-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3047 := z.EncBinary()
		_ = yym3047
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3048 := !z.EncBinary()
			yy2arr3048 := z.EncBasicHandle().StructToArray
			var yyq3048 [7]bool
			_, _, _ = yysep3048, yyq3048, yy2arr3048
			const yyr3048 bool = false
			yyq3048[5] = x.Kind != ""
			yyq3048[6] = x.APIVersion != ""
			var yynn3048 int
			if yyr3048 || yy2arr3048 {
				r.EncodeArrayStart(7)
			} else {
				yynn3048 = 5
				for _, b := range yyq3048 {
					if b {
						yynn3048++
					}
				}
				r.EncodeMapStart(yynn3048)
				yynn3048 = 0
			}
			if yyr3048 || yy2arr3048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3050 := z.EncBinary()
					_ = yym3050
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3051 := z.EncBinary()
					_ = yym3051
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3048 || yy2arr3048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3053 := z.EncBinary()
					_ = yym3053
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3054 := z.EncBinary()
					_ = yym3054
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3048 || yy2arr3048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3056 := z.EncBinary()
				_ = yym3056
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3057 := z.EncBinary()
				_ = yym3057
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3048 || yy2arr3048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3059 := z.EncBinary()
				_ = yym3059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3060 := z.EncBinary()
				_ = yym3060
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3048 || yy2arr3048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3062 := *x.TimeoutSeconds
					yym3063 := z.EncBinary()
					_ = yym3063
					if false {
					} else {
						r.EncodeInt(int64(yy3062))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3064 := *x.TimeoutSeconds
					yym3065 := z.EncBinary()
					_ = yym3065
					if false {
					} else {
						r.EncodeInt(int64(yy3064))
					}
				}
			}
			if yyr3048 || yy2arr3048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3048[5] {
					yym3067 := z.EncBinary()
					_ = yym3067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3048[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3068 := z.EncBinary()
					_ = yym3068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3048 || yy2arr3048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3048[6] {
					yym3070 := z.EncBinary()
					_ = yym3070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3048[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3071 := z.EncBinary()
					_ = yym3071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3048 || yy2arr3048 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3072 := z.DecBinary()
	_ = yym3072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3073 := r.ContainerType()
		if yyct3073 == codecSelferValueTypeMap1234 {
			yyl3073 := r.ReadMapStart()
			if yyl3073 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3073, d)
			}
		} else if yyct3073 == codecSelferValueTypeArray1234 {
			yyl3073 := r.ReadArrayStart()
			if yyl3073 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3073, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3074Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3074Slc
	var yyhl3074 bool = l >= 0
	for yyj3074 := 0; ; yyj3074++ {
		if yyhl3074 {
			if yyj3074 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3074Slc = r.DecodeBytes(yys3074Slc, true, true)
		yys3074 := string(yys3074Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3074 {
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3075 := &x.LabelSelector
				yym3076 := z.DecBinary()
				_ = yym3076
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3075) {
				} else {
					z.DecFallback(yyv3075, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3077 := &x.FieldSelector
				yym3078 := z.DecBinary()
				_ = yym3078
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3077) {
				} else {
					z.DecFallback(yyv3077, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3082 := z.DecBinary()
				_ = yym3082
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3074)
		} // end switch yys3074
	} // end for yyj3074
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3085 int
	var yyb3085 bool
	var yyhl3085 bool = l >= 0
	yyj3085++
	if yyhl3085 {
		yyb3085 = yyj3085 > l
	} else {
		yyb3085 = r.CheckBreak()
	}
	if yyb3085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3086 := &x.LabelSelector
		yym3087 := z.DecBinary()
		_ = yym3087
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3086) {
		} else {
			z.DecFallback(yyv3086, true)
		}
	}
	yyj3085++
	if yyhl3085 {
		yyb3085 = yyj3085 > l
	} else {
		yyb3085 = r.CheckBreak()
	}
	if yyb3085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3088 := &x.FieldSelector
		yym3089 := z.DecBinary()
		_ = yym3089
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3088) {
		} else {
			z.DecFallback(yyv3088, true)
		}
	}
	yyj3085++
	if yyhl3085 {
		yyb3085 = yyj3085 > l
	} else {
		yyb3085 = r.CheckBreak()
	}
	if yyb3085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3085++
	if yyhl3085 {
		yyb3085 = yyj3085 > l
	} else {
		yyb3085 = r.CheckBreak()
	}
	if yyb3085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3085++
	if yyhl3085 {
		yyb3085 = yyj3085 > l
	} else {
		yyb3085 = r.CheckBreak()
	}
	if yyb3085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3093 := z.DecBinary()
		_ = yym3093
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3085++
	if yyhl3085 {
		yyb3085 = yyj3085 > l
	} else {
		yyb3085 = r.CheckBreak()
	}
	if yyb3085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3085++
	if yyhl3085 {
		yyb3085 = yyj3085 > l
	} else {
		yyb3085 = r.CheckBreak()
	}
	if yyb3085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3085++
		if yyhl3085 {
			yyb3085 = yyj3085 > l
		} else {
			yyb3085 = r.CheckBreak()
		}
		if yyb3085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3096 := z.EncBinary()
		_ = yym3096
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3097 := !z.EncBinary()
			yy2arr3097 := z.EncBasicHandle().StructToArray
			var yyq3097 [10]bool
			_, _, _ = yysep3097, yyq3097, yy2arr3097
			const yyr3097 bool = false
			yyq3097[8] = x.Kind != ""
			yyq3097[9] = x.APIVersion != ""
			var yynn3097 int
			if yyr3097 || yy2arr3097 {
				r.EncodeArrayStart(10)
			} else {
				yynn3097 = 8
				for _, b := range yyq3097 {
					if b {
						yynn3097++
					}
				}
				r.EncodeMapStart(yynn3097)
				yynn3097 = 0
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3099 := z.EncBinary()
				_ = yym3099
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3100 := z.EncBinary()
				_ = yym3100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3102 := z.EncBinary()
				_ = yym3102
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3103 := z.EncBinary()
				_ = yym3103
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3105 := z.EncBinary()
				_ = yym3105
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3106 := z.EncBinary()
				_ = yym3106
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3108 := *x.SinceSeconds
					yym3109 := z.EncBinary()
					_ = yym3109
					if false {
					} else {
						r.EncodeInt(int64(yy3108))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3110 := *x.SinceSeconds
					yym3111 := z.EncBinary()
					_ = yym3111
					if false {
					} else {
						r.EncodeInt(int64(yy3110))
					}
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3113 := z.EncBinary()
					_ = yym3113
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3113 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3113 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3114 := z.EncBinary()
					_ = yym3114
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3114 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3114 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3116 := z.EncBinary()
				_ = yym3116
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3117 := z.EncBinary()
				_ = yym3117
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3119 := *x.TailLines
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else {
						r.EncodeInt(int64(yy3119))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3121 := *x.TailLines
					yym3122 := z.EncBinary()
					_ = yym3122
					if false {
					} else {
						r.EncodeInt(int64(yy3121))
					}
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3124 := *x.LimitBytes
					yym3125 := z.EncBinary()
					_ = yym3125
					if false {
					} else {
						r.EncodeInt(int64(yy3124))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3126 := *x.LimitBytes
					yym3127 := z.EncBinary()
					_ = yym3127
					if false {
					} else {
						r.EncodeInt(int64(yy3126))
					}
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3097[8] {
					yym3129 := z.EncBinary()
					_ = yym3129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3097[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3130 := z.EncBinary()
					_ = yym3130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3097[9] {
					yym3132 := z.EncBinary()
					_ = yym3132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3097[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3133 := z.EncBinary()
					_ = yym3133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3097 || yy2arr3097 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3134 := z.DecBinary()
	_ = yym3134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3135 := r.ContainerType()
		if yyct3135 == codecSelferValueTypeMap1234 {
			yyl3135 := r.ReadMapStart()
			if yyl3135 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3135, d)
			}
		} else if yyct3135 == codecSelferValueTypeArray1234 {
			yyl3135 := r.ReadArrayStart()
			if yyl3135 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3135, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3136Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3136Slc
	var yyhl3136 bool = l >= 0
	for yyj3136 := 0; ; yyj3136++ {
		if yyhl3136 {
			if yyj3136 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3136Slc = r.DecodeBytes(yys3136Slc, true, true)
		yys3136 := string(yys3136Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3136 {
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3141 := z.DecBinary()
				_ = yym3141
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3143 := z.DecBinary()
				_ = yym3143
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3143 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3143 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3146 := z.DecBinary()
				_ = yym3146
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3148 := z.DecBinary()
				_ = yym3148
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3136)
		} // end switch yys3136
	} // end for yyj3136
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3151 int
	var yyb3151 bool
	var yyhl3151 bool = l >= 0
	yyj3151++
	if yyhl3151 {
		yyb3151 = yyj3151 > l
	} else {
		yyb3151 = r.CheckBreak()
	}
	if yyb3151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3151++
	if yyhl3151 {
		yyb3151 = yyj3151 > l
	} else {
		yyb3151 = r.CheckBreak()
	}
	if yyb3151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3151++
	if yyhl3151 {
		yyb3151 = yyj3151 > l
	} else {
		yyb3151 = r.CheckBreak()
	}
	if yyb3151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3151++
	if yyhl3151 {
		yyb3151 = yyj3151 > l
	} else {
		yyb3151 = r.CheckBreak()
	}
	if yyb3151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3156 := z.DecBinary()
		_ = yym3156
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3151++
	if yyhl3151 {
		yyb3151 = yyj3151 > l
	} else {
		yyb3151 = r.CheckBreak()
	}
	if yyb3151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3158 := z.DecBinary()
		_ = yym3158
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3158 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3158 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3151++
	if yyhl3151 {
		yyb3151 = yyj3151 > l
	} else {
		yyb3151 = r.CheckBreak()
	}
	if yyb3151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3151++
	if yyhl3151 {
		yyb3151 = yyj3151 > l
	} else {
		yyb3151 = r.CheckBreak()
	}
	if yyb3151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3161 := z.DecBinary()
		_ = yym3161
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3151++
	if yyhl3151 {
		yyb3151 = yyj3151 > l
	} else {
		yyb3151 = r.CheckBreak()
	}
	if yyb3151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3163 := z.DecBinary()
		_ = yym3163
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	yyj3151++
	if yyhl3151 {
		yyb3151 = yyj3151 > l
	} else {
		yyb3151 = r.CheckBreak()
	}
	if yyb3151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3151++
	if yyhl3151 {
		yyb3151 = yyj3151 > l
	} else {
		yyb3151 = r.CheckBreak()
	}
	if yyb3151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3151++
		if yyhl3151 {
			yyb3151 = yyj3151 > l
		} else {
			yyb3151 = r.CheckBreak()
		}
		if yyb3151 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3151-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3166 := z.EncBinary()
		_ = yym3166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3167 := !z.EncBinary()
			yy2arr3167 := z.EncBasicHandle().StructToArray
			var yyq3167 [7]bool
			_, _, _ = yysep3167, yyq3167, yy2arr3167
			const yyr3167 bool = false
			yyq3167[0] = x.Stdin != false
			yyq3167[1] = x.Stdout != false
			yyq3167[2] = x.Stderr != false
			yyq3167[3] = x.TTY != false
			yyq3167[4] = x.Container != ""
			yyq3167[5] = x.Kind != ""
			yyq3167[6] = x.APIVersion != ""
			var yynn3167 int
			if yyr3167 || yy2arr3167 {
				r.EncodeArrayStart(7)
			} else {
				yynn3167 = 0
				for _, b := range yyq3167 {
					if b {
						yynn3167++
					}
				}
				r.EncodeMapStart(yynn3167)
				yynn3167 = 0
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[0] {
					yym3169 := z.EncBinary()
					_ = yym3169
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3167[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3170 := z.EncBinary()
					_ = yym3170
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[1] {
					yym3172 := z.EncBinary()
					_ = yym3172
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3167[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3173 := z.EncBinary()
					_ = yym3173
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[2] {
					yym3175 := z.EncBinary()
					_ = yym3175
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[3] {
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3167[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[4] {
					yym3181 := z.EncBinary()
					_ = yym3181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3167[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3182 := z.EncBinary()
					_ = yym3182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[5] {
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3167[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[6] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3167[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3189 := z.DecBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3190 := r.ContainerType()
		if yyct3190 == codecSelferValueTypeMap1234 {
			yyl3190 := r.ReadMapStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3190, d)
			}
		} else if yyct3190 == codecSelferValueTypeArray1234 {
			yyl3190 := r.ReadArrayStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3191Slc
	var yyhl3191 bool = l >= 0
	for yyj3191 := 0; ; yyj3191++ {
		if yyhl3191 {
			if yyj3191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3191Slc = r.DecodeBytes(yys3191Slc, true, true)
		yys3191 := string(yys3191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3191 {
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3191)
		} // end switch yys3191
	} // end for yyj3191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3199 int
	var yyb3199 bool
	var yyhl3199 bool = l >= 0
	yyj3199++
	if yyhl3199 {
		yyb3199 = yyj3199 > l
	} else {
		yyb3199 = r.CheckBreak()
	}
	if yyb3199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3199++
	if yyhl3199 {
		yyb3199 = yyj3199 > l
	} else {
		yyb3199 = r.CheckBreak()
	}
	if yyb3199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3199++
	if yyhl3199 {
		yyb3199 = yyj3199 > l
	} else {
		yyb3199 = r.CheckBreak()
	}
	if yyb3199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3199++
	if yyhl3199 {
		yyb3199 = yyj3199 > l
	} else {
		yyb3199 = r.CheckBreak()
	}
	if yyb3199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3199++
	if yyhl3199 {
		yyb3199 = yyj3199 > l
	} else {
		yyb3199 = r.CheckBreak()
	}
	if yyb3199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3199++
	if yyhl3199 {
		yyb3199 = yyj3199 > l
	} else {
		yyb3199 = r.CheckBreak()
	}
	if yyb3199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3199++
	if yyhl3199 {
		yyb3199 = yyj3199 > l
	} else {
		yyb3199 = r.CheckBreak()
	}
	if yyb3199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3199++
		if yyhl3199 {
			yyb3199 = yyj3199 > l
		} else {
			yyb3199 = r.CheckBreak()
		}
		if yyb3199 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3199-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3207 := z.EncBinary()
		_ = yym3207
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3208 := !z.EncBinary()
			yy2arr3208 := z.EncBasicHandle().StructToArray
			var yyq3208 [8]bool
			_, _, _ = yysep3208, yyq3208, yy2arr3208
			const yyr3208 bool = false
			yyq3208[6] = x.Kind != ""
			yyq3208[7] = x.APIVersion != ""
			var yynn3208 int
			if yyr3208 || yy2arr3208 {
				r.EncodeArrayStart(8)
			} else {
				yynn3208 = 6
				for _, b := range yyq3208 {
					if b {
						yynn3208++
					}
				}
				r.EncodeMapStart(yynn3208)
				yynn3208 = 0
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3210 := z.EncBinary()
				_ = yym3210
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3211 := z.EncBinary()
				_ = yym3211
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3213 := z.EncBinary()
				_ = yym3213
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3214 := z.EncBinary()
				_ = yym3214
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3216 := z.EncBinary()
				_ = yym3216
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3217 := z.EncBinary()
				_ = yym3217
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3219 := z.EncBinary()
				_ = yym3219
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3220 := z.EncBinary()
				_ = yym3220
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3222 := z.EncBinary()
				_ = yym3222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3223 := z.EncBinary()
				_ = yym3223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3208[6] {
					yym3228 := z.EncBinary()
					_ = yym3228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3208[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3229 := z.EncBinary()
					_ = yym3229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3208[7] {
					yym3231 := z.EncBinary()
					_ = yym3231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3208[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3232 := z.EncBinary()
					_ = yym3232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3233 := z.DecBinary()
	_ = yym3233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3234 := r.ContainerType()
		if yyct3234 == codecSelferValueTypeMap1234 {
			yyl3234 := r.ReadMapStart()
			if yyl3234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3234, d)
			}
		} else if yyct3234 == codecSelferValueTypeArray1234 {
			yyl3234 := r.ReadArrayStart()
			if yyl3234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3235Slc
	var yyhl3235 bool = l >= 0
	for yyj3235 := 0; ; yyj3235++ {
		if yyhl3235 {
			if yyj3235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3235Slc = r.DecodeBytes(yys3235Slc, true, true)
		yys3235 := string(yys3235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3235 {
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3241 := &x.Command
				yym3242 := z.DecBinary()
				_ = yym3242
				if false {
				} else {
					z.F.DecSliceStringX(yyv3241, false, d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3235)
		} // end switch yys3235
	} // end for yyj3235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3245 int
	var yyb3245 bool
	var yyhl3245 bool = l >= 0
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3251 := &x.Command
		yym3252 := z.DecBinary()
		_ = yym3252
		if false {
		} else {
			z.F.DecSliceStringX(yyv3251, false, d)
		}
	}
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3245++
		if yyhl3245 {
			yyb3245 = yyj3245 > l
		} else {
			yyb3245 = r.CheckBreak()
		}
		if yyb3245 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3245-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3255 := z.EncBinary()
		_ = yym3255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3256 := !z.EncBinary()
			yy2arr3256 := z.EncBasicHandle().StructToArray
			var yyq3256 [3]bool
			_, _, _ = yysep3256, yyq3256, yy2arr3256
			const yyr3256 bool = false
			yyq3256[1] = x.Kind != ""
			yyq3256[2] = x.APIVersion != ""
			var yynn3256 int
			if yyr3256 || yy2arr3256 {
				r.EncodeArrayStart(3)
			} else {
				yynn3256 = 1
				for _, b := range yyq3256 {
					if b {
						yynn3256++
					}
				}
				r.EncodeMapStart(yynn3256)
				yynn3256 = 0
			}
			if yyr3256 || yy2arr3256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3258 := z.EncBinary()
				_ = yym3258
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3259 := z.EncBinary()
				_ = yym3259
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3256 || yy2arr3256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3256[1] {
					yym3261 := z.EncBinary()
					_ = yym3261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3262 := z.EncBinary()
					_ = yym3262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3256 || yy2arr3256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3256[2] {
					yym3264 := z.EncBinary()
					_ = yym3264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3256[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3256 || yy2arr3256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3266 := z.DecBinary()
	_ = yym3266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3267 := r.ContainerType()
		if yyct3267 == codecSelferValueTypeMap1234 {
			yyl3267 := r.ReadMapStart()
			if yyl3267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3267, d)
			}
		} else if yyct3267 == codecSelferValueTypeArray1234 {
			yyl3267 := r.ReadArrayStart()
			if yyl3267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3268Slc
	var yyhl3268 bool = l >= 0
	for yyj3268 := 0; ; yyj3268++ {
		if yyhl3268 {
			if yyj3268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3268Slc = r.DecodeBytes(yys3268Slc, true, true)
		yys3268 := string(yys3268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3268 {
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3268)
		} // end switch yys3268
	} // end for yyj3268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3272 int
	var yyb3272 bool
	var yyhl3272 bool = l >= 0
	yyj3272++
	if yyhl3272 {
		yyb3272 = yyj3272 > l
	} else {
		yyb3272 = r.CheckBreak()
	}
	if yyb3272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3272++
	if yyhl3272 {
		yyb3272 = yyj3272 > l
	} else {
		yyb3272 = r.CheckBreak()
	}
	if yyb3272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3272++
	if yyhl3272 {
		yyb3272 = yyj3272 > l
	} else {
		yyb3272 = r.CheckBreak()
	}
	if yyb3272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3272++
		if yyhl3272 {
			yyb3272 = yyj3272 > l
		} else {
			yyb3272 = r.CheckBreak()
		}
		if yyb3272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3276 := z.EncBinary()
		_ = yym3276
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3277 := !z.EncBinary()
			yy2arr3277 := z.EncBasicHandle().StructToArray
			var yyq3277 [7]bool
			_, _, _ = yysep3277, yyq3277, yy2arr3277
			const yyr3277 bool = false
			yyq3277[0] = x.Kind != ""
			yyq3277[1] = x.Namespace != ""
			yyq3277[2] = x.Name != ""
			yyq3277[3] = x.UID != ""
			yyq3277[4] = x.APIVersion != ""
			yyq3277[5] = x.ResourceVersion != ""
			yyq3277[6] = x.FieldPath != ""
			var yynn3277 int
			if yyr3277 || yy2arr3277 {
				r.EncodeArrayStart(7)
			} else {
				yynn3277 = 0
				for _, b := range yyq3277 {
					if b {
						yynn3277++
					}
				}
				r.EncodeMapStart(yynn3277)
				yynn3277 = 0
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[0] {
					yym3279 := z.EncBinary()
					_ = yym3279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[1] {
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3283 := z.EncBinary()
					_ = yym3283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[2] {
					yym3285 := z.EncBinary()
					_ = yym3285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3286 := z.EncBinary()
					_ = yym3286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[3] {
					yym3288 := z.EncBinary()
					_ = yym3288
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3289 := z.EncBinary()
					_ = yym3289
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[4] {
					yym3291 := z.EncBinary()
					_ = yym3291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3292 := z.EncBinary()
					_ = yym3292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[5] {
					yym3294 := z.EncBinary()
					_ = yym3294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[6] {
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3298 := z.EncBinary()
					_ = yym3298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3299 := z.DecBinary()
	_ = yym3299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3300 := r.ContainerType()
		if yyct3300 == codecSelferValueTypeMap1234 {
			yyl3300 := r.ReadMapStart()
			if yyl3300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3300, d)
			}
		} else if yyct3300 == codecSelferValueTypeArray1234 {
			yyl3300 := r.ReadArrayStart()
			if yyl3300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3301Slc
	var yyhl3301 bool = l >= 0
	for yyj3301 := 0; ; yyj3301++ {
		if yyhl3301 {
			if yyj3301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3301Slc = r.DecodeBytes(yys3301Slc, true, true)
		yys3301 := string(yys3301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3301 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3301)
		} // end switch yys3301
	} // end for yyj3301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3309 int
	var yyb3309 bool
	var yyhl3309 bool = l >= 0
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3309++
		if yyhl3309 {
			yyb3309 = yyj3309 > l
		} else {
			yyb3309 = r.CheckBreak()
		}
		if yyb3309 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3309-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3317 := z.EncBinary()
		_ = yym3317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3318 := !z.EncBinary()
			yy2arr3318 := z.EncBasicHandle().StructToArray
			var yyq3318 [1]bool
			_, _, _ = yysep3318, yyq3318, yy2arr3318
			const yyr3318 bool = false
			var yynn3318 int
			if yyr3318 || yy2arr3318 {
				r.EncodeArrayStart(1)
			} else {
				yynn3318 = 1
				for _, b := range yyq3318 {
					if b {
						yynn3318++
					}
				}
				r.EncodeMapStart(yynn3318)
				yynn3318 = 0
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3320 := z.EncBinary()
				_ = yym3320
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3321 := z.EncBinary()
				_ = yym3321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3322 := z.DecBinary()
	_ = yym3322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3323 := r.ContainerType()
		if yyct3323 == codecSelferValueTypeMap1234 {
			yyl3323 := r.ReadMapStart()
			if yyl3323 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3323, d)
			}
		} else if yyct3323 == codecSelferValueTypeArray1234 {
			yyl3323 := r.ReadArrayStart()
			if yyl3323 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3323, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3324Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3324Slc
	var yyhl3324 bool = l >= 0
	for yyj3324 := 0; ; yyj3324++ {
		if yyhl3324 {
			if yyj3324 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3324Slc = r.DecodeBytes(yys3324Slc, true, true)
		yys3324 := string(yys3324Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3324 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3324)
		} // end switch yys3324
	} // end for yyj3324
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3326 int
	var yyb3326 bool
	var yyhl3326 bool = l >= 0
	yyj3326++
	if yyhl3326 {
		yyb3326 = yyj3326 > l
	} else {
		yyb3326 = r.CheckBreak()
	}
	if yyb3326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3326++
		if yyhl3326 {
			yyb3326 = yyj3326 > l
		} else {
			yyb3326 = r.CheckBreak()
		}
		if yyb3326 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3326-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3328 := z.EncBinary()
		_ = yym3328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3329 := !z.EncBinary()
			yy2arr3329 := z.EncBasicHandle().StructToArray
			var yyq3329 [3]bool
			_, _, _ = yysep3329, yyq3329, yy2arr3329
			const yyr3329 bool = false
			yyq3329[0] = true
			yyq3329[1] = x.Kind != ""
			yyq3329[2] = x.APIVersion != ""
			var yynn3329 int
			if yyr3329 || yy2arr3329 {
				r.EncodeArrayStart(3)
			} else {
				yynn3329 = 0
				for _, b := range yyq3329 {
					if b {
						yynn3329++
					}
				}
				r.EncodeMapStart(yynn3329)
				yynn3329 = 0
			}
			if yyr3329 || yy2arr3329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3329[0] {
					yy3331 := &x.Reference
					yy3331.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3332 := &x.Reference
					yy3332.CodecEncodeSelf(e)
				}
			}
			if yyr3329 || yy2arr3329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3329[1] {
					yym3334 := z.EncBinary()
					_ = yym3334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3329[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3335 := z.EncBinary()
					_ = yym3335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3329 || yy2arr3329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3329[2] {
					yym3337 := z.EncBinary()
					_ = yym3337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3329[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3338 := z.EncBinary()
					_ = yym3338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3329 || yy2arr3329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3339 := z.DecBinary()
	_ = yym3339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3340 := r.ContainerType()
		if yyct3340 == codecSelferValueTypeMap1234 {
			yyl3340 := r.ReadMapStart()
			if yyl3340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3340, d)
			}
		} else if yyct3340 == codecSelferValueTypeArray1234 {
			yyl3340 := r.ReadArrayStart()
			if yyl3340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3341Slc
	var yyhl3341 bool = l >= 0
	for yyj3341 := 0; ; yyj3341++ {
		if yyhl3341 {
			if yyj3341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3341Slc = r.DecodeBytes(yys3341Slc, true, true)
		yys3341 := string(yys3341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3341 {
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3342 := &x.Reference
				yyv3342.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3341)
		} // end switch yys3341
	} // end for yyj3341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3345 int
	var yyb3345 bool
	var yyhl3345 bool = l >= 0
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3346 := &x.Reference
		yyv3346.CodecDecodeSelf(d)
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3345++
		if yyhl3345 {
			yyb3345 = yyj3345 > l
		} else {
			yyb3345 = r.CheckBreak()
		}
		if yyb3345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3349 := z.EncBinary()
		_ = yym3349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3350 := !z.EncBinary()
			yy2arr3350 := z.EncBasicHandle().StructToArray
			var yyq3350 [2]bool
			_, _, _ = yysep3350, yyq3350, yy2arr3350
			const yyr3350 bool = false
			yyq3350[0] = x.Component != ""
			yyq3350[1] = x.Host != ""
			var yynn3350 int
			if yyr3350 || yy2arr3350 {
				r.EncodeArrayStart(2)
			} else {
				yynn3350 = 0
				for _, b := range yyq3350 {
					if b {
						yynn3350++
					}
				}
				r.EncodeMapStart(yynn3350)
				yynn3350 = 0
			}
			if yyr3350 || yy2arr3350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3350[0] {
					yym3352 := z.EncBinary()
					_ = yym3352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3350[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3353 := z.EncBinary()
					_ = yym3353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3350 || yy2arr3350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3350[1] {
					yym3355 := z.EncBinary()
					_ = yym3355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3350[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3356 := z.EncBinary()
					_ = yym3356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3350 || yy2arr3350 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3357 := z.DecBinary()
	_ = yym3357
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3358 := r.ContainerType()
		if yyct3358 == codecSelferValueTypeMap1234 {
			yyl3358 := r.ReadMapStart()
			if yyl3358 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3358, d)
			}
		} else if yyct3358 == codecSelferValueTypeArray1234 {
			yyl3358 := r.ReadArrayStart()
			if yyl3358 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3358, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3359Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3359Slc
	var yyhl3359 bool = l >= 0
	for yyj3359 := 0; ; yyj3359++ {
		if yyhl3359 {
			if yyj3359 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3359Slc = r.DecodeBytes(yys3359Slc, true, true)
		yys3359 := string(yys3359Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3359 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3359)
		} // end switch yys3359
	} // end for yyj3359
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3362 int
	var yyb3362 bool
	var yyhl3362 bool = l >= 0
	yyj3362++
	if yyhl3362 {
		yyb3362 = yyj3362 > l
	} else {
		yyb3362 = r.CheckBreak()
	}
	if yyb3362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3362++
	if yyhl3362 {
		yyb3362 = yyj3362 > l
	} else {
		yyb3362 = r.CheckBreak()
	}
	if yyb3362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3362++
		if yyhl3362 {
			yyb3362 = yyj3362 > l
		} else {
			yyb3362 = r.CheckBreak()
		}
		if yyb3362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3365 := z.EncBinary()
		_ = yym3365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3366 := !z.EncBinary()
			yy2arr3366 := z.EncBasicHandle().StructToArray
			var yyq3366 [11]bool
			_, _, _ = yysep3366, yyq3366, yy2arr3366
			const yyr3366 bool = false
			yyq3366[0] = true
			yyq3366[1] = true
			yyq3366[2] = x.Reason != ""
			yyq3366[3] = x.Message != ""
			yyq3366[4] = true
			yyq3366[5] = true
			yyq3366[6] = true
			yyq3366[7] = x.Count != 0
			yyq3366[8] = x.Type != ""
			yyq3366[9] = x.Kind != ""
			yyq3366[10] = x.APIVersion != ""
			var yynn3366 int
			if yyr3366 || yy2arr3366 {
				r.EncodeArrayStart(11)
			} else {
				yynn3366 = 0
				for _, b := range yyq3366 {
					if b {
						yynn3366++
					}
				}
				r.EncodeMapStart(yynn3366)
				yynn3366 = 0
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[0] {
					yy3368 := &x.ObjectMeta
					yy3368.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3369 := &x.ObjectMeta
					yy3369.CodecEncodeSelf(e)
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[1] {
					yy3371 := &x.InvolvedObject
					yy3371.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3372 := &x.InvolvedObject
					yy3372.CodecEncodeSelf(e)
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[2] {
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3366[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3375 := z.EncBinary()
					_ = yym3375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[3] {
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3366[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3378 := z.EncBinary()
					_ = yym3378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[4] {
					yy3380 := &x.Source
					yy3380.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3381 := &x.Source
					yy3381.CodecEncodeSelf(e)
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[5] {
					yy3383 := &x.FirstTimestamp
					yym3384 := z.EncBinary()
					_ = yym3384
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3383) {
					} else if yym3384 {
						z.EncBinaryMarshal(yy3383)
					} else if !yym3384 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3383)
					} else {
						z.EncFallback(yy3383)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3385 := &x.FirstTimestamp
					yym3386 := z.EncBinary()
					_ = yym3386
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3385) {
					} else if yym3386 {
						z.EncBinaryMarshal(yy3385)
					} else if !yym3386 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3385)
					} else {
						z.EncFallback(yy3385)
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[6] {
					yy3388 := &x.LastTimestamp
					yym3389 := z.EncBinary()
					_ = yym3389
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3388) {
					} else if yym3389 {
						z.EncBinaryMarshal(yy3388)
					} else if !yym3389 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3388)
					} else {
						z.EncFallback(yy3388)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3390 := &x.LastTimestamp
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3390) {
					} else if yym3391 {
						z.EncBinaryMarshal(yy3390)
					} else if !yym3391 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3390)
					} else {
						z.EncFallback(yy3390)
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[7] {
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3366[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3394 := z.EncBinary()
					_ = yym3394
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[8] {
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3366[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[9] {
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3366[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3400 := z.EncBinary()
					_ = yym3400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[10] {
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3366[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3403 := z.EncBinary()
					_ = yym3403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3404 := z.DecBinary()
	_ = yym3404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3405 := r.ContainerType()
		if yyct3405 == codecSelferValueTypeMap1234 {
			yyl3405 := r.ReadMapStart()
			if yyl3405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3405, d)
			}
		} else if yyct3405 == codecSelferValueTypeArray1234 {
			yyl3405 := r.ReadArrayStart()
			if yyl3405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3406Slc
	var yyhl3406 bool = l >= 0
	for yyj3406 := 0; ; yyj3406++ {
		if yyhl3406 {
			if yyj3406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3406Slc = r.DecodeBytes(yys3406Slc, true, true)
		yys3406 := string(yys3406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3406 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3407 := &x.ObjectMeta
				yyv3407.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3408 := &x.InvolvedObject
				yyv3408.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3411 := &x.Source
				yyv3411.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3412 := &x.FirstTimestamp
				yym3413 := z.DecBinary()
				_ = yym3413
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3412) {
				} else if yym3413 {
					z.DecBinaryUnmarshal(yyv3412)
				} else if !yym3413 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3412)
				} else {
					z.DecFallback(yyv3412, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3414 := &x.LastTimestamp
				yym3415 := z.DecBinary()
				_ = yym3415
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3414) {
				} else if yym3415 {
					z.DecBinaryUnmarshal(yyv3414)
				} else if !yym3415 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3414)
				} else {
					z.DecFallback(yyv3414, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3406)
		} // end switch yys3406
	} // end for yyj3406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3420 int
	var yyb3420 bool
	var yyhl3420 bool = l >= 0
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3421 := &x.ObjectMeta
		yyv3421.CodecDecodeSelf(d)
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3422 := &x.InvolvedObject
		yyv3422.CodecDecodeSelf(d)
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3425 := &x.Source
		yyv3425.CodecDecodeSelf(d)
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3426 := &x.FirstTimestamp
		yym3427 := z.DecBinary()
		_ = yym3427
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3426) {
		} else if yym3427 {
			z.DecBinaryUnmarshal(yyv3426)
		} else if !yym3427 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3426)
		} else {
			z.DecFallback(yyv3426, false)
		}
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3428 := &x.LastTimestamp
		yym3429 := z.DecBinary()
		_ = yym3429
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3428) {
		} else if yym3429 {
			z.DecBinaryUnmarshal(yyv3428)
		} else if !yym3429 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3428)
		} else {
			z.DecFallback(yyv3428, false)
		}
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3420++
		if yyhl3420 {
			yyb3420 = yyj3420 > l
		} else {
			yyb3420 = r.CheckBreak()
		}
		if yyb3420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3434 := z.EncBinary()
		_ = yym3434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3435 := !z.EncBinary()
			yy2arr3435 := z.EncBasicHandle().StructToArray
			var yyq3435 [4]bool
			_, _, _ = yysep3435, yyq3435, yy2arr3435
			const yyr3435 bool = false
			yyq3435[0] = true
			yyq3435[2] = x.Kind != ""
			yyq3435[3] = x.APIVersion != ""
			var yynn3435 int
			if yyr3435 || yy2arr3435 {
				r.EncodeArrayStart(4)
			} else {
				yynn3435 = 1
				for _, b := range yyq3435 {
					if b {
						yynn3435++
					}
				}
				r.EncodeMapStart(yynn3435)
				yynn3435 = 0
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[0] {
					yy3437 := &x.ListMeta
					yym3438 := z.EncBinary()
					_ = yym3438
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3437) {
					} else {
						z.EncFallback(yy3437)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3439 := &x.ListMeta
					yym3440 := z.EncBinary()
					_ = yym3440
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3439) {
					} else {
						z.EncFallback(yy3439)
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3442 := z.EncBinary()
					_ = yym3442
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3443 := z.EncBinary()
					_ = yym3443
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[2] {
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[3] {
					yym3448 := z.EncBinary()
					_ = yym3448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3435[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3450 := z.DecBinary()
	_ = yym3450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3451 := r.ContainerType()
		if yyct3451 == codecSelferValueTypeMap1234 {
			yyl3451 := r.ReadMapStart()
			if yyl3451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3451, d)
			}
		} else if yyct3451 == codecSelferValueTypeArray1234 {
			yyl3451 := r.ReadArrayStart()
			if yyl3451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3452Slc
	var yyhl3452 bool = l >= 0
	for yyj3452 := 0; ; yyj3452++ {
		if yyhl3452 {
			if yyj3452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3452Slc = r.DecodeBytes(yys3452Slc, true, true)
		yys3452 := string(yys3452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3452 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3453 := &x.ListMeta
				yym3454 := z.DecBinary()
				_ = yym3454
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3453) {
				} else {
					z.DecFallback(yyv3453, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3455 := &x.Items
				yym3456 := z.DecBinary()
				_ = yym3456
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3455), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3452)
		} // end switch yys3452
	} // end for yyj3452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3459 int
	var yyb3459 bool
	var yyhl3459 bool = l >= 0
	yyj3459++
	if yyhl3459 {
		yyb3459 = yyj3459 > l
	} else {
		yyb3459 = r.CheckBreak()
	}
	if yyb3459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3460 := &x.ListMeta
		yym3461 := z.DecBinary()
		_ = yym3461
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3460) {
		} else {
			z.DecFallback(yyv3460, false)
		}
	}
	yyj3459++
	if yyhl3459 {
		yyb3459 = yyj3459 > l
	} else {
		yyb3459 = r.CheckBreak()
	}
	if yyb3459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3462 := &x.Items
		yym3463 := z.DecBinary()
		_ = yym3463
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3462), d)
		}
	}
	yyj3459++
	if yyhl3459 {
		yyb3459 = yyj3459 > l
	} else {
		yyb3459 = r.CheckBreak()
	}
	if yyb3459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3459++
	if yyhl3459 {
		yyb3459 = yyj3459 > l
	} else {
		yyb3459 = r.CheckBreak()
	}
	if yyb3459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3459++
		if yyhl3459 {
			yyb3459 = yyj3459 > l
		} else {
			yyb3459 = r.CheckBreak()
		}
		if yyb3459 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3459-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3466 := z.EncBinary()
		_ = yym3466
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3467 := !z.EncBinary()
			yy2arr3467 := z.EncBasicHandle().StructToArray
			var yyq3467 [4]bool
			_, _, _ = yysep3467, yyq3467, yy2arr3467
			const yyr3467 bool = false
			yyq3467[0] = true
			yyq3467[2] = x.Kind != ""
			yyq3467[3] = x.APIVersion != ""
			var yynn3467 int
			if yyr3467 || yy2arr3467 {
				r.EncodeArrayStart(4)
			} else {
				yynn3467 = 1
				for _, b := range yyq3467 {
					if b {
						yynn3467++
					}
				}
				r.EncodeMapStart(yynn3467)
				yynn3467 = 0
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3467[0] {
					yy3469 := &x.ListMeta
					yym3470 := z.EncBinary()
					_ = yym3470
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3469) {
					} else {
						z.EncFallback(yy3469)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3467[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3471 := &x.ListMeta
					yym3472 := z.EncBinary()
					_ = yym3472
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3471) {
					} else {
						z.EncFallback(yy3471)
					}
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3475 := z.EncBinary()
					_ = yym3475
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3467[2] {
					yym3477 := z.EncBinary()
					_ = yym3477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3467[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3467[3] {
					yym3480 := z.EncBinary()
					_ = yym3480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3467[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3481 := z.EncBinary()
					_ = yym3481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3482 := z.DecBinary()
	_ = yym3482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3483 := r.ContainerType()
		if yyct3483 == codecSelferValueTypeMap1234 {
			yyl3483 := r.ReadMapStart()
			if yyl3483 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3483, d)
			}
		} else if yyct3483 == codecSelferValueTypeArray1234 {
			yyl3483 := r.ReadArrayStart()
			if yyl3483 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3483, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3484Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3484Slc
	var yyhl3484 bool = l >= 0
	for yyj3484 := 0; ; yyj3484++ {
		if yyhl3484 {
			if yyj3484 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3484Slc = r.DecodeBytes(yys3484Slc, true, true)
		yys3484 := string(yys3484Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3484 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3485 := &x.ListMeta
				yym3486 := z.DecBinary()
				_ = yym3486
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3485) {
				} else {
					z.DecFallback(yyv3485, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3487 := &x.Items
				yym3488 := z.DecBinary()
				_ = yym3488
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3487), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3484)
		} // end switch yys3484
	} // end for yyj3484
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3491 int
	var yyb3491 bool
	var yyhl3491 bool = l >= 0
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3492 := &x.ListMeta
		yym3493 := z.DecBinary()
		_ = yym3493
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3492) {
		} else {
			z.DecFallback(yyv3492, false)
		}
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3494 := &x.Items
		yym3495 := z.DecBinary()
		_ = yym3495
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3494), d)
		}
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3491++
		if yyhl3491 {
			yyb3491 = yyj3491 > l
		} else {
			yyb3491 = r.CheckBreak()
		}
		if yyb3491 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3491-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3498 := z.EncBinary()
	_ = yym3498
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3499 := z.DecBinary()
	_ = yym3499
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3500 := z.EncBinary()
		_ = yym3500
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3501 := !z.EncBinary()
			yy2arr3501 := z.EncBasicHandle().StructToArray
			var yyq3501 [6]bool
			_, _, _ = yysep3501, yyq3501, yy2arr3501
			const yyr3501 bool = false
			yyq3501[0] = x.Type != ""
			yyq3501[1] = len(x.Max) != 0
			yyq3501[2] = len(x.Min) != 0
			yyq3501[3] = len(x.Default) != 0
			yyq3501[4] = len(x.DefaultRequest) != 0
			yyq3501[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3501 int
			if yyr3501 || yy2arr3501 {
				r.EncodeArrayStart(6)
			} else {
				yynn3501 = 0
				for _, b := range yyq3501 {
					if b {
						yynn3501++
					}
				}
				r.EncodeMapStart(yynn3501)
				yynn3501 = 0
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3501[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3501[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3501[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3501[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3501[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3501[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3508 := z.DecBinary()
	_ = yym3508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3509 := r.ContainerType()
		if yyct3509 == codecSelferValueTypeMap1234 {
			yyl3509 := r.ReadMapStart()
			if yyl3509 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3509, d)
			}
		} else if yyct3509 == codecSelferValueTypeArray1234 {
			yyl3509 := r.ReadArrayStart()
			if yyl3509 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3509, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3510Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3510Slc
	var yyhl3510 bool = l >= 0
	for yyj3510 := 0; ; yyj3510++ {
		if yyhl3510 {
			if yyj3510 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3510Slc = r.DecodeBytes(yys3510Slc, true, true)
		yys3510 := string(yys3510Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3510 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3512 := &x.Max
				yyv3512.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3513 := &x.Min
				yyv3513.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3514 := &x.Default
				yyv3514.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3515 := &x.DefaultRequest
				yyv3515.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3516 := &x.MaxLimitRequestRatio
				yyv3516.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3510)
		} // end switch yys3510
	} // end for yyj3510
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3517 int
	var yyb3517 bool
	var yyhl3517 bool = l >= 0
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3519 := &x.Max
		yyv3519.CodecDecodeSelf(d)
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3520 := &x.Min
		yyv3520.CodecDecodeSelf(d)
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3521 := &x.Default
		yyv3521.CodecDecodeSelf(d)
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3522 := &x.DefaultRequest
		yyv3522.CodecDecodeSelf(d)
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3523 := &x.MaxLimitRequestRatio
		yyv3523.CodecDecodeSelf(d)
	}
	for {
		yyj3517++
		if yyhl3517 {
			yyb3517 = yyj3517 > l
		} else {
			yyb3517 = r.CheckBreak()
		}
		if yyb3517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3524 := z.EncBinary()
		_ = yym3524
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3525 := !z.EncBinary()
			yy2arr3525 := z.EncBasicHandle().StructToArray
			var yyq3525 [1]bool
			_, _, _ = yysep3525, yyq3525, yy2arr3525
			const yyr3525 bool = false
			var yynn3525 int
			if yyr3525 || yy2arr3525 {
				r.EncodeArrayStart(1)
			} else {
				yynn3525 = 1
				for _, b := range yyq3525 {
					if b {
						yynn3525++
					}
				}
				r.EncodeMapStart(yynn3525)
				yynn3525 = 0
			}
			if yyr3525 || yy2arr3525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3527 := z.EncBinary()
					_ = yym3527
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3528 := z.EncBinary()
					_ = yym3528
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3525 || yy2arr3525 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3529 := z.DecBinary()
	_ = yym3529
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3530 := r.ContainerType()
		if yyct3530 == codecSelferValueTypeMap1234 {
			yyl3530 := r.ReadMapStart()
			if yyl3530 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3530, d)
			}
		} else if yyct3530 == codecSelferValueTypeArray1234 {
			yyl3530 := r.ReadArrayStart()
			if yyl3530 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3530, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3531Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3531Slc
	var yyhl3531 bool = l >= 0
	for yyj3531 := 0; ; yyj3531++ {
		if yyhl3531 {
			if yyj3531 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3531Slc = r.DecodeBytes(yys3531Slc, true, true)
		yys3531 := string(yys3531Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3531 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3532 := &x.Limits
				yym3533 := z.DecBinary()
				_ = yym3533
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3532), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3531)
		} // end switch yys3531
	} // end for yyj3531
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3534 int
	var yyb3534 bool
	var yyhl3534 bool = l >= 0
	yyj3534++
	if yyhl3534 {
		yyb3534 = yyj3534 > l
	} else {
		yyb3534 = r.CheckBreak()
	}
	if yyb3534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3535 := &x.Limits
		yym3536 := z.DecBinary()
		_ = yym3536
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3535), d)
		}
	}
	for {
		yyj3534++
		if yyhl3534 {
			yyb3534 = yyj3534 > l
		} else {
			yyb3534 = r.CheckBreak()
		}
		if yyb3534 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3534-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3537 := z.EncBinary()
		_ = yym3537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3538 := !z.EncBinary()
			yy2arr3538 := z.EncBasicHandle().StructToArray
			var yyq3538 [4]bool
			_, _, _ = yysep3538, yyq3538, yy2arr3538
			const yyr3538 bool = false
			yyq3538[0] = true
			yyq3538[1] = true
			yyq3538[2] = x.Kind != ""
			yyq3538[3] = x.APIVersion != ""
			var yynn3538 int
			if yyr3538 || yy2arr3538 {
				r.EncodeArrayStart(4)
			} else {
				yynn3538 = 0
				for _, b := range yyq3538 {
					if b {
						yynn3538++
					}
				}
				r.EncodeMapStart(yynn3538)
				yynn3538 = 0
			}
			if yyr3538 || yy2arr3538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3538[0] {
					yy3540 := &x.ObjectMeta
					yy3540.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3538[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3541 := &x.ObjectMeta
					yy3541.CodecEncodeSelf(e)
				}
			}
			if yyr3538 || yy2arr3538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3538[1] {
					yy3543 := &x.Spec
					yy3543.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3538[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3544 := &x.Spec
					yy3544.CodecEncodeSelf(e)
				}
			}
			if yyr3538 || yy2arr3538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3538[2] {
					yym3546 := z.EncBinary()
					_ = yym3546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3538[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3547 := z.EncBinary()
					_ = yym3547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3538 || yy2arr3538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3538[3] {
					yym3549 := z.EncBinary()
					_ = yym3549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3538[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3538 || yy2arr3538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3551 := z.DecBinary()
	_ = yym3551
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3552 := r.ContainerType()
		if yyct3552 == codecSelferValueTypeMap1234 {
			yyl3552 := r.ReadMapStart()
			if yyl3552 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3552, d)
			}
		} else if yyct3552 == codecSelferValueTypeArray1234 {
			yyl3552 := r.ReadArrayStart()
			if yyl3552 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3552, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3553Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3553Slc
	var yyhl3553 bool = l >= 0
	for yyj3553 := 0; ; yyj3553++ {
		if yyhl3553 {
			if yyj3553 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3553Slc = r.DecodeBytes(yys3553Slc, true, true)
		yys3553 := string(yys3553Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3553 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3554 := &x.ObjectMeta
				yyv3554.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3555 := &x.Spec
				yyv3555.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3553)
		} // end switch yys3553
	} // end for yyj3553
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3558 int
	var yyb3558 bool
	var yyhl3558 bool = l >= 0
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3559 := &x.ObjectMeta
		yyv3559.CodecDecodeSelf(d)
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3560 := &x.Spec
		yyv3560.CodecDecodeSelf(d)
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3558++
		if yyhl3558 {
			yyb3558 = yyj3558 > l
		} else {
			yyb3558 = r.CheckBreak()
		}
		if yyb3558 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3558-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3563 := z.EncBinary()
		_ = yym3563
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3564 := !z.EncBinary()
			yy2arr3564 := z.EncBasicHandle().StructToArray
			var yyq3564 [4]bool
			_, _, _ = yysep3564, yyq3564, yy2arr3564
			const yyr3564 bool = false
			yyq3564[0] = true
			yyq3564[2] = x.Kind != ""
			yyq3564[3] = x.APIVersion != ""
			var yynn3564 int
			if yyr3564 || yy2arr3564 {
				r.EncodeArrayStart(4)
			} else {
				yynn3564 = 1
				for _, b := range yyq3564 {
					if b {
						yynn3564++
					}
				}
				r.EncodeMapStart(yynn3564)
				yynn3564 = 0
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3564[0] {
					yy3566 := &x.ListMeta
					yym3567 := z.EncBinary()
					_ = yym3567
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3566) {
					} else {
						z.EncFallback(yy3566)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3564[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3568 := &x.ListMeta
					yym3569 := z.EncBinary()
					_ = yym3569
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3568) {
					} else {
						z.EncFallback(yy3568)
					}
				}
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3571 := z.EncBinary()
					_ = yym3571
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3564[2] {
					yym3574 := z.EncBinary()
					_ = yym3574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3564[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3575 := z.EncBinary()
					_ = yym3575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3564[3] {
					yym3577 := z.EncBinary()
					_ = yym3577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3564[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3578 := z.EncBinary()
					_ = yym3578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3579 := z.DecBinary()
	_ = yym3579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3580 := r.ContainerType()
		if yyct3580 == codecSelferValueTypeMap1234 {
			yyl3580 := r.ReadMapStart()
			if yyl3580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3580, d)
			}
		} else if yyct3580 == codecSelferValueTypeArray1234 {
			yyl3580 := r.ReadArrayStart()
			if yyl3580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3581Slc
	var yyhl3581 bool = l >= 0
	for yyj3581 := 0; ; yyj3581++ {
		if yyhl3581 {
			if yyj3581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3581Slc = r.DecodeBytes(yys3581Slc, true, true)
		yys3581 := string(yys3581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3581 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3582 := &x.ListMeta
				yym3583 := z.DecBinary()
				_ = yym3583
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3582) {
				} else {
					z.DecFallback(yyv3582, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3584 := &x.Items
				yym3585 := z.DecBinary()
				_ = yym3585
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3584), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3581)
		} // end switch yys3581
	} // end for yyj3581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3588 int
	var yyb3588 bool
	var yyhl3588 bool = l >= 0
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3589 := &x.ListMeta
		yym3590 := z.DecBinary()
		_ = yym3590
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3589) {
		} else {
			z.DecFallback(yyv3589, false)
		}
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3591 := &x.Items
		yym3592 := z.DecBinary()
		_ = yym3592
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3591), d)
		}
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3588++
		if yyhl3588 {
			yyb3588 = yyj3588 > l
		} else {
			yyb3588 = r.CheckBreak()
		}
		if yyb3588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3595 := z.EncBinary()
		_ = yym3595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3596 := !z.EncBinary()
			yy2arr3596 := z.EncBasicHandle().StructToArray
			var yyq3596 [1]bool
			_, _, _ = yysep3596, yyq3596, yy2arr3596
			const yyr3596 bool = false
			yyq3596[0] = len(x.Hard) != 0
			var yynn3596 int
			if yyr3596 || yy2arr3596 {
				r.EncodeArrayStart(1)
			} else {
				yynn3596 = 0
				for _, b := range yyq3596 {
					if b {
						yynn3596++
					}
				}
				r.EncodeMapStart(yynn3596)
				yynn3596 = 0
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3596[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3596[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3598 := z.DecBinary()
	_ = yym3598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3599 := r.ContainerType()
		if yyct3599 == codecSelferValueTypeMap1234 {
			yyl3599 := r.ReadMapStart()
			if yyl3599 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3599, d)
			}
		} else if yyct3599 == codecSelferValueTypeArray1234 {
			yyl3599 := r.ReadArrayStart()
			if yyl3599 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3599, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3600Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3600Slc
	var yyhl3600 bool = l >= 0
	for yyj3600 := 0; ; yyj3600++ {
		if yyhl3600 {
			if yyj3600 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3600Slc = r.DecodeBytes(yys3600Slc, true, true)
		yys3600 := string(yys3600Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3600 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3601 := &x.Hard
				yyv3601.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3600)
		} // end switch yys3600
	} // end for yyj3600
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3602 int
	var yyb3602 bool
	var yyhl3602 bool = l >= 0
	yyj3602++
	if yyhl3602 {
		yyb3602 = yyj3602 > l
	} else {
		yyb3602 = r.CheckBreak()
	}
	if yyb3602 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3603 := &x.Hard
		yyv3603.CodecDecodeSelf(d)
	}
	for {
		yyj3602++
		if yyhl3602 {
			yyb3602 = yyj3602 > l
		} else {
			yyb3602 = r.CheckBreak()
		}
		if yyb3602 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3602-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3604 := z.EncBinary()
		_ = yym3604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3605 := !z.EncBinary()
			yy2arr3605 := z.EncBasicHandle().StructToArray
			var yyq3605 [2]bool
			_, _, _ = yysep3605, yyq3605, yy2arr3605
			const yyr3605 bool = false
			yyq3605[0] = len(x.Hard) != 0
			yyq3605[1] = len(x.Used) != 0
			var yynn3605 int
			if yyr3605 || yy2arr3605 {
				r.EncodeArrayStart(2)
			} else {
				yynn3605 = 0
				for _, b := range yyq3605 {
					if b {
						yynn3605++
					}
				}
				r.EncodeMapStart(yynn3605)
				yynn3605 = 0
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3605[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3605[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3605[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3605[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3608 := z.DecBinary()
	_ = yym3608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3609 := r.ContainerType()
		if yyct3609 == codecSelferValueTypeMap1234 {
			yyl3609 := r.ReadMapStart()
			if yyl3609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3609, d)
			}
		} else if yyct3609 == codecSelferValueTypeArray1234 {
			yyl3609 := r.ReadArrayStart()
			if yyl3609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3610Slc
	var yyhl3610 bool = l >= 0
	for yyj3610 := 0; ; yyj3610++ {
		if yyhl3610 {
			if yyj3610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3610Slc = r.DecodeBytes(yys3610Slc, true, true)
		yys3610 := string(yys3610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3610 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3611 := &x.Hard
				yyv3611.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3612 := &x.Used
				yyv3612.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3610)
		} // end switch yys3610
	} // end for yyj3610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3613 int
	var yyb3613 bool
	var yyhl3613 bool = l >= 0
	yyj3613++
	if yyhl3613 {
		yyb3613 = yyj3613 > l
	} else {
		yyb3613 = r.CheckBreak()
	}
	if yyb3613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3614 := &x.Hard
		yyv3614.CodecDecodeSelf(d)
	}
	yyj3613++
	if yyhl3613 {
		yyb3613 = yyj3613 > l
	} else {
		yyb3613 = r.CheckBreak()
	}
	if yyb3613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3615 := &x.Used
		yyv3615.CodecDecodeSelf(d)
	}
	for {
		yyj3613++
		if yyhl3613 {
			yyb3613 = yyj3613 > l
		} else {
			yyb3613 = r.CheckBreak()
		}
		if yyb3613 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3613-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3616 := z.EncBinary()
		_ = yym3616
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3617 := !z.EncBinary()
			yy2arr3617 := z.EncBasicHandle().StructToArray
			var yyq3617 [5]bool
			_, _, _ = yysep3617, yyq3617, yy2arr3617
			const yyr3617 bool = false
			yyq3617[0] = true
			yyq3617[1] = true
			yyq3617[2] = true
			yyq3617[3] = x.Kind != ""
			yyq3617[4] = x.APIVersion != ""
			var yynn3617 int
			if yyr3617 || yy2arr3617 {
				r.EncodeArrayStart(5)
			} else {
				yynn3617 = 0
				for _, b := range yyq3617 {
					if b {
						yynn3617++
					}
				}
				r.EncodeMapStart(yynn3617)
				yynn3617 = 0
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[0] {
					yy3619 := &x.ObjectMeta
					yy3619.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3617[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3620 := &x.ObjectMeta
					yy3620.CodecEncodeSelf(e)
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[1] {
					yy3622 := &x.Spec
					yy3622.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3617[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3623 := &x.Spec
					yy3623.CodecEncodeSelf(e)
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[2] {
					yy3625 := &x.Status
					yy3625.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3617[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3626 := &x.Status
					yy3626.CodecEncodeSelf(e)
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[3] {
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3617[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3629 := z.EncBinary()
					_ = yym3629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[4] {
					yym3631 := z.EncBinary()
					_ = yym3631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3617[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3633 := z.DecBinary()
	_ = yym3633
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3634 := r.ContainerType()
		if yyct3634 == codecSelferValueTypeMap1234 {
			yyl3634 := r.ReadMapStart()
			if yyl3634 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3634, d)
			}
		} else if yyct3634 == codecSelferValueTypeArray1234 {
			yyl3634 := r.ReadArrayStart()
			if yyl3634 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3634, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3635Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3635Slc
	var yyhl3635 bool = l >= 0
	for yyj3635 := 0; ; yyj3635++ {
		if yyhl3635 {
			if yyj3635 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3635Slc = r.DecodeBytes(yys3635Slc, true, true)
		yys3635 := string(yys3635Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3635 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3636 := &x.ObjectMeta
				yyv3636.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3637 := &x.Spec
				yyv3637.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3638 := &x.Status
				yyv3638.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3635)
		} // end switch yys3635
	} // end for yyj3635
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3641 int
	var yyb3641 bool
	var yyhl3641 bool = l >= 0
	yyj3641++
	if yyhl3641 {
		yyb3641 = yyj3641 > l
	} else {
		yyb3641 = r.CheckBreak()
	}
	if yyb3641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3642 := &x.ObjectMeta
		yyv3642.CodecDecodeSelf(d)
	}
	yyj3641++
	if yyhl3641 {
		yyb3641 = yyj3641 > l
	} else {
		yyb3641 = r.CheckBreak()
	}
	if yyb3641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3643 := &x.Spec
		yyv3643.CodecDecodeSelf(d)
	}
	yyj3641++
	if yyhl3641 {
		yyb3641 = yyj3641 > l
	} else {
		yyb3641 = r.CheckBreak()
	}
	if yyb3641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3644 := &x.Status
		yyv3644.CodecDecodeSelf(d)
	}
	yyj3641++
	if yyhl3641 {
		yyb3641 = yyj3641 > l
	} else {
		yyb3641 = r.CheckBreak()
	}
	if yyb3641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3641++
	if yyhl3641 {
		yyb3641 = yyj3641 > l
	} else {
		yyb3641 = r.CheckBreak()
	}
	if yyb3641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3641++
		if yyhl3641 {
			yyb3641 = yyj3641 > l
		} else {
			yyb3641 = r.CheckBreak()
		}
		if yyb3641 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3641-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3647 := z.EncBinary()
		_ = yym3647
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3648 := !z.EncBinary()
			yy2arr3648 := z.EncBasicHandle().StructToArray
			var yyq3648 [4]bool
			_, _, _ = yysep3648, yyq3648, yy2arr3648
			const yyr3648 bool = false
			yyq3648[0] = true
			yyq3648[2] = x.Kind != ""
			yyq3648[3] = x.APIVersion != ""
			var yynn3648 int
			if yyr3648 || yy2arr3648 {
				r.EncodeArrayStart(4)
			} else {
				yynn3648 = 1
				for _, b := range yyq3648 {
					if b {
						yynn3648++
					}
				}
				r.EncodeMapStart(yynn3648)
				yynn3648 = 0
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[0] {
					yy3650 := &x.ListMeta
					yym3651 := z.EncBinary()
					_ = yym3651
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3650) {
					} else {
						z.EncFallback(yy3650)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3648[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3652 := &x.ListMeta
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3652) {
					} else {
						z.EncFallback(yy3652)
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3655 := z.EncBinary()
					_ = yym3655
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[2] {
					yym3658 := z.EncBinary()
					_ = yym3658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3648[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3659 := z.EncBinary()
					_ = yym3659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[3] {
					yym3661 := z.EncBinary()
					_ = yym3661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3648[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3662 := z.EncBinary()
					_ = yym3662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3663 := z.DecBinary()
	_ = yym3663
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3664 := r.ContainerType()
		if yyct3664 == codecSelferValueTypeMap1234 {
			yyl3664 := r.ReadMapStart()
			if yyl3664 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3664, d)
			}
		} else if yyct3664 == codecSelferValueTypeArray1234 {
			yyl3664 := r.ReadArrayStart()
			if yyl3664 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3664, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3665Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3665Slc
	var yyhl3665 bool = l >= 0
	for yyj3665 := 0; ; yyj3665++ {
		if yyhl3665 {
			if yyj3665 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3665Slc = r.DecodeBytes(yys3665Slc, true, true)
		yys3665 := string(yys3665Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3665 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3666 := &x.ListMeta
				yym3667 := z.DecBinary()
				_ = yym3667
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3666) {
				} else {
					z.DecFallback(yyv3666, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3668 := &x.Items
				yym3669 := z.DecBinary()
				_ = yym3669
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3668), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3665)
		} // end switch yys3665
	} // end for yyj3665
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3672 int
	var yyb3672 bool
	var yyhl3672 bool = l >= 0
	yyj3672++
	if yyhl3672 {
		yyb3672 = yyj3672 > l
	} else {
		yyb3672 = r.CheckBreak()
	}
	if yyb3672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3673 := &x.ListMeta
		yym3674 := z.DecBinary()
		_ = yym3674
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3673) {
		} else {
			z.DecFallback(yyv3673, false)
		}
	}
	yyj3672++
	if yyhl3672 {
		yyb3672 = yyj3672 > l
	} else {
		yyb3672 = r.CheckBreak()
	}
	if yyb3672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3675 := &x.Items
		yym3676 := z.DecBinary()
		_ = yym3676
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3675), d)
		}
	}
	yyj3672++
	if yyhl3672 {
		yyb3672 = yyj3672 > l
	} else {
		yyb3672 = r.CheckBreak()
	}
	if yyb3672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3672++
	if yyhl3672 {
		yyb3672 = yyj3672 > l
	} else {
		yyb3672 = r.CheckBreak()
	}
	if yyb3672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3672++
		if yyhl3672 {
			yyb3672 = yyj3672 > l
		} else {
			yyb3672 = r.CheckBreak()
		}
		if yyb3672 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3672-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3679 := z.EncBinary()
		_ = yym3679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3680 := !z.EncBinary()
			yy2arr3680 := z.EncBasicHandle().StructToArray
			var yyq3680 [5]bool
			_, _, _ = yysep3680, yyq3680, yy2arr3680
			const yyr3680 bool = false
			yyq3680[0] = true
			yyq3680[1] = len(x.Data) != 0
			yyq3680[2] = x.Type != ""
			yyq3680[3] = x.Kind != ""
			yyq3680[4] = x.APIVersion != ""
			var yynn3680 int
			if yyr3680 || yy2arr3680 {
				r.EncodeArrayStart(5)
			} else {
				yynn3680 = 0
				for _, b := range yyq3680 {
					if b {
						yynn3680++
					}
				}
				r.EncodeMapStart(yynn3680)
				yynn3680 = 0
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[0] {
					yy3682 := &x.ObjectMeta
					yy3682.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3680[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3683 := &x.ObjectMeta
					yy3683.CodecEncodeSelf(e)
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[1] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3685 := z.EncBinary()
						_ = yym3685
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3680[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3686 := z.EncBinary()
						_ = yym3686
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[2] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3680[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[3] {
					yym3689 := z.EncBinary()
					_ = yym3689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3680[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3690 := z.EncBinary()
					_ = yym3690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3680[4] {
					yym3692 := z.EncBinary()
					_ = yym3692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3680[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3693 := z.EncBinary()
					_ = yym3693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3680 || yy2arr3680 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3694 := z.DecBinary()
	_ = yym3694
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3695 := r.ContainerType()
		if yyct3695 == codecSelferValueTypeMap1234 {
			yyl3695 := r.ReadMapStart()
			if yyl3695 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3695, d)
			}
		} else if yyct3695 == codecSelferValueTypeArray1234 {
			yyl3695 := r.ReadArrayStart()
			if yyl3695 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3695, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3696Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3696Slc
	var yyhl3696 bool = l >= 0
	for yyj3696 := 0; ; yyj3696++ {
		if yyhl3696 {
			if yyj3696 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3696Slc = r.DecodeBytes(yys3696Slc, true, true)
		yys3696 := string(yys3696Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3696 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3697 := &x.ObjectMeta
				yyv3697.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3698 := &x.Data
				yym3699 := z.DecBinary()
				_ = yym3699
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3698), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3696)
		} // end switch yys3696
	} // end for yyj3696
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3703 int
	var yyb3703 bool
	var yyhl3703 bool = l >= 0
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3704 := &x.ObjectMeta
		yyv3704.CodecDecodeSelf(d)
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3705 := &x.Data
		yym3706 := z.DecBinary()
		_ = yym3706
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3705), d)
		}
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3703++
		if yyhl3703 {
			yyb3703 = yyj3703 > l
		} else {
			yyb3703 = r.CheckBreak()
		}
		if yyb3703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3710 := z.EncBinary()
	_ = yym3710
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3711 := z.DecBinary()
	_ = yym3711
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3712 := z.EncBinary()
		_ = yym3712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3713 := !z.EncBinary()
			yy2arr3713 := z.EncBasicHandle().StructToArray
			var yyq3713 [4]bool
			_, _, _ = yysep3713, yyq3713, yy2arr3713
			const yyr3713 bool = false
			yyq3713[0] = true
			yyq3713[2] = x.Kind != ""
			yyq3713[3] = x.APIVersion != ""
			var yynn3713 int
			if yyr3713 || yy2arr3713 {
				r.EncodeArrayStart(4)
			} else {
				yynn3713 = 1
				for _, b := range yyq3713 {
					if b {
						yynn3713++
					}
				}
				r.EncodeMapStart(yynn3713)
				yynn3713 = 0
			}
			if yyr3713 || yy2arr3713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3713[0] {
					yy3715 := &x.ListMeta
					yym3716 := z.EncBinary()
					_ = yym3716
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3715) {
					} else {
						z.EncFallback(yy3715)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3713[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3717 := &x.ListMeta
					yym3718 := z.EncBinary()
					_ = yym3718
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3717) {
					} else {
						z.EncFallback(yy3717)
					}
				}
			}
			if yyr3713 || yy2arr3713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3720 := z.EncBinary()
					_ = yym3720
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3721 := z.EncBinary()
					_ = yym3721
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3713 || yy2arr3713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3713[2] {
					yym3723 := z.EncBinary()
					_ = yym3723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3713[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3724 := z.EncBinary()
					_ = yym3724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3713 || yy2arr3713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3713[3] {
					yym3726 := z.EncBinary()
					_ = yym3726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3713[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3727 := z.EncBinary()
					_ = yym3727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3713 || yy2arr3713 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3728 := z.DecBinary()
	_ = yym3728
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3729 := r.ContainerType()
		if yyct3729 == codecSelferValueTypeMap1234 {
			yyl3729 := r.ReadMapStart()
			if yyl3729 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3729, d)
			}
		} else if yyct3729 == codecSelferValueTypeArray1234 {
			yyl3729 := r.ReadArrayStart()
			if yyl3729 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3729, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3730Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3730Slc
	var yyhl3730 bool = l >= 0
	for yyj3730 := 0; ; yyj3730++ {
		if yyhl3730 {
			if yyj3730 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3730Slc = r.DecodeBytes(yys3730Slc, true, true)
		yys3730 := string(yys3730Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3730 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3731 := &x.ListMeta
				yym3732 := z.DecBinary()
				_ = yym3732
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3731) {
				} else {
					z.DecFallback(yyv3731, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3733 := &x.Items
				yym3734 := z.DecBinary()
				_ = yym3734
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3733), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3730)
		} // end switch yys3730
	} // end for yyj3730
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3737 int
	var yyb3737 bool
	var yyhl3737 bool = l >= 0
	yyj3737++
	if yyhl3737 {
		yyb3737 = yyj3737 > l
	} else {
		yyb3737 = r.CheckBreak()
	}
	if yyb3737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3738 := &x.ListMeta
		yym3739 := z.DecBinary()
		_ = yym3739
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3738) {
		} else {
			z.DecFallback(yyv3738, false)
		}
	}
	yyj3737++
	if yyhl3737 {
		yyb3737 = yyj3737 > l
	} else {
		yyb3737 = r.CheckBreak()
	}
	if yyb3737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3740 := &x.Items
		yym3741 := z.DecBinary()
		_ = yym3741
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3740), d)
		}
	}
	yyj3737++
	if yyhl3737 {
		yyb3737 = yyj3737 > l
	} else {
		yyb3737 = r.CheckBreak()
	}
	if yyb3737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3737++
	if yyhl3737 {
		yyb3737 = yyj3737 > l
	} else {
		yyb3737 = r.CheckBreak()
	}
	if yyb3737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3737++
		if yyhl3737 {
			yyb3737 = yyj3737 > l
		} else {
			yyb3737 = r.CheckBreak()
		}
		if yyb3737 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3737-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3744 := z.EncBinary()
		_ = yym3744
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3745 := !z.EncBinary()
			yy2arr3745 := z.EncBasicHandle().StructToArray
			var yyq3745 [4]bool
			_, _, _ = yysep3745, yyq3745, yy2arr3745
			const yyr3745 bool = false
			yyq3745[0] = true
			yyq3745[1] = len(x.Data) != 0
			yyq3745[2] = x.Kind != ""
			yyq3745[3] = x.APIVersion != ""
			var yynn3745 int
			if yyr3745 || yy2arr3745 {
				r.EncodeArrayStart(4)
			} else {
				yynn3745 = 0
				for _, b := range yyq3745 {
					if b {
						yynn3745++
					}
				}
				r.EncodeMapStart(yynn3745)
				yynn3745 = 0
			}
			if yyr3745 || yy2arr3745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3745[0] {
					yy3747 := &x.ObjectMeta
					yy3747.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3745[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3748 := &x.ObjectMeta
					yy3748.CodecEncodeSelf(e)
				}
			}
			if yyr3745 || yy2arr3745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3745[1] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3750 := z.EncBinary()
						_ = yym3750
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3745[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3751 := z.EncBinary()
						_ = yym3751
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr3745 || yy2arr3745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3745[2] {
					yym3753 := z.EncBinary()
					_ = yym3753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3745[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3754 := z.EncBinary()
					_ = yym3754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3745 || yy2arr3745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3745[3] {
					yym3756 := z.EncBinary()
					_ = yym3756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3745[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3757 := z.EncBinary()
					_ = yym3757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3745 || yy2arr3745 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3758 := z.DecBinary()
	_ = yym3758
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3759 := r.ContainerType()
		if yyct3759 == codecSelferValueTypeMap1234 {
			yyl3759 := r.ReadMapStart()
			if yyl3759 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3759, d)
			}
		} else if yyct3759 == codecSelferValueTypeArray1234 {
			yyl3759 := r.ReadArrayStart()
			if yyl3759 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3759, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3760Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3760Slc
	var yyhl3760 bool = l >= 0
	for yyj3760 := 0; ; yyj3760++ {
		if yyhl3760 {
			if yyj3760 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3760Slc = r.DecodeBytes(yys3760Slc, true, true)
		yys3760 := string(yys3760Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3760 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3761 := &x.ObjectMeta
				yyv3761.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3762 := &x.Data
				yym3763 := z.DecBinary()
				_ = yym3763
				if false {
				} else {
					z.F.DecMapStringStringX(yyv3762, false, d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3760)
		} // end switch yys3760
	} // end for yyj3760
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3766 int
	var yyb3766 bool
	var yyhl3766 bool = l >= 0
	yyj3766++
	if yyhl3766 {
		yyb3766 = yyj3766 > l
	} else {
		yyb3766 = r.CheckBreak()
	}
	if yyb3766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3767 := &x.ObjectMeta
		yyv3767.CodecDecodeSelf(d)
	}
	yyj3766++
	if yyhl3766 {
		yyb3766 = yyj3766 > l
	} else {
		yyb3766 = r.CheckBreak()
	}
	if yyb3766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3768 := &x.Data
		yym3769 := z.DecBinary()
		_ = yym3769
		if false {
		} else {
			z.F.DecMapStringStringX(yyv3768, false, d)
		}
	}
	yyj3766++
	if yyhl3766 {
		yyb3766 = yyj3766 > l
	} else {
		yyb3766 = r.CheckBreak()
	}
	if yyb3766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3766++
	if yyhl3766 {
		yyb3766 = yyj3766 > l
	} else {
		yyb3766 = r.CheckBreak()
	}
	if yyb3766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3766++
		if yyhl3766 {
			yyb3766 = yyj3766 > l
		} else {
			yyb3766 = r.CheckBreak()
		}
		if yyb3766 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3766-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3772 := z.EncBinary()
		_ = yym3772
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3773 := !z.EncBinary()
			yy2arr3773 := z.EncBasicHandle().StructToArray
			var yyq3773 [4]bool
			_, _, _ = yysep3773, yyq3773, yy2arr3773
			const yyr3773 bool = false
			yyq3773[0] = true
			yyq3773[1] = len(x.Items) != 0
			yyq3773[2] = x.Kind != ""
			yyq3773[3] = x.APIVersion != ""
			var yynn3773 int
			if yyr3773 || yy2arr3773 {
				r.EncodeArrayStart(4)
			} else {
				yynn3773 = 0
				for _, b := range yyq3773 {
					if b {
						yynn3773++
					}
				}
				r.EncodeMapStart(yynn3773)
				yynn3773 = 0
			}
			if yyr3773 || yy2arr3773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3773[0] {
					yy3775 := &x.ListMeta
					yym3776 := z.EncBinary()
					_ = yym3776
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3775) {
					} else {
						z.EncFallback(yy3775)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3773[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3777 := &x.ListMeta
					yym3778 := z.EncBinary()
					_ = yym3778
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3777) {
					} else {
						z.EncFallback(yy3777)
					}
				}
			}
			if yyr3773 || yy2arr3773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3773[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3780 := z.EncBinary()
						_ = yym3780
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3773[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3781 := z.EncBinary()
						_ = yym3781
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				}
			}
			if yyr3773 || yy2arr3773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3773[2] {
					yym3783 := z.EncBinary()
					_ = yym3783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3773[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3784 := z.EncBinary()
					_ = yym3784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3773 || yy2arr3773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3773[3] {
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3773[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3787 := z.EncBinary()
					_ = yym3787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3773 || yy2arr3773 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3788 := z.DecBinary()
	_ = yym3788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3789 := r.ContainerType()
		if yyct3789 == codecSelferValueTypeMap1234 {
			yyl3789 := r.ReadMapStart()
			if yyl3789 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3789, d)
			}
		} else if yyct3789 == codecSelferValueTypeArray1234 {
			yyl3789 := r.ReadArrayStart()
			if yyl3789 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3790Slc
	var yyhl3790 bool = l >= 0
	for yyj3790 := 0; ; yyj3790++ {
		if yyhl3790 {
			if yyj3790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3790Slc = r.DecodeBytes(yys3790Slc, true, true)
		yys3790 := string(yys3790Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3790 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3791 := &x.ListMeta
				yym3792 := z.DecBinary()
				_ = yym3792
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3791) {
				} else {
					z.DecFallback(yyv3791, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3793 := &x.Items
				yym3794 := z.DecBinary()
				_ = yym3794
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv3793), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3790)
		} // end switch yys3790
	} // end for yyj3790
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3797 int
	var yyb3797 bool
	var yyhl3797 bool = l >= 0
	yyj3797++
	if yyhl3797 {
		yyb3797 = yyj3797 > l
	} else {
		yyb3797 = r.CheckBreak()
	}
	if yyb3797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3798 := &x.ListMeta
		yym3799 := z.DecBinary()
		_ = yym3799
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3798) {
		} else {
			z.DecFallback(yyv3798, false)
		}
	}
	yyj3797++
	if yyhl3797 {
		yyb3797 = yyj3797 > l
	} else {
		yyb3797 = r.CheckBreak()
	}
	if yyb3797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3800 := &x.Items
		yym3801 := z.DecBinary()
		_ = yym3801
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv3800), d)
		}
	}
	yyj3797++
	if yyhl3797 {
		yyb3797 = yyj3797 > l
	} else {
		yyb3797 = r.CheckBreak()
	}
	if yyb3797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3797++
	if yyhl3797 {
		yyb3797 = yyj3797 > l
	} else {
		yyb3797 = r.CheckBreak()
	}
	if yyb3797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3797++
		if yyhl3797 {
			yyb3797 = yyj3797 > l
		} else {
			yyb3797 = r.CheckBreak()
		}
		if yyb3797 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3797-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3804 := z.EncBinary()
	_ = yym3804
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3805 := z.DecBinary()
	_ = yym3805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3806 := z.EncBinary()
	_ = yym3806
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3807 := z.DecBinary()
	_ = yym3807
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3808 := z.EncBinary()
		_ = yym3808
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3809 := !z.EncBinary()
			yy2arr3809 := z.EncBasicHandle().StructToArray
			var yyq3809 [4]bool
			_, _, _ = yysep3809, yyq3809, yy2arr3809
			const yyr3809 bool = false
			yyq3809[2] = x.Message != ""
			yyq3809[3] = x.Error != ""
			var yynn3809 int
			if yyr3809 || yy2arr3809 {
				r.EncodeArrayStart(4)
			} else {
				yynn3809 = 2
				for _, b := range yyq3809 {
					if b {
						yynn3809++
					}
				}
				r.EncodeMapStart(yynn3809)
				yynn3809 = 0
			}
			if yyr3809 || yy2arr3809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3809 || yy2arr3809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3809 || yy2arr3809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3809[2] {
					yym3813 := z.EncBinary()
					_ = yym3813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3809[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3814 := z.EncBinary()
					_ = yym3814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3809 || yy2arr3809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3809[3] {
					yym3816 := z.EncBinary()
					_ = yym3816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3809[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3817 := z.EncBinary()
					_ = yym3817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3809 || yy2arr3809 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3818 := z.DecBinary()
	_ = yym3818
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3819 := r.ContainerType()
		if yyct3819 == codecSelferValueTypeMap1234 {
			yyl3819 := r.ReadMapStart()
			if yyl3819 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3819, d)
			}
		} else if yyct3819 == codecSelferValueTypeArray1234 {
			yyl3819 := r.ReadArrayStart()
			if yyl3819 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3819, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3820Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3820Slc
	var yyhl3820 bool = l >= 0
	for yyj3820 := 0; ; yyj3820++ {
		if yyhl3820 {
			if yyj3820 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3820Slc = r.DecodeBytes(yys3820Slc, true, true)
		yys3820 := string(yys3820Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3820 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3820)
		} // end switch yys3820
	} // end for yyj3820
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3825 int
	var yyb3825 bool
	var yyhl3825 bool = l >= 0
	yyj3825++
	if yyhl3825 {
		yyb3825 = yyj3825 > l
	} else {
		yyb3825 = r.CheckBreak()
	}
	if yyb3825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3825++
	if yyhl3825 {
		yyb3825 = yyj3825 > l
	} else {
		yyb3825 = r.CheckBreak()
	}
	if yyb3825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3825++
	if yyhl3825 {
		yyb3825 = yyj3825 > l
	} else {
		yyb3825 = r.CheckBreak()
	}
	if yyb3825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3825++
	if yyhl3825 {
		yyb3825 = yyj3825 > l
	} else {
		yyb3825 = r.CheckBreak()
	}
	if yyb3825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3825++
		if yyhl3825 {
			yyb3825 = yyj3825 > l
		} else {
			yyb3825 = r.CheckBreak()
		}
		if yyb3825 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3825-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3830 := z.EncBinary()
		_ = yym3830
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3831 := !z.EncBinary()
			yy2arr3831 := z.EncBasicHandle().StructToArray
			var yyq3831 [4]bool
			_, _, _ = yysep3831, yyq3831, yy2arr3831
			const yyr3831 bool = false
			yyq3831[0] = true
			yyq3831[1] = len(x.Conditions) != 0
			yyq3831[2] = x.Kind != ""
			yyq3831[3] = x.APIVersion != ""
			var yynn3831 int
			if yyr3831 || yy2arr3831 {
				r.EncodeArrayStart(4)
			} else {
				yynn3831 = 0
				for _, b := range yyq3831 {
					if b {
						yynn3831++
					}
				}
				r.EncodeMapStart(yynn3831)
				yynn3831 = 0
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3831[0] {
					yy3833 := &x.ObjectMeta
					yy3833.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3831[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3834 := &x.ObjectMeta
					yy3834.CodecEncodeSelf(e)
				}
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3831[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3836 := z.EncBinary()
						_ = yym3836
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3831[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3837 := z.EncBinary()
						_ = yym3837
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3831[2] {
					yym3839 := z.EncBinary()
					_ = yym3839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3831[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3840 := z.EncBinary()
					_ = yym3840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3831[3] {
					yym3842 := z.EncBinary()
					_ = yym3842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3831[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3843 := z.EncBinary()
					_ = yym3843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3844 := z.DecBinary()
	_ = yym3844
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3845 := r.ContainerType()
		if yyct3845 == codecSelferValueTypeMap1234 {
			yyl3845 := r.ReadMapStart()
			if yyl3845 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3845, d)
			}
		} else if yyct3845 == codecSelferValueTypeArray1234 {
			yyl3845 := r.ReadArrayStart()
			if yyl3845 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3845, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3846Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3846Slc
	var yyhl3846 bool = l >= 0
	for yyj3846 := 0; ; yyj3846++ {
		if yyhl3846 {
			if yyj3846 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3846Slc = r.DecodeBytes(yys3846Slc, true, true)
		yys3846 := string(yys3846Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3846 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3847 := &x.ObjectMeta
				yyv3847.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3848 := &x.Conditions
				yym3849 := z.DecBinary()
				_ = yym3849
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3848), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3846)
		} // end switch yys3846
	} // end for yyj3846
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3852 int
	var yyb3852 bool
	var yyhl3852 bool = l >= 0
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3853 := &x.ObjectMeta
		yyv3853.CodecDecodeSelf(d)
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3854 := &x.Conditions
		yym3855 := z.DecBinary()
		_ = yym3855
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3854), d)
		}
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3852++
		if yyhl3852 {
			yyb3852 = yyj3852 > l
		} else {
			yyb3852 = r.CheckBreak()
		}
		if yyb3852 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3852-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3858 := z.EncBinary()
		_ = yym3858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3859 := !z.EncBinary()
			yy2arr3859 := z.EncBasicHandle().StructToArray
			var yyq3859 [4]bool
			_, _, _ = yysep3859, yyq3859, yy2arr3859
			const yyr3859 bool = false
			yyq3859[0] = true
			yyq3859[2] = x.Kind != ""
			yyq3859[3] = x.APIVersion != ""
			var yynn3859 int
			if yyr3859 || yy2arr3859 {
				r.EncodeArrayStart(4)
			} else {
				yynn3859 = 1
				for _, b := range yyq3859 {
					if b {
						yynn3859++
					}
				}
				r.EncodeMapStart(yynn3859)
				yynn3859 = 0
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3859[0] {
					yy3861 := &x.ListMeta
					yym3862 := z.EncBinary()
					_ = yym3862
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3861) {
					} else {
						z.EncFallback(yy3861)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3859[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3863 := &x.ListMeta
					yym3864 := z.EncBinary()
					_ = yym3864
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3863) {
					} else {
						z.EncFallback(yy3863)
					}
				}
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3866 := z.EncBinary()
					_ = yym3866
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3867 := z.EncBinary()
					_ = yym3867
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3859[2] {
					yym3869 := z.EncBinary()
					_ = yym3869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3859[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3870 := z.EncBinary()
					_ = yym3870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3859[3] {
					yym3872 := z.EncBinary()
					_ = yym3872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3859[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3873 := z.EncBinary()
					_ = yym3873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3874 := z.DecBinary()
	_ = yym3874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3875 := r.ContainerType()
		if yyct3875 == codecSelferValueTypeMap1234 {
			yyl3875 := r.ReadMapStart()
			if yyl3875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3875, d)
			}
		} else if yyct3875 == codecSelferValueTypeArray1234 {
			yyl3875 := r.ReadArrayStart()
			if yyl3875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3876Slc
	var yyhl3876 bool = l >= 0
	for yyj3876 := 0; ; yyj3876++ {
		if yyhl3876 {
			if yyj3876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3876Slc = r.DecodeBytes(yys3876Slc, true, true)
		yys3876 := string(yys3876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3876 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3877 := &x.ListMeta
				yym3878 := z.DecBinary()
				_ = yym3878
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3877) {
				} else {
					z.DecFallback(yyv3877, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3879 := &x.Items
				yym3880 := z.DecBinary()
				_ = yym3880
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3879), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3876)
		} // end switch yys3876
	} // end for yyj3876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3883 int
	var yyb3883 bool
	var yyhl3883 bool = l >= 0
	yyj3883++
	if yyhl3883 {
		yyb3883 = yyj3883 > l
	} else {
		yyb3883 = r.CheckBreak()
	}
	if yyb3883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3884 := &x.ListMeta
		yym3885 := z.DecBinary()
		_ = yym3885
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3884) {
		} else {
			z.DecFallback(yyv3884, false)
		}
	}
	yyj3883++
	if yyhl3883 {
		yyb3883 = yyj3883 > l
	} else {
		yyb3883 = r.CheckBreak()
	}
	if yyb3883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3886 := &x.Items
		yym3887 := z.DecBinary()
		_ = yym3887
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3886), d)
		}
	}
	yyj3883++
	if yyhl3883 {
		yyb3883 = yyj3883 > l
	} else {
		yyb3883 = r.CheckBreak()
	}
	if yyb3883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3883++
	if yyhl3883 {
		yyb3883 = yyj3883 > l
	} else {
		yyb3883 = r.CheckBreak()
	}
	if yyb3883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3883++
		if yyhl3883 {
			yyb3883 = yyj3883 > l
		} else {
			yyb3883 = r.CheckBreak()
		}
		if yyb3883 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3883-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3890 := z.EncBinary()
		_ = yym3890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3891 := !z.EncBinary()
			yy2arr3891 := z.EncBasicHandle().StructToArray
			var yyq3891 [5]bool
			_, _, _ = yysep3891, yyq3891, yy2arr3891
			const yyr3891 bool = false
			yyq3891[0] = x.Capabilities != nil
			yyq3891[1] = x.Privileged != nil
			yyq3891[2] = x.SELinuxOptions != nil
			yyq3891[3] = x.RunAsUser != nil
			yyq3891[4] = x.RunAsNonRoot != nil
			var yynn3891 int
			if yyr3891 || yy2arr3891 {
				r.EncodeArrayStart(5)
			} else {
				yynn3891 = 0
				for _, b := range yyq3891 {
					if b {
						yynn3891++
					}
				}
				r.EncodeMapStart(yynn3891)
				yynn3891 = 0
			}
			if yyr3891 || yy2arr3891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3891[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3891[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3891 || yy2arr3891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3891[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3894 := *x.Privileged
						yym3895 := z.EncBinary()
						_ = yym3895
						if false {
						} else {
							r.EncodeBool(bool(yy3894))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3891[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3896 := *x.Privileged
						yym3897 := z.EncBinary()
						_ = yym3897
						if false {
						} else {
							r.EncodeBool(bool(yy3896))
						}
					}
				}
			}
			if yyr3891 || yy2arr3891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3891[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3891[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3891 || yy2arr3891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3891[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3900 := *x.RunAsUser
						yym3901 := z.EncBinary()
						_ = yym3901
						if false {
						} else {
							r.EncodeInt(int64(yy3900))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3891[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3902 := *x.RunAsUser
						yym3903 := z.EncBinary()
						_ = yym3903
						if false {
						} else {
							r.EncodeInt(int64(yy3902))
						}
					}
				}
			}
			if yyr3891 || yy2arr3891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3891[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3905 := *x.RunAsNonRoot
						yym3906 := z.EncBinary()
						_ = yym3906
						if false {
						} else {
							r.EncodeBool(bool(yy3905))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3891[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3907 := *x.RunAsNonRoot
						yym3908 := z.EncBinary()
						_ = yym3908
						if false {
						} else {
							r.EncodeBool(bool(yy3907))
						}
					}
				}
			}
			if yyr3891 || yy2arr3891 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3909 := z.DecBinary()
	_ = yym3909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3910 := r.ContainerType()
		if yyct3910 == codecSelferValueTypeMap1234 {
			yyl3910 := r.ReadMapStart()
			if yyl3910 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3910, d)
			}
		} else if yyct3910 == codecSelferValueTypeArray1234 {
			yyl3910 := r.ReadArrayStart()
			if yyl3910 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3911Slc
	var yyhl3911 bool = l >= 0
	for yyj3911 := 0; ; yyj3911++ {
		if yyhl3911 {
			if yyj3911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3911Slc = r.DecodeBytes(yys3911Slc, true, true)
		yys3911 := string(yys3911Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3911 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3914 := z.DecBinary()
				_ = yym3914
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3917 := z.DecBinary()
				_ = yym3917
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3919 := z.DecBinary()
				_ = yym3919
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3911)
		} // end switch yys3911
	} // end for yyj3911
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3920 int
	var yyb3920 bool
	var yyhl3920 bool = l >= 0
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3923 := z.DecBinary()
		_ = yym3923
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3926 := z.DecBinary()
		_ = yym3926
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3928 := z.DecBinary()
		_ = yym3928
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3920++
		if yyhl3920 {
			yyb3920 = yyj3920 > l
		} else {
			yyb3920 = r.CheckBreak()
		}
		if yyb3920 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3920-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3929 := z.EncBinary()
		_ = yym3929
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3930 := !z.EncBinary()
			yy2arr3930 := z.EncBasicHandle().StructToArray
			var yyq3930 [4]bool
			_, _, _ = yysep3930, yyq3930, yy2arr3930
			const yyr3930 bool = false
			yyq3930[0] = x.User != ""
			yyq3930[1] = x.Role != ""
			yyq3930[2] = x.Type != ""
			yyq3930[3] = x.Level != ""
			var yynn3930 int
			if yyr3930 || yy2arr3930 {
				r.EncodeArrayStart(4)
			} else {
				yynn3930 = 0
				for _, b := range yyq3930 {
					if b {
						yynn3930++
					}
				}
				r.EncodeMapStart(yynn3930)
				yynn3930 = 0
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3930[0] {
					yym3932 := z.EncBinary()
					_ = yym3932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3930[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3933 := z.EncBinary()
					_ = yym3933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3930[1] {
					yym3935 := z.EncBinary()
					_ = yym3935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3930[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3936 := z.EncBinary()
					_ = yym3936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3930[2] {
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3930[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3930[3] {
					yym3941 := z.EncBinary()
					_ = yym3941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3930[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3943 := z.DecBinary()
	_ = yym3943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3944 := r.ContainerType()
		if yyct3944 == codecSelferValueTypeMap1234 {
			yyl3944 := r.ReadMapStart()
			if yyl3944 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3944, d)
			}
		} else if yyct3944 == codecSelferValueTypeArray1234 {
			yyl3944 := r.ReadArrayStart()
			if yyl3944 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3945Slc
	var yyhl3945 bool = l >= 0
	for yyj3945 := 0; ; yyj3945++ {
		if yyhl3945 {
			if yyj3945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3945Slc = r.DecodeBytes(yys3945Slc, true, true)
		yys3945 := string(yys3945Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3945 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3945)
		} // end switch yys3945
	} // end for yyj3945
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3950 int
	var yyb3950 bool
	var yyhl3950 bool = l >= 0
	yyj3950++
	if yyhl3950 {
		yyb3950 = yyj3950 > l
	} else {
		yyb3950 = r.CheckBreak()
	}
	if yyb3950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3950++
	if yyhl3950 {
		yyb3950 = yyj3950 > l
	} else {
		yyb3950 = r.CheckBreak()
	}
	if yyb3950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3950++
	if yyhl3950 {
		yyb3950 = yyj3950 > l
	} else {
		yyb3950 = r.CheckBreak()
	}
	if yyb3950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3950++
	if yyhl3950 {
		yyb3950 = yyj3950 > l
	} else {
		yyb3950 = r.CheckBreak()
	}
	if yyb3950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3950++
		if yyhl3950 {
			yyb3950 = yyj3950 > l
		} else {
			yyb3950 = r.CheckBreak()
		}
		if yyb3950 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3950-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3955 := z.EncBinary()
		_ = yym3955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3956 := !z.EncBinary()
			yy2arr3956 := z.EncBasicHandle().StructToArray
			var yyq3956 [5]bool
			_, _, _ = yysep3956, yyq3956, yy2arr3956
			const yyr3956 bool = false
			yyq3956[0] = true
			yyq3956[3] = x.Kind != ""
			yyq3956[4] = x.APIVersion != ""
			var yynn3956 int
			if yyr3956 || yy2arr3956 {
				r.EncodeArrayStart(5)
			} else {
				yynn3956 = 2
				for _, b := range yyq3956 {
					if b {
						yynn3956++
					}
				}
				r.EncodeMapStart(yynn3956)
				yynn3956 = 0
			}
			if yyr3956 || yy2arr3956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3956[0] {
					yy3958 := &x.ObjectMeta
					yy3958.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3956[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3959 := &x.ObjectMeta
					yy3959.CodecEncodeSelf(e)
				}
			}
			if yyr3956 || yy2arr3956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3961 := z.EncBinary()
				_ = yym3961
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3962 := z.EncBinary()
				_ = yym3962
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3956 || yy2arr3956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3964 := z.EncBinary()
					_ = yym3964
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3965 := z.EncBinary()
					_ = yym3965
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3956 || yy2arr3956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3956[3] {
					yym3967 := z.EncBinary()
					_ = yym3967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3956[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3968 := z.EncBinary()
					_ = yym3968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3956 || yy2arr3956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3956[4] {
					yym3970 := z.EncBinary()
					_ = yym3970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3956[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3971 := z.EncBinary()
					_ = yym3971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3956 || yy2arr3956 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3972 := z.DecBinary()
	_ = yym3972
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3973 := r.ContainerType()
		if yyct3973 == codecSelferValueTypeMap1234 {
			yyl3973 := r.ReadMapStart()
			if yyl3973 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3973, d)
			}
		} else if yyct3973 == codecSelferValueTypeArray1234 {
			yyl3973 := r.ReadArrayStart()
			if yyl3973 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3973, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3974Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3974Slc
	var yyhl3974 bool = l >= 0
	for yyj3974 := 0; ; yyj3974++ {
		if yyhl3974 {
			if yyj3974 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3974Slc = r.DecodeBytes(yys3974Slc, true, true)
		yys3974 := string(yys3974Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3974 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3975 := &x.ObjectMeta
				yyv3975.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3977 := &x.Data
				yym3978 := z.DecBinary()
				_ = yym3978
				if false {
				} else {
					*yyv3977 = r.DecodeBytes(*(*[]byte)(yyv3977), false, false)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3974)
		} // end switch yys3974
	} // end for yyj3974
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3981 int
	var yyb3981 bool
	var yyhl3981 bool = l >= 0
	yyj3981++
	if yyhl3981 {
		yyb3981 = yyj3981 > l
	} else {
		yyb3981 = r.CheckBreak()
	}
	if yyb3981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3982 := &x.ObjectMeta
		yyv3982.CodecDecodeSelf(d)
	}
	yyj3981++
	if yyhl3981 {
		yyb3981 = yyj3981 > l
	} else {
		yyb3981 = r.CheckBreak()
	}
	if yyb3981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3981++
	if yyhl3981 {
		yyb3981 = yyj3981 > l
	} else {
		yyb3981 = r.CheckBreak()
	}
	if yyb3981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3984 := &x.Data
		yym3985 := z.DecBinary()
		_ = yym3985
		if false {
		} else {
			*yyv3984 = r.DecodeBytes(*(*[]byte)(yyv3984), false, false)
		}
	}
	yyj3981++
	if yyhl3981 {
		yyb3981 = yyj3981 > l
	} else {
		yyb3981 = r.CheckBreak()
	}
	if yyb3981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3981++
	if yyhl3981 {
		yyb3981 = yyj3981 > l
	} else {
		yyb3981 = r.CheckBreak()
	}
	if yyb3981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3981++
		if yyhl3981 {
			yyb3981 = yyj3981 > l
		} else {
			yyb3981 = r.CheckBreak()
		}
		if yyb3981 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3981-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3988 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3988.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3989 := *v
	yyh3989, yyl3989 := z.DecSliceHelperStart()
	var yyc3989 bool
	if yyl3989 == 0 {
		if yyv3989 == nil {
			yyv3989 = []PersistentVolumeAccessMode{}
			yyc3989 = true
		} else if len(yyv3989) != 0 {
			yyv3989 = yyv3989[:0]
			yyc3989 = true
		}
	} else if yyl3989 > 0 {
		var yyrr3989, yyrl3989 int
		var yyrt3989 bool
		if yyl3989 > cap(yyv3989) {

			yyrl3989, yyrt3989 = z.DecInferLen(yyl3989, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3989 {
				if yyrl3989 <= cap(yyv3989) {
					yyv3989 = yyv3989[:yyrl3989]
				} else {
					yyv3989 = make([]PersistentVolumeAccessMode, yyrl3989)
				}
			} else {
				yyv3989 = make([]PersistentVolumeAccessMode, yyrl3989)
			}
			yyc3989 = true
			yyrr3989 = len(yyv3989)
		} else if yyl3989 != len(yyv3989) {
			yyv3989 = yyv3989[:yyl3989]
			yyc3989 = true
		}
		yyj3989 := 0
		for ; yyj3989 < yyrr3989; yyj3989++ {
			yyh3989.ElemContainerState(yyj3989)
			if r.TryDecodeAsNil() {
				yyv3989[yyj3989] = ""
			} else {
				yyv3989[yyj3989] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3989 {
			for ; yyj3989 < yyl3989; yyj3989++ {
				yyv3989 = append(yyv3989, "")
				yyh3989.ElemContainerState(yyj3989)
				if r.TryDecodeAsNil() {
					yyv3989[yyj3989] = ""
				} else {
					yyv3989[yyj3989] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3989 := 0
		for ; !r.CheckBreak(); yyj3989++ {

			if yyj3989 >= len(yyv3989) {
				yyv3989 = append(yyv3989, "") // var yyz3989 PersistentVolumeAccessMode
				yyc3989 = true
			}
			yyh3989.ElemContainerState(yyj3989)
			if yyj3989 < len(yyv3989) {
				if r.TryDecodeAsNil() {
					yyv3989[yyj3989] = ""
				} else {
					yyv3989[yyj3989] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3989 < len(yyv3989) {
			yyv3989 = yyv3989[:yyj3989]
			yyc3989 = true
		} else if yyj3989 == 0 && yyv3989 == nil {
			yyv3989 = []PersistentVolumeAccessMode{}
			yyc3989 = true
		}
	}
	yyh3989.End()
	if yyc3989 {
		*v = yyv3989
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3993 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3994 := &yyv3993
		yy3994.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3995 := *v
	yyh3995, yyl3995 := z.DecSliceHelperStart()
	var yyc3995 bool
	if yyl3995 == 0 {
		if yyv3995 == nil {
			yyv3995 = []PersistentVolume{}
			yyc3995 = true
		} else if len(yyv3995) != 0 {
			yyv3995 = yyv3995[:0]
			yyc3995 = true
		}
	} else if yyl3995 > 0 {
		var yyrr3995, yyrl3995 int
		var yyrt3995 bool
		if yyl3995 > cap(yyv3995) {

			yyrg3995 := len(yyv3995) > 0
			yyv23995 := yyv3995
			yyrl3995, yyrt3995 = z.DecInferLen(yyl3995, z.DecBasicHandle().MaxInitLen, 400)
			if yyrt3995 {
				if yyrl3995 <= cap(yyv3995) {
					yyv3995 = yyv3995[:yyrl3995]
				} else {
					yyv3995 = make([]PersistentVolume, yyrl3995)
				}
			} else {
				yyv3995 = make([]PersistentVolume, yyrl3995)
			}
			yyc3995 = true
			yyrr3995 = len(yyv3995)
			if yyrg3995 {
				copy(yyv3995, yyv23995)
			}
		} else if yyl3995 != len(yyv3995) {
			yyv3995 = yyv3995[:yyl3995]
			yyc3995 = true
		}
		yyj3995 := 0
		for ; yyj3995 < yyrr3995; yyj3995++ {
			yyh3995.ElemContainerState(yyj3995)
			if r.TryDecodeAsNil() {
				yyv3995[yyj3995] = PersistentVolume{}
			} else {
				yyv3996 := &yyv3995[yyj3995]
				yyv3996.CodecDecodeSelf(d)
			}

		}
		if yyrt3995 {
			for ; yyj3995 < yyl3995; yyj3995++ {
				yyv3995 = append(yyv3995, PersistentVolume{})
				yyh3995.ElemContainerState(yyj3995)
				if r.TryDecodeAsNil() {
					yyv3995[yyj3995] = PersistentVolume{}
				} else {
					yyv3997 := &yyv3995[yyj3995]
					yyv3997.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3995 := 0
		for ; !r.CheckBreak(); yyj3995++ {

			if yyj3995 >= len(yyv3995) {
				yyv3995 = append(yyv3995, PersistentVolume{}) // var yyz3995 PersistentVolume
				yyc3995 = true
			}
			yyh3995.ElemContainerState(yyj3995)
			if yyj3995 < len(yyv3995) {
				if r.TryDecodeAsNil() {
					yyv3995[yyj3995] = PersistentVolume{}
				} else {
					yyv3998 := &yyv3995[yyj3995]
					yyv3998.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3995 < len(yyv3995) {
			yyv3995 = yyv3995[:yyj3995]
			yyc3995 = true
		} else if yyj3995 == 0 && yyv3995 == nil {
			yyv3995 = []PersistentVolume{}
			yyc3995 = true
		}
	}
	yyh3995.End()
	if yyc3995 {
		*v = yyv3995
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3999 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4000 := &yyv3999
		yy4000.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4001 := *v
	yyh4001, yyl4001 := z.DecSliceHelperStart()
	var yyc4001 bool
	if yyl4001 == 0 {
		if yyv4001 == nil {
			yyv4001 = []PersistentVolumeClaim{}
			yyc4001 = true
		} else if len(yyv4001) != 0 {
			yyv4001 = yyv4001[:0]
			yyc4001 = true
		}
	} else if yyl4001 > 0 {
		var yyrr4001, yyrl4001 int
		var yyrt4001 bool
		if yyl4001 > cap(yyv4001) {

			yyrg4001 := len(yyv4001) > 0
			yyv24001 := yyv4001
			yyrl4001, yyrt4001 = z.DecInferLen(yyl4001, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4001 {
				if yyrl4001 <= cap(yyv4001) {
					yyv4001 = yyv4001[:yyrl4001]
				} else {
					yyv4001 = make([]PersistentVolumeClaim, yyrl4001)
				}
			} else {
				yyv4001 = make([]PersistentVolumeClaim, yyrl4001)
			}
			yyc4001 = true
			yyrr4001 = len(yyv4001)
			if yyrg4001 {
				copy(yyv4001, yyv24001)
			}
		} else if yyl4001 != len(yyv4001) {
			yyv4001 = yyv4001[:yyl4001]
			yyc4001 = true
		}
		yyj4001 := 0
		for ; yyj4001 < yyrr4001; yyj4001++ {
			yyh4001.ElemContainerState(yyj4001)
			if r.TryDecodeAsNil() {
				yyv4001[yyj4001] = PersistentVolumeClaim{}
			} else {
				yyv4002 := &yyv4001[yyj4001]
				yyv4002.CodecDecodeSelf(d)
			}

		}
		if yyrt4001 {
			for ; yyj4001 < yyl4001; yyj4001++ {
				yyv4001 = append(yyv4001, PersistentVolumeClaim{})
				yyh4001.ElemContainerState(yyj4001)
				if r.TryDecodeAsNil() {
					yyv4001[yyj4001] = PersistentVolumeClaim{}
				} else {
					yyv4003 := &yyv4001[yyj4001]
					yyv4003.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4001 := 0
		for ; !r.CheckBreak(); yyj4001++ {

			if yyj4001 >= len(yyv4001) {
				yyv4001 = append(yyv4001, PersistentVolumeClaim{}) // var yyz4001 PersistentVolumeClaim
				yyc4001 = true
			}
			yyh4001.ElemContainerState(yyj4001)
			if yyj4001 < len(yyv4001) {
				if r.TryDecodeAsNil() {
					yyv4001[yyj4001] = PersistentVolumeClaim{}
				} else {
					yyv4004 := &yyv4001[yyj4001]
					yyv4004.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4001 < len(yyv4001) {
			yyv4001 = yyv4001[:yyj4001]
			yyc4001 = true
		} else if yyj4001 == 0 && yyv4001 == nil {
			yyv4001 = []PersistentVolumeClaim{}
			yyc4001 = true
		}
	}
	yyh4001.End()
	if yyc4001 {
		*v = yyv4001
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4005 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4006 := &yyv4005
		yy4006.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4007 := *v
	yyh4007, yyl4007 := z.DecSliceHelperStart()
	var yyc4007 bool
	if yyl4007 == 0 {
		if yyv4007 == nil {
			yyv4007 = []DownwardAPIVolumeFile{}
			yyc4007 = true
		} else if len(yyv4007) != 0 {
			yyv4007 = yyv4007[:0]
			yyc4007 = true
		}
	} else if yyl4007 > 0 {
		var yyrr4007, yyrl4007 int
		var yyrt4007 bool
		if yyl4007 > cap(yyv4007) {

			yyrg4007 := len(yyv4007) > 0
			yyv24007 := yyv4007
			yyrl4007, yyrt4007 = z.DecInferLen(yyl4007, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4007 {
				if yyrl4007 <= cap(yyv4007) {
					yyv4007 = yyv4007[:yyrl4007]
				} else {
					yyv4007 = make([]DownwardAPIVolumeFile, yyrl4007)
				}
			} else {
				yyv4007 = make([]DownwardAPIVolumeFile, yyrl4007)
			}
			yyc4007 = true
			yyrr4007 = len(yyv4007)
			if yyrg4007 {
				copy(yyv4007, yyv24007)
			}
		} else if yyl4007 != len(yyv4007) {
			yyv4007 = yyv4007[:yyl4007]
			yyc4007 = true
		}
		yyj4007 := 0
		for ; yyj4007 < yyrr4007; yyj4007++ {
			yyh4007.ElemContainerState(yyj4007)
			if r.TryDecodeAsNil() {
				yyv4007[yyj4007] = DownwardAPIVolumeFile{}
			} else {
				yyv4008 := &yyv4007[yyj4007]
				yyv4008.CodecDecodeSelf(d)
			}

		}
		if yyrt4007 {
			for ; yyj4007 < yyl4007; yyj4007++ {
				yyv4007 = append(yyv4007, DownwardAPIVolumeFile{})
				yyh4007.ElemContainerState(yyj4007)
				if r.TryDecodeAsNil() {
					yyv4007[yyj4007] = DownwardAPIVolumeFile{}
				} else {
					yyv4009 := &yyv4007[yyj4007]
					yyv4009.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4007 := 0
		for ; !r.CheckBreak(); yyj4007++ {

			if yyj4007 >= len(yyv4007) {
				yyv4007 = append(yyv4007, DownwardAPIVolumeFile{}) // var yyz4007 DownwardAPIVolumeFile
				yyc4007 = true
			}
			yyh4007.ElemContainerState(yyj4007)
			if yyj4007 < len(yyv4007) {
				if r.TryDecodeAsNil() {
					yyv4007[yyj4007] = DownwardAPIVolumeFile{}
				} else {
					yyv4010 := &yyv4007[yyj4007]
					yyv4010.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4007 < len(yyv4007) {
			yyv4007 = yyv4007[:yyj4007]
			yyc4007 = true
		} else if yyj4007 == 0 && yyv4007 == nil {
			yyv4007 = []DownwardAPIVolumeFile{}
			yyc4007 = true
		}
	}
	yyh4007.End()
	if yyc4007 {
		*v = yyv4007
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4011 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4012 := &yyv4011
		yy4012.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4013 := *v
	yyh4013, yyl4013 := z.DecSliceHelperStart()
	var yyc4013 bool
	if yyl4013 == 0 {
		if yyv4013 == nil {
			yyv4013 = []HTTPHeader{}
			yyc4013 = true
		} else if len(yyv4013) != 0 {
			yyv4013 = yyv4013[:0]
			yyc4013 = true
		}
	} else if yyl4013 > 0 {
		var yyrr4013, yyrl4013 int
		var yyrt4013 bool
		if yyl4013 > cap(yyv4013) {

			yyrg4013 := len(yyv4013) > 0
			yyv24013 := yyv4013
			yyrl4013, yyrt4013 = z.DecInferLen(yyl4013, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4013 {
				if yyrl4013 <= cap(yyv4013) {
					yyv4013 = yyv4013[:yyrl4013]
				} else {
					yyv4013 = make([]HTTPHeader, yyrl4013)
				}
			} else {
				yyv4013 = make([]HTTPHeader, yyrl4013)
			}
			yyc4013 = true
			yyrr4013 = len(yyv4013)
			if yyrg4013 {
				copy(yyv4013, yyv24013)
			}
		} else if yyl4013 != len(yyv4013) {
			yyv4013 = yyv4013[:yyl4013]
			yyc4013 = true
		}
		yyj4013 := 0
		for ; yyj4013 < yyrr4013; yyj4013++ {
			yyh4013.ElemContainerState(yyj4013)
			if r.TryDecodeAsNil() {
				yyv4013[yyj4013] = HTTPHeader{}
			} else {
				yyv4014 := &yyv4013[yyj4013]
				yyv4014.CodecDecodeSelf(d)
			}

		}
		if yyrt4013 {
			for ; yyj4013 < yyl4013; yyj4013++ {
				yyv4013 = append(yyv4013, HTTPHeader{})
				yyh4013.ElemContainerState(yyj4013)
				if r.TryDecodeAsNil() {
					yyv4013[yyj4013] = HTTPHeader{}
				} else {
					yyv4015 := &yyv4013[yyj4013]
					yyv4015.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4013 := 0
		for ; !r.CheckBreak(); yyj4013++ {

			if yyj4013 >= len(yyv4013) {
				yyv4013 = append(yyv4013, HTTPHeader{}) // var yyz4013 HTTPHeader
				yyc4013 = true
			}
			yyh4013.ElemContainerState(yyj4013)
			if yyj4013 < len(yyv4013) {
				if r.TryDecodeAsNil() {
					yyv4013[yyj4013] = HTTPHeader{}
				} else {
					yyv4016 := &yyv4013[yyj4013]
					yyv4016.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4013 < len(yyv4013) {
			yyv4013 = yyv4013[:yyj4013]
			yyc4013 = true
		} else if yyj4013 == 0 && yyv4013 == nil {
			yyv4013 = []HTTPHeader{}
			yyc4013 = true
		}
	}
	yyh4013.End()
	if yyc4013 {
		*v = yyv4013
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4017 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4017.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4018 := *v
	yyh4018, yyl4018 := z.DecSliceHelperStart()
	var yyc4018 bool
	if yyl4018 == 0 {
		if yyv4018 == nil {
			yyv4018 = []Capability{}
			yyc4018 = true
		} else if len(yyv4018) != 0 {
			yyv4018 = yyv4018[:0]
			yyc4018 = true
		}
	} else if yyl4018 > 0 {
		var yyrr4018, yyrl4018 int
		var yyrt4018 bool
		if yyl4018 > cap(yyv4018) {

			yyrl4018, yyrt4018 = z.DecInferLen(yyl4018, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4018 {
				if yyrl4018 <= cap(yyv4018) {
					yyv4018 = yyv4018[:yyrl4018]
				} else {
					yyv4018 = make([]Capability, yyrl4018)
				}
			} else {
				yyv4018 = make([]Capability, yyrl4018)
			}
			yyc4018 = true
			yyrr4018 = len(yyv4018)
		} else if yyl4018 != len(yyv4018) {
			yyv4018 = yyv4018[:yyl4018]
			yyc4018 = true
		}
		yyj4018 := 0
		for ; yyj4018 < yyrr4018; yyj4018++ {
			yyh4018.ElemContainerState(yyj4018)
			if r.TryDecodeAsNil() {
				yyv4018[yyj4018] = ""
			} else {
				yyv4018[yyj4018] = Capability(r.DecodeString())
			}

		}
		if yyrt4018 {
			for ; yyj4018 < yyl4018; yyj4018++ {
				yyv4018 = append(yyv4018, "")
				yyh4018.ElemContainerState(yyj4018)
				if r.TryDecodeAsNil() {
					yyv4018[yyj4018] = ""
				} else {
					yyv4018[yyj4018] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4018 := 0
		for ; !r.CheckBreak(); yyj4018++ {

			if yyj4018 >= len(yyv4018) {
				yyv4018 = append(yyv4018, "") // var yyz4018 Capability
				yyc4018 = true
			}
			yyh4018.ElemContainerState(yyj4018)
			if yyj4018 < len(yyv4018) {
				if r.TryDecodeAsNil() {
					yyv4018[yyj4018] = ""
				} else {
					yyv4018[yyj4018] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4018 < len(yyv4018) {
			yyv4018 = yyv4018[:yyj4018]
			yyc4018 = true
		} else if yyj4018 == 0 && yyv4018 == nil {
			yyv4018 = []Capability{}
			yyc4018 = true
		}
	}
	yyh4018.End()
	if yyc4018 {
		*v = yyv4018
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4022 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4023 := &yyv4022
		yy4023.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4024 := *v
	yyh4024, yyl4024 := z.DecSliceHelperStart()
	var yyc4024 bool
	if yyl4024 == 0 {
		if yyv4024 == nil {
			yyv4024 = []ContainerPort{}
			yyc4024 = true
		} else if len(yyv4024) != 0 {
			yyv4024 = yyv4024[:0]
			yyc4024 = true
		}
	} else if yyl4024 > 0 {
		var yyrr4024, yyrl4024 int
		var yyrt4024 bool
		if yyl4024 > cap(yyv4024) {

			yyrg4024 := len(yyv4024) > 0
			yyv24024 := yyv4024
			yyrl4024, yyrt4024 = z.DecInferLen(yyl4024, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4024 {
				if yyrl4024 <= cap(yyv4024) {
					yyv4024 = yyv4024[:yyrl4024]
				} else {
					yyv4024 = make([]ContainerPort, yyrl4024)
				}
			} else {
				yyv4024 = make([]ContainerPort, yyrl4024)
			}
			yyc4024 = true
			yyrr4024 = len(yyv4024)
			if yyrg4024 {
				copy(yyv4024, yyv24024)
			}
		} else if yyl4024 != len(yyv4024) {
			yyv4024 = yyv4024[:yyl4024]
			yyc4024 = true
		}
		yyj4024 := 0
		for ; yyj4024 < yyrr4024; yyj4024++ {
			yyh4024.ElemContainerState(yyj4024)
			if r.TryDecodeAsNil() {
				yyv4024[yyj4024] = ContainerPort{}
			} else {
				yyv4025 := &yyv4024[yyj4024]
				yyv4025.CodecDecodeSelf(d)
			}

		}
		if yyrt4024 {
			for ; yyj4024 < yyl4024; yyj4024++ {
				yyv4024 = append(yyv4024, ContainerPort{})
				yyh4024.ElemContainerState(yyj4024)
				if r.TryDecodeAsNil() {
					yyv4024[yyj4024] = ContainerPort{}
				} else {
					yyv4026 := &yyv4024[yyj4024]
					yyv4026.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4024 := 0
		for ; !r.CheckBreak(); yyj4024++ {

			if yyj4024 >= len(yyv4024) {
				yyv4024 = append(yyv4024, ContainerPort{}) // var yyz4024 ContainerPort
				yyc4024 = true
			}
			yyh4024.ElemContainerState(yyj4024)
			if yyj4024 < len(yyv4024) {
				if r.TryDecodeAsNil() {
					yyv4024[yyj4024] = ContainerPort{}
				} else {
					yyv4027 := &yyv4024[yyj4024]
					yyv4027.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4024 < len(yyv4024) {
			yyv4024 = yyv4024[:yyj4024]
			yyc4024 = true
		} else if yyj4024 == 0 && yyv4024 == nil {
			yyv4024 = []ContainerPort{}
			yyc4024 = true
		}
	}
	yyh4024.End()
	if yyc4024 {
		*v = yyv4024
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4028 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4029 := &yyv4028
		yy4029.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4030 := *v
	yyh4030, yyl4030 := z.DecSliceHelperStart()
	var yyc4030 bool
	if yyl4030 == 0 {
		if yyv4030 == nil {
			yyv4030 = []EnvVar{}
			yyc4030 = true
		} else if len(yyv4030) != 0 {
			yyv4030 = yyv4030[:0]
			yyc4030 = true
		}
	} else if yyl4030 > 0 {
		var yyrr4030, yyrl4030 int
		var yyrt4030 bool
		if yyl4030 > cap(yyv4030) {

			yyrg4030 := len(yyv4030) > 0
			yyv24030 := yyv4030
			yyrl4030, yyrt4030 = z.DecInferLen(yyl4030, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4030 {
				if yyrl4030 <= cap(yyv4030) {
					yyv4030 = yyv4030[:yyrl4030]
				} else {
					yyv4030 = make([]EnvVar, yyrl4030)
				}
			} else {
				yyv4030 = make([]EnvVar, yyrl4030)
			}
			yyc4030 = true
			yyrr4030 = len(yyv4030)
			if yyrg4030 {
				copy(yyv4030, yyv24030)
			}
		} else if yyl4030 != len(yyv4030) {
			yyv4030 = yyv4030[:yyl4030]
			yyc4030 = true
		}
		yyj4030 := 0
		for ; yyj4030 < yyrr4030; yyj4030++ {
			yyh4030.ElemContainerState(yyj4030)
			if r.TryDecodeAsNil() {
				yyv4030[yyj4030] = EnvVar{}
			} else {
				yyv4031 := &yyv4030[yyj4030]
				yyv4031.CodecDecodeSelf(d)
			}

		}
		if yyrt4030 {
			for ; yyj4030 < yyl4030; yyj4030++ {
				yyv4030 = append(yyv4030, EnvVar{})
				yyh4030.ElemContainerState(yyj4030)
				if r.TryDecodeAsNil() {
					yyv4030[yyj4030] = EnvVar{}
				} else {
					yyv4032 := &yyv4030[yyj4030]
					yyv4032.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4030 := 0
		for ; !r.CheckBreak(); yyj4030++ {

			if yyj4030 >= len(yyv4030) {
				yyv4030 = append(yyv4030, EnvVar{}) // var yyz4030 EnvVar
				yyc4030 = true
			}
			yyh4030.ElemContainerState(yyj4030)
			if yyj4030 < len(yyv4030) {
				if r.TryDecodeAsNil() {
					yyv4030[yyj4030] = EnvVar{}
				} else {
					yyv4033 := &yyv4030[yyj4030]
					yyv4033.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4030 < len(yyv4030) {
			yyv4030 = yyv4030[:yyj4030]
			yyc4030 = true
		} else if yyj4030 == 0 && yyv4030 == nil {
			yyv4030 = []EnvVar{}
			yyc4030 = true
		}
	}
	yyh4030.End()
	if yyc4030 {
		*v = yyv4030
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4034 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4035 := &yyv4034
		yy4035.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4036 := *v
	yyh4036, yyl4036 := z.DecSliceHelperStart()
	var yyc4036 bool
	if yyl4036 == 0 {
		if yyv4036 == nil {
			yyv4036 = []VolumeMount{}
			yyc4036 = true
		} else if len(yyv4036) != 0 {
			yyv4036 = yyv4036[:0]
			yyc4036 = true
		}
	} else if yyl4036 > 0 {
		var yyrr4036, yyrl4036 int
		var yyrt4036 bool
		if yyl4036 > cap(yyv4036) {

			yyrg4036 := len(yyv4036) > 0
			yyv24036 := yyv4036
			yyrl4036, yyrt4036 = z.DecInferLen(yyl4036, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4036 {
				if yyrl4036 <= cap(yyv4036) {
					yyv4036 = yyv4036[:yyrl4036]
				} else {
					yyv4036 = make([]VolumeMount, yyrl4036)
				}
			} else {
				yyv4036 = make([]VolumeMount, yyrl4036)
			}
			yyc4036 = true
			yyrr4036 = len(yyv4036)
			if yyrg4036 {
				copy(yyv4036, yyv24036)
			}
		} else if yyl4036 != len(yyv4036) {
			yyv4036 = yyv4036[:yyl4036]
			yyc4036 = true
		}
		yyj4036 := 0
		for ; yyj4036 < yyrr4036; yyj4036++ {
			yyh4036.ElemContainerState(yyj4036)
			if r.TryDecodeAsNil() {
				yyv4036[yyj4036] = VolumeMount{}
			} else {
				yyv4037 := &yyv4036[yyj4036]
				yyv4037.CodecDecodeSelf(d)
			}

		}
		if yyrt4036 {
			for ; yyj4036 < yyl4036; yyj4036++ {
				yyv4036 = append(yyv4036, VolumeMount{})
				yyh4036.ElemContainerState(yyj4036)
				if r.TryDecodeAsNil() {
					yyv4036[yyj4036] = VolumeMount{}
				} else {
					yyv4038 := &yyv4036[yyj4036]
					yyv4038.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4036 := 0
		for ; !r.CheckBreak(); yyj4036++ {

			if yyj4036 >= len(yyv4036) {
				yyv4036 = append(yyv4036, VolumeMount{}) // var yyz4036 VolumeMount
				yyc4036 = true
			}
			yyh4036.ElemContainerState(yyj4036)
			if yyj4036 < len(yyv4036) {
				if r.TryDecodeAsNil() {
					yyv4036[yyj4036] = VolumeMount{}
				} else {
					yyv4039 := &yyv4036[yyj4036]
					yyv4039.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4036 < len(yyv4036) {
			yyv4036 = yyv4036[:yyj4036]
			yyc4036 = true
		} else if yyj4036 == 0 && yyv4036 == nil {
			yyv4036 = []VolumeMount{}
			yyc4036 = true
		}
	}
	yyh4036.End()
	if yyc4036 {
		*v = yyv4036
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4040 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4041 := &yyv4040
		yy4041.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4042 := *v
	yyh4042, yyl4042 := z.DecSliceHelperStart()
	var yyc4042 bool
	if yyl4042 == 0 {
		if yyv4042 == nil {
			yyv4042 = []Pod{}
			yyc4042 = true
		} else if len(yyv4042) != 0 {
			yyv4042 = yyv4042[:0]
			yyc4042 = true
		}
	} else if yyl4042 > 0 {
		var yyrr4042, yyrl4042 int
		var yyrt4042 bool
		if yyl4042 > cap(yyv4042) {

			yyrg4042 := len(yyv4042) > 0
			yyv24042 := yyv4042
			yyrl4042, yyrt4042 = z.DecInferLen(yyl4042, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4042 {
				if yyrl4042 <= cap(yyv4042) {
					yyv4042 = yyv4042[:yyrl4042]
				} else {
					yyv4042 = make([]Pod, yyrl4042)
				}
			} else {
				yyv4042 = make([]Pod, yyrl4042)
			}
			yyc4042 = true
			yyrr4042 = len(yyv4042)
			if yyrg4042 {
				copy(yyv4042, yyv24042)
			}
		} else if yyl4042 != len(yyv4042) {
			yyv4042 = yyv4042[:yyl4042]
			yyc4042 = true
		}
		yyj4042 := 0
		for ; yyj4042 < yyrr4042; yyj4042++ {
			yyh4042.ElemContainerState(yyj4042)
			if r.TryDecodeAsNil() {
				yyv4042[yyj4042] = Pod{}
			} else {
				yyv4043 := &yyv4042[yyj4042]
				yyv4043.CodecDecodeSelf(d)
			}

		}
		if yyrt4042 {
			for ; yyj4042 < yyl4042; yyj4042++ {
				yyv4042 = append(yyv4042, Pod{})
				yyh4042.ElemContainerState(yyj4042)
				if r.TryDecodeAsNil() {
					yyv4042[yyj4042] = Pod{}
				} else {
					yyv4044 := &yyv4042[yyj4042]
					yyv4044.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4042 := 0
		for ; !r.CheckBreak(); yyj4042++ {

			if yyj4042 >= len(yyv4042) {
				yyv4042 = append(yyv4042, Pod{}) // var yyz4042 Pod
				yyc4042 = true
			}
			yyh4042.ElemContainerState(yyj4042)
			if yyj4042 < len(yyv4042) {
				if r.TryDecodeAsNil() {
					yyv4042[yyj4042] = Pod{}
				} else {
					yyv4045 := &yyv4042[yyj4042]
					yyv4045.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4042 < len(yyv4042) {
			yyv4042 = yyv4042[:yyj4042]
			yyc4042 = true
		} else if yyj4042 == 0 && yyv4042 == nil {
			yyv4042 = []Pod{}
			yyc4042 = true
		}
	}
	yyh4042.End()
	if yyc4042 {
		*v = yyv4042
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4046 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4047 := &yyv4046
		yy4047.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4048 := *v
	yyh4048, yyl4048 := z.DecSliceHelperStart()
	var yyc4048 bool
	if yyl4048 == 0 {
		if yyv4048 == nil {
			yyv4048 = []NodeSelectorTerm{}
			yyc4048 = true
		} else if len(yyv4048) != 0 {
			yyv4048 = yyv4048[:0]
			yyc4048 = true
		}
	} else if yyl4048 > 0 {
		var yyrr4048, yyrl4048 int
		var yyrt4048 bool
		if yyl4048 > cap(yyv4048) {

			yyrg4048 := len(yyv4048) > 0
			yyv24048 := yyv4048
			yyrl4048, yyrt4048 = z.DecInferLen(yyl4048, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4048 {
				if yyrl4048 <= cap(yyv4048) {
					yyv4048 = yyv4048[:yyrl4048]
				} else {
					yyv4048 = make([]NodeSelectorTerm, yyrl4048)
				}
			} else {
				yyv4048 = make([]NodeSelectorTerm, yyrl4048)
			}
			yyc4048 = true
			yyrr4048 = len(yyv4048)
			if yyrg4048 {
				copy(yyv4048, yyv24048)
			}
		} else if yyl4048 != len(yyv4048) {
			yyv4048 = yyv4048[:yyl4048]
			yyc4048 = true
		}
		yyj4048 := 0
		for ; yyj4048 < yyrr4048; yyj4048++ {
			yyh4048.ElemContainerState(yyj4048)
			if r.TryDecodeAsNil() {
				yyv4048[yyj4048] = NodeSelectorTerm{}
			} else {
				yyv4049 := &yyv4048[yyj4048]
				yyv4049.CodecDecodeSelf(d)
			}

		}
		if yyrt4048 {
			for ; yyj4048 < yyl4048; yyj4048++ {
				yyv4048 = append(yyv4048, NodeSelectorTerm{})
				yyh4048.ElemContainerState(yyj4048)
				if r.TryDecodeAsNil() {
					yyv4048[yyj4048] = NodeSelectorTerm{}
				} else {
					yyv4050 := &yyv4048[yyj4048]
					yyv4050.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4048 := 0
		for ; !r.CheckBreak(); yyj4048++ {

			if yyj4048 >= len(yyv4048) {
				yyv4048 = append(yyv4048, NodeSelectorTerm{}) // var yyz4048 NodeSelectorTerm
				yyc4048 = true
			}
			yyh4048.ElemContainerState(yyj4048)
			if yyj4048 < len(yyv4048) {
				if r.TryDecodeAsNil() {
					yyv4048[yyj4048] = NodeSelectorTerm{}
				} else {
					yyv4051 := &yyv4048[yyj4048]
					yyv4051.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4048 < len(yyv4048) {
			yyv4048 = yyv4048[:yyj4048]
			yyc4048 = true
		} else if yyj4048 == 0 && yyv4048 == nil {
			yyv4048 = []NodeSelectorTerm{}
			yyc4048 = true
		}
	}
	yyh4048.End()
	if yyc4048 {
		*v = yyv4048
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4052 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4053 := &yyv4052
		yy4053.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4054 := *v
	yyh4054, yyl4054 := z.DecSliceHelperStart()
	var yyc4054 bool
	if yyl4054 == 0 {
		if yyv4054 == nil {
			yyv4054 = []NodeSelectorRequirement{}
			yyc4054 = true
		} else if len(yyv4054) != 0 {
			yyv4054 = yyv4054[:0]
			yyc4054 = true
		}
	} else if yyl4054 > 0 {
		var yyrr4054, yyrl4054 int
		var yyrt4054 bool
		if yyl4054 > cap(yyv4054) {

			yyrg4054 := len(yyv4054) > 0
			yyv24054 := yyv4054
			yyrl4054, yyrt4054 = z.DecInferLen(yyl4054, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4054 {
				if yyrl4054 <= cap(yyv4054) {
					yyv4054 = yyv4054[:yyrl4054]
				} else {
					yyv4054 = make([]NodeSelectorRequirement, yyrl4054)
				}
			} else {
				yyv4054 = make([]NodeSelectorRequirement, yyrl4054)
			}
			yyc4054 = true
			yyrr4054 = len(yyv4054)
			if yyrg4054 {
				copy(yyv4054, yyv24054)
			}
		} else if yyl4054 != len(yyv4054) {
			yyv4054 = yyv4054[:yyl4054]
			yyc4054 = true
		}
		yyj4054 := 0
		for ; yyj4054 < yyrr4054; yyj4054++ {
			yyh4054.ElemContainerState(yyj4054)
			if r.TryDecodeAsNil() {
				yyv4054[yyj4054] = NodeSelectorRequirement{}
			} else {
				yyv4055 := &yyv4054[yyj4054]
				yyv4055.CodecDecodeSelf(d)
			}

		}
		if yyrt4054 {
			for ; yyj4054 < yyl4054; yyj4054++ {
				yyv4054 = append(yyv4054, NodeSelectorRequirement{})
				yyh4054.ElemContainerState(yyj4054)
				if r.TryDecodeAsNil() {
					yyv4054[yyj4054] = NodeSelectorRequirement{}
				} else {
					yyv4056 := &yyv4054[yyj4054]
					yyv4056.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4054 := 0
		for ; !r.CheckBreak(); yyj4054++ {

			if yyj4054 >= len(yyv4054) {
				yyv4054 = append(yyv4054, NodeSelectorRequirement{}) // var yyz4054 NodeSelectorRequirement
				yyc4054 = true
			}
			yyh4054.ElemContainerState(yyj4054)
			if yyj4054 < len(yyv4054) {
				if r.TryDecodeAsNil() {
					yyv4054[yyj4054] = NodeSelectorRequirement{}
				} else {
					yyv4057 := &yyv4054[yyj4054]
					yyv4057.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4054 < len(yyv4054) {
			yyv4054 = yyv4054[:yyj4054]
			yyc4054 = true
		} else if yyj4054 == 0 && yyv4054 == nil {
			yyv4054 = []NodeSelectorRequirement{}
			yyc4054 = true
		}
	}
	yyh4054.End()
	if yyc4054 {
		*v = yyv4054
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4058 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4059 := &yyv4058
		yy4059.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4060 := *v
	yyh4060, yyl4060 := z.DecSliceHelperStart()
	var yyc4060 bool
	if yyl4060 == 0 {
		if yyv4060 == nil {
			yyv4060 = []PreferredSchedulingTerm{}
			yyc4060 = true
		} else if len(yyv4060) != 0 {
			yyv4060 = yyv4060[:0]
			yyc4060 = true
		}
	} else if yyl4060 > 0 {
		var yyrr4060, yyrl4060 int
		var yyrt4060 bool
		if yyl4060 > cap(yyv4060) {

			yyrg4060 := len(yyv4060) > 0
			yyv24060 := yyv4060
			yyrl4060, yyrt4060 = z.DecInferLen(yyl4060, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4060 {
				if yyrl4060 <= cap(yyv4060) {
					yyv4060 = yyv4060[:yyrl4060]
				} else {
					yyv4060 = make([]PreferredSchedulingTerm, yyrl4060)
				}
			} else {
				yyv4060 = make([]PreferredSchedulingTerm, yyrl4060)
			}
			yyc4060 = true
			yyrr4060 = len(yyv4060)
			if yyrg4060 {
				copy(yyv4060, yyv24060)
			}
		} else if yyl4060 != len(yyv4060) {
			yyv4060 = yyv4060[:yyl4060]
			yyc4060 = true
		}
		yyj4060 := 0
		for ; yyj4060 < yyrr4060; yyj4060++ {
			yyh4060.ElemContainerState(yyj4060)
			if r.TryDecodeAsNil() {
				yyv4060[yyj4060] = PreferredSchedulingTerm{}
			} else {
				yyv4061 := &yyv4060[yyj4060]
				yyv4061.CodecDecodeSelf(d)
			}

		}
		if yyrt4060 {
			for ; yyj4060 < yyl4060; yyj4060++ {
				yyv4060 = append(yyv4060, PreferredSchedulingTerm{})
				yyh4060.ElemContainerState(yyj4060)
				if r.TryDecodeAsNil() {
					yyv4060[yyj4060] = PreferredSchedulingTerm{}
				} else {
					yyv4062 := &yyv4060[yyj4060]
					yyv4062.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4060 := 0
		for ; !r.CheckBreak(); yyj4060++ {

			if yyj4060 >= len(yyv4060) {
				yyv4060 = append(yyv4060, PreferredSchedulingTerm{}) // var yyz4060 PreferredSchedulingTerm
				yyc4060 = true
			}
			yyh4060.ElemContainerState(yyj4060)
			if yyj4060 < len(yyv4060) {
				if r.TryDecodeAsNil() {
					yyv4060[yyj4060] = PreferredSchedulingTerm{}
				} else {
					yyv4063 := &yyv4060[yyj4060]
					yyv4063.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4060 < len(yyv4060) {
			yyv4060 = yyv4060[:yyj4060]
			yyc4060 = true
		} else if yyj4060 == 0 && yyv4060 == nil {
			yyv4060 = []PreferredSchedulingTerm{}
			yyc4060 = true
		}
	}
	yyh4060.End()
	if yyc4060 {
		*v = yyv4060
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4064 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4065 := &yyv4064
		yy4065.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4066 := *v
	yyh4066, yyl4066 := z.DecSliceHelperStart()
	var yyc4066 bool
	if yyl4066 == 0 {
		if yyv4066 == nil {
			yyv4066 = []LabelSelectorRequirement{}
			yyc4066 = true
		} else if len(yyv4066) != 0 {
			yyv4066 = yyv4066[:0]
			yyc4066 = true
		}
	} else if yyl4066 > 0 {
		var yyrr4066, yyrl4066 int
		var yyrt4066 bool
		if yyl4066 > cap(yyv4066) {

			yyrg4066 := len(yyv4066) > 0
			yyv24066 := yyv4066
			yyrl4066, yyrt4066 = z.DecInferLen(yyl4066, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4066 {
				if yyrl4066 <= cap(yyv4066) {
					yyv4066 = yyv4066[:yyrl4066]
				} else {
					yyv4066 = make([]LabelSelectorRequirement, yyrl4066)
				}
			} else {
				yyv4066 = make([]LabelSelectorRequirement, yyrl4066)
			}
			yyc4066 = true
			yyrr4066 = len(yyv4066)
			if yyrg4066 {
				copy(yyv4066, yyv24066)
			}
		} else if yyl4066 != len(yyv4066) {
			yyv4066 = yyv4066[:yyl4066]
			yyc4066 = true
		}
		yyj4066 := 0
		for ; yyj4066 < yyrr4066; yyj4066++ {
			yyh4066.ElemContainerState(yyj4066)
			if r.TryDecodeAsNil() {
				yyv4066[yyj4066] = LabelSelectorRequirement{}
			} else {
				yyv4067 := &yyv4066[yyj4066]
				yyv4067.CodecDecodeSelf(d)
			}

		}
		if yyrt4066 {
			for ; yyj4066 < yyl4066; yyj4066++ {
				yyv4066 = append(yyv4066, LabelSelectorRequirement{})
				yyh4066.ElemContainerState(yyj4066)
				if r.TryDecodeAsNil() {
					yyv4066[yyj4066] = LabelSelectorRequirement{}
				} else {
					yyv4068 := &yyv4066[yyj4066]
					yyv4068.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4066 := 0
		for ; !r.CheckBreak(); yyj4066++ {

			if yyj4066 >= len(yyv4066) {
				yyv4066 = append(yyv4066, LabelSelectorRequirement{}) // var yyz4066 LabelSelectorRequirement
				yyc4066 = true
			}
			yyh4066.ElemContainerState(yyj4066)
			if yyj4066 < len(yyv4066) {
				if r.TryDecodeAsNil() {
					yyv4066[yyj4066] = LabelSelectorRequirement{}
				} else {
					yyv4069 := &yyv4066[yyj4066]
					yyv4069.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4066 < len(yyv4066) {
			yyv4066 = yyv4066[:yyj4066]
			yyc4066 = true
		} else if yyj4066 == 0 && yyv4066 == nil {
			yyv4066 = []LabelSelectorRequirement{}
			yyc4066 = true
		}
	}
	yyh4066.End()
	if yyc4066 {
		*v = yyv4066
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4070 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4071 := &yyv4070
		yy4071.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4072 := *v
	yyh4072, yyl4072 := z.DecSliceHelperStart()
	var yyc4072 bool
	if yyl4072 == 0 {
		if yyv4072 == nil {
			yyv4072 = []PodAffinityTerm{}
			yyc4072 = true
		} else if len(yyv4072) != 0 {
			yyv4072 = yyv4072[:0]
			yyc4072 = true
		}
	} else if yyl4072 > 0 {
		var yyrr4072, yyrl4072 int
		var yyrt4072 bool
		if yyl4072 > cap(yyv4072) {

			yyrg4072 := len(yyv4072) > 0
			yyv24072 := yyv4072
			yyrl4072, yyrt4072 = z.DecInferLen(yyl4072, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4072 {
				if yyrl4072 <= cap(yyv4072) {
					yyv4072 = yyv4072[:yyrl4072]
				} else {
					yyv4072 = make([]PodAffinityTerm, yyrl4072)
				}
			} else {
				yyv4072 = make([]PodAffinityTerm, yyrl4072)
			}
			yyc4072 = true
			yyrr4072 = len(yyv4072)
			if yyrg4072 {
				copy(yyv4072, yyv24072)
			}
		} else if yyl4072 != len(yyv4072) {
			yyv4072 = yyv4072[:yyl4072]
			yyc4072 = true
		}
		yyj4072 := 0
		for ; yyj4072 < yyrr4072; yyj4072++ {
			yyh4072.ElemContainerState(yyj4072)
			if r.TryDecodeAsNil() {
				yyv4072[yyj4072] = PodAffinityTerm{}
			} else {
				yyv4073 := &yyv4072[yyj4072]
				yyv4073.CodecDecodeSelf(d)
			}

		}
		if yyrt4072 {
			for ; yyj4072 < yyl4072; yyj4072++ {
				yyv4072 = append(yyv4072, PodAffinityTerm{})
				yyh4072.ElemContainerState(yyj4072)
				if r.TryDecodeAsNil() {
					yyv4072[yyj4072] = PodAffinityTerm{}
				} else {
					yyv4074 := &yyv4072[yyj4072]
					yyv4074.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4072 := 0
		for ; !r.CheckBreak(); yyj4072++ {

			if yyj4072 >= len(yyv4072) {
				yyv4072 = append(yyv4072, PodAffinityTerm{}) // var yyz4072 PodAffinityTerm
				yyc4072 = true
			}
			yyh4072.ElemContainerState(yyj4072)
			if yyj4072 < len(yyv4072) {
				if r.TryDecodeAsNil() {
					yyv4072[yyj4072] = PodAffinityTerm{}
				} else {
					yyv4075 := &yyv4072[yyj4072]
					yyv4075.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4072 < len(yyv4072) {
			yyv4072 = yyv4072[:yyj4072]
			yyc4072 = true
		} else if yyj4072 == 0 && yyv4072 == nil {
			yyv4072 = []PodAffinityTerm{}
			yyc4072 = true
		}
	}
	yyh4072.End()
	if yyc4072 {
		*v = yyv4072
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4076 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4077 := &yyv4076
		yy4077.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4078 := *v
	yyh4078, yyl4078 := z.DecSliceHelperStart()
	var yyc4078 bool
	if yyl4078 == 0 {
		if yyv4078 == nil {
			yyv4078 = []WeightedPodAffinityTerm{}
			yyc4078 = true
		} else if len(yyv4078) != 0 {
			yyv4078 = yyv4078[:0]
			yyc4078 = true
		}
	} else if yyl4078 > 0 {
		var yyrr4078, yyrl4078 int
		var yyrt4078 bool
		if yyl4078 > cap(yyv4078) {

			yyrg4078 := len(yyv4078) > 0
			yyv24078 := yyv4078
			yyrl4078, yyrt4078 = z.DecInferLen(yyl4078, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4078 {
				if yyrl4078 <= cap(yyv4078) {
					yyv4078 = yyv4078[:yyrl4078]
				} else {
					yyv4078 = make([]WeightedPodAffinityTerm, yyrl4078)
				}
			} else {
				yyv4078 = make([]WeightedPodAffinityTerm, yyrl4078)
			}
			yyc4078 = true
			yyrr4078 = len(yyv4078)
			if yyrg4078 {
				copy(yyv4078, yyv24078)
			}
		} else if yyl4078 != len(yyv4078) {
			yyv4078 = yyv4078[:yyl4078]
			yyc4078 = true
		}
		yyj4078 := 0
		for ; yyj4078 < yyrr4078; yyj4078++ {
			yyh4078.ElemContainerState(yyj4078)
			if r.TryDecodeAsNil() {
				yyv4078[yyj4078] = WeightedPodAffinityTerm{}
			} else {
				yyv4079 := &yyv4078[yyj4078]
				yyv4079.CodecDecodeSelf(d)
			}

		}
		if yyrt4078 {
			for ; yyj4078 < yyl4078; yyj4078++ {
				yyv4078 = append(yyv4078, WeightedPodAffinityTerm{})
				yyh4078.ElemContainerState(yyj4078)
				if r.TryDecodeAsNil() {
					yyv4078[yyj4078] = WeightedPodAffinityTerm{}
				} else {
					yyv4080 := &yyv4078[yyj4078]
					yyv4080.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4078 := 0
		for ; !r.CheckBreak(); yyj4078++ {

			if yyj4078 >= len(yyv4078) {
				yyv4078 = append(yyv4078, WeightedPodAffinityTerm{}) // var yyz4078 WeightedPodAffinityTerm
				yyc4078 = true
			}
			yyh4078.ElemContainerState(yyj4078)
			if yyj4078 < len(yyv4078) {
				if r.TryDecodeAsNil() {
					yyv4078[yyj4078] = WeightedPodAffinityTerm{}
				} else {
					yyv4081 := &yyv4078[yyj4078]
					yyv4081.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4078 < len(yyv4078) {
			yyv4078 = yyv4078[:yyj4078]
			yyc4078 = true
		} else if yyj4078 == 0 && yyv4078 == nil {
			yyv4078 = []WeightedPodAffinityTerm{}
			yyc4078 = true
		}
	}
	yyh4078.End()
	if yyc4078 {
		*v = yyv4078
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4082 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4083 := &yyv4082
		yy4083.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4084 := *v
	yyh4084, yyl4084 := z.DecSliceHelperStart()
	var yyc4084 bool
	if yyl4084 == 0 {
		if yyv4084 == nil {
			yyv4084 = []Namespace{}
			yyc4084 = true
		} else if len(yyv4084) != 0 {
			yyv4084 = yyv4084[:0]
			yyc4084 = true
		}
	} else if yyl4084 > 0 {
		var yyrr4084, yyrl4084 int
		var yyrt4084 bool
		if yyl4084 > cap(yyv4084) {

			yyrg4084 := len(yyv4084) > 0
			yyv24084 := yyv4084
			yyrl4084, yyrt4084 = z.DecInferLen(yyl4084, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt4084 {
				if yyrl4084 <= cap(yyv4084) {
					yyv4084 = yyv4084[:yyrl4084]
				} else {
					yyv4084 = make([]Namespace, yyrl4084)
				}
			} else {
				yyv4084 = make([]Namespace, yyrl4084)
			}
			yyc4084 = true
			yyrr4084 = len(yyv4084)
			if yyrg4084 {
				copy(yyv4084, yyv24084)
			}
		} else if yyl4084 != len(yyv4084) {
			yyv4084 = yyv4084[:yyl4084]
			yyc4084 = true
		}
		yyj4084 := 0
		for ; yyj4084 < yyrr4084; yyj4084++ {
			yyh4084.ElemContainerState(yyj4084)
			if r.TryDecodeAsNil() {
				yyv4084[yyj4084] = Namespace{}
			} else {
				yyv4085 := &yyv4084[yyj4084]
				yyv4085.CodecDecodeSelf(d)
			}

		}
		if yyrt4084 {
			for ; yyj4084 < yyl4084; yyj4084++ {
				yyv4084 = append(yyv4084, Namespace{})
				yyh4084.ElemContainerState(yyj4084)
				if r.TryDecodeAsNil() {
					yyv4084[yyj4084] = Namespace{}
				} else {
					yyv4086 := &yyv4084[yyj4084]
					yyv4086.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4084 := 0
		for ; !r.CheckBreak(); yyj4084++ {

			if yyj4084 >= len(yyv4084) {
				yyv4084 = append(yyv4084, Namespace{}) // var yyz4084 Namespace
				yyc4084 = true
			}
			yyh4084.ElemContainerState(yyj4084)
			if yyj4084 < len(yyv4084) {
				if r.TryDecodeAsNil() {
					yyv4084[yyj4084] = Namespace{}
				} else {
					yyv4087 := &yyv4084[yyj4084]
					yyv4087.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4084 < len(yyv4084) {
			yyv4084 = yyv4084[:yyj4084]
			yyc4084 = true
		} else if yyj4084 == 0 && yyv4084 == nil {
			yyv4084 = []Namespace{}
			yyc4084 = true
		}
	}
	yyh4084.End()
	if yyc4084 {
		*v = yyv4084
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4088 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4089 := &yyv4088
		yy4089.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4090 := *v
	yyh4090, yyl4090 := z.DecSliceHelperStart()
	var yyc4090 bool
	if yyl4090 == 0 {
		if yyv4090 == nil {
			yyv4090 = []Volume{}
			yyc4090 = true
		} else if len(yyv4090) != 0 {
			yyv4090 = yyv4090[:0]
			yyc4090 = true
		}
	} else if yyl4090 > 0 {
		var yyrr4090, yyrl4090 int
		var yyrt4090 bool
		if yyl4090 > cap(yyv4090) {

			yyrg4090 := len(yyv4090) > 0
			yyv24090 := yyv4090
			yyrl4090, yyrt4090 = z.DecInferLen(yyl4090, z.DecBasicHandle().MaxInitLen, 160)
			if yyrt4090 {
				if yyrl4090 <= cap(yyv4090) {
					yyv4090 = yyv4090[:yyrl4090]
				} else {
					yyv4090 = make([]Volume, yyrl4090)
				}
			} else {
				yyv4090 = make([]Volume, yyrl4090)
			}
			yyc4090 = true
			yyrr4090 = len(yyv4090)
			if yyrg4090 {
				copy(yyv4090, yyv24090)
			}
		} else if yyl4090 != len(yyv4090) {
			yyv4090 = yyv4090[:yyl4090]
			yyc4090 = true
		}
		yyj4090 := 0
		for ; yyj4090 < yyrr4090; yyj4090++ {
			yyh4090.ElemContainerState(yyj4090)
			if r.TryDecodeAsNil() {
				yyv4090[yyj4090] = Volume{}
			} else {
				yyv4091 := &yyv4090[yyj4090]
				yyv4091.CodecDecodeSelf(d)
			}

		}
		if yyrt4090 {
			for ; yyj4090 < yyl4090; yyj4090++ {
				yyv4090 = append(yyv4090, Volume{})
				yyh4090.ElemContainerState(yyj4090)
				if r.TryDecodeAsNil() {
					yyv4090[yyj4090] = Volume{}
				} else {
					yyv4092 := &yyv4090[yyj4090]
					yyv4092.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4090 := 0
		for ; !r.CheckBreak(); yyj4090++ {

			if yyj4090 >= len(yyv4090) {
				yyv4090 = append(yyv4090, Volume{}) // var yyz4090 Volume
				yyc4090 = true
			}
			yyh4090.ElemContainerState(yyj4090)
			if yyj4090 < len(yyv4090) {
				if r.TryDecodeAsNil() {
					yyv4090[yyj4090] = Volume{}
				} else {
					yyv4093 := &yyv4090[yyj4090]
					yyv4093.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4090 < len(yyv4090) {
			yyv4090 = yyv4090[:yyj4090]
			yyc4090 = true
		} else if yyj4090 == 0 && yyv4090 == nil {
			yyv4090 = []Volume{}
			yyc4090 = true
		}
	}
	yyh4090.End()
	if yyc4090 {
		*v = yyv4090
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4094 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4095 := &yyv4094
		yy4095.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4096 := *v
	yyh4096, yyl4096 := z.DecSliceHelperStart()
	var yyc4096 bool
	if yyl4096 == 0 {
		if yyv4096 == nil {
			yyv4096 = []Container{}
			yyc4096 = true
		} else if len(yyv4096) != 0 {
			yyv4096 = yyv4096[:0]
			yyc4096 = true
		}
	} else if yyl4096 > 0 {
		var yyrr4096, yyrl4096 int
		var yyrt4096 bool
		if yyl4096 > cap(yyv4096) {

			yyrg4096 := len(yyv4096) > 0
			yyv24096 := yyv4096
			yyrl4096, yyrt4096 = z.DecInferLen(yyl4096, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4096 {
				if yyrl4096 <= cap(yyv4096) {
					yyv4096 = yyv4096[:yyrl4096]
				} else {
					yyv4096 = make([]Container, yyrl4096)
				}
			} else {
				yyv4096 = make([]Container, yyrl4096)
			}
			yyc4096 = true
			yyrr4096 = len(yyv4096)
			if yyrg4096 {
				copy(yyv4096, yyv24096)
			}
		} else if yyl4096 != len(yyv4096) {
			yyv4096 = yyv4096[:yyl4096]
			yyc4096 = true
		}
		yyj4096 := 0
		for ; yyj4096 < yyrr4096; yyj4096++ {
			yyh4096.ElemContainerState(yyj4096)
			if r.TryDecodeAsNil() {
				yyv4096[yyj4096] = Container{}
			} else {
				yyv4097 := &yyv4096[yyj4096]
				yyv4097.CodecDecodeSelf(d)
			}

		}
		if yyrt4096 {
			for ; yyj4096 < yyl4096; yyj4096++ {
				yyv4096 = append(yyv4096, Container{})
				yyh4096.ElemContainerState(yyj4096)
				if r.TryDecodeAsNil() {
					yyv4096[yyj4096] = Container{}
				} else {
					yyv4098 := &yyv4096[yyj4096]
					yyv4098.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4096 := 0
		for ; !r.CheckBreak(); yyj4096++ {

			if yyj4096 >= len(yyv4096) {
				yyv4096 = append(yyv4096, Container{}) // var yyz4096 Container
				yyc4096 = true
			}
			yyh4096.ElemContainerState(yyj4096)
			if yyj4096 < len(yyv4096) {
				if r.TryDecodeAsNil() {
					yyv4096[yyj4096] = Container{}
				} else {
					yyv4099 := &yyv4096[yyj4096]
					yyv4099.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4096 < len(yyv4096) {
			yyv4096 = yyv4096[:yyj4096]
			yyc4096 = true
		} else if yyj4096 == 0 && yyv4096 == nil {
			yyv4096 = []Container{}
			yyc4096 = true
		}
	}
	yyh4096.End()
	if yyc4096 {
		*v = yyv4096
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4100 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4101 := &yyv4100
		yy4101.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4102 := *v
	yyh4102, yyl4102 := z.DecSliceHelperStart()
	var yyc4102 bool
	if yyl4102 == 0 {
		if yyv4102 == nil {
			yyv4102 = []LocalObjectReference{}
			yyc4102 = true
		} else if len(yyv4102) != 0 {
			yyv4102 = yyv4102[:0]
			yyc4102 = true
		}
	} else if yyl4102 > 0 {
		var yyrr4102, yyrl4102 int
		var yyrt4102 bool
		if yyl4102 > cap(yyv4102) {

			yyrg4102 := len(yyv4102) > 0
			yyv24102 := yyv4102
			yyrl4102, yyrt4102 = z.DecInferLen(yyl4102, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4102 {
				if yyrl4102 <= cap(yyv4102) {
					yyv4102 = yyv4102[:yyrl4102]
				} else {
					yyv4102 = make([]LocalObjectReference, yyrl4102)
				}
			} else {
				yyv4102 = make([]LocalObjectReference, yyrl4102)
			}
			yyc4102 = true
			yyrr4102 = len(yyv4102)
			if yyrg4102 {
				copy(yyv4102, yyv24102)
			}
		} else if yyl4102 != len(yyv4102) {
			yyv4102 = yyv4102[:yyl4102]
			yyc4102 = true
		}
		yyj4102 := 0
		for ; yyj4102 < yyrr4102; yyj4102++ {
			yyh4102.ElemContainerState(yyj4102)
			if r.TryDecodeAsNil() {
				yyv4102[yyj4102] = LocalObjectReference{}
			} else {
				yyv4103 := &yyv4102[yyj4102]
				yyv4103.CodecDecodeSelf(d)
			}

		}
		if yyrt4102 {
			for ; yyj4102 < yyl4102; yyj4102++ {
				yyv4102 = append(yyv4102, LocalObjectReference{})
				yyh4102.ElemContainerState(yyj4102)
				if r.TryDecodeAsNil() {
					yyv4102[yyj4102] = LocalObjectReference{}
				} else {
					yyv4104 := &yyv4102[yyj4102]
					yyv4104.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4102 := 0
		for ; !r.CheckBreak(); yyj4102++ {

			if yyj4102 >= len(yyv4102) {
				yyv4102 = append(yyv4102, LocalObjectReference{}) // var yyz4102 LocalObjectReference
				yyc4102 = true
			}
			yyh4102.ElemContainerState(yyj4102)
			if yyj4102 < len(yyv4102) {
				if r.TryDecodeAsNil() {
					yyv4102[yyj4102] = LocalObjectReference{}
				} else {
					yyv4105 := &yyv4102[yyj4102]
					yyv4105.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4102 < len(yyv4102) {
			yyv4102 = yyv4102[:yyj4102]
			yyc4102 = true
		} else if yyj4102 == 0 && yyv4102 == nil {
			yyv4102 = []LocalObjectReference{}
			yyc4102 = true
		}
	}
	yyh4102.End()
	if yyc4102 {
		*v = yyv4102
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4106 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4107 := &yyv4106
		yy4107.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4108 := *v
	yyh4108, yyl4108 := z.DecSliceHelperStart()
	var yyc4108 bool
	if yyl4108 == 0 {
		if yyv4108 == nil {
			yyv4108 = []PodCondition{}
			yyc4108 = true
		} else if len(yyv4108) != 0 {
			yyv4108 = yyv4108[:0]
			yyc4108 = true
		}
	} else if yyl4108 > 0 {
		var yyrr4108, yyrl4108 int
		var yyrt4108 bool
		if yyl4108 > cap(yyv4108) {

			yyrg4108 := len(yyv4108) > 0
			yyv24108 := yyv4108
			yyrl4108, yyrt4108 = z.DecInferLen(yyl4108, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4108 {
				if yyrl4108 <= cap(yyv4108) {
					yyv4108 = yyv4108[:yyrl4108]
				} else {
					yyv4108 = make([]PodCondition, yyrl4108)
				}
			} else {
				yyv4108 = make([]PodCondition, yyrl4108)
			}
			yyc4108 = true
			yyrr4108 = len(yyv4108)
			if yyrg4108 {
				copy(yyv4108, yyv24108)
			}
		} else if yyl4108 != len(yyv4108) {
			yyv4108 = yyv4108[:yyl4108]
			yyc4108 = true
		}
		yyj4108 := 0
		for ; yyj4108 < yyrr4108; yyj4108++ {
			yyh4108.ElemContainerState(yyj4108)
			if r.TryDecodeAsNil() {
				yyv4108[yyj4108] = PodCondition{}
			} else {
				yyv4109 := &yyv4108[yyj4108]
				yyv4109.CodecDecodeSelf(d)
			}

		}
		if yyrt4108 {
			for ; yyj4108 < yyl4108; yyj4108++ {
				yyv4108 = append(yyv4108, PodCondition{})
				yyh4108.ElemContainerState(yyj4108)
				if r.TryDecodeAsNil() {
					yyv4108[yyj4108] = PodCondition{}
				} else {
					yyv4110 := &yyv4108[yyj4108]
					yyv4110.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4108 := 0
		for ; !r.CheckBreak(); yyj4108++ {

			if yyj4108 >= len(yyv4108) {
				yyv4108 = append(yyv4108, PodCondition{}) // var yyz4108 PodCondition
				yyc4108 = true
			}
			yyh4108.ElemContainerState(yyj4108)
			if yyj4108 < len(yyv4108) {
				if r.TryDecodeAsNil() {
					yyv4108[yyj4108] = PodCondition{}
				} else {
					yyv4111 := &yyv4108[yyj4108]
					yyv4111.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4108 < len(yyv4108) {
			yyv4108 = yyv4108[:yyj4108]
			yyc4108 = true
		} else if yyj4108 == 0 && yyv4108 == nil {
			yyv4108 = []PodCondition{}
			yyc4108 = true
		}
	}
	yyh4108.End()
	if yyc4108 {
		*v = yyv4108
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4112 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4113 := &yyv4112
		yy4113.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4114 := *v
	yyh4114, yyl4114 := z.DecSliceHelperStart()
	var yyc4114 bool
	if yyl4114 == 0 {
		if yyv4114 == nil {
			yyv4114 = []ContainerStatus{}
			yyc4114 = true
		} else if len(yyv4114) != 0 {
			yyv4114 = yyv4114[:0]
			yyc4114 = true
		}
	} else if yyl4114 > 0 {
		var yyrr4114, yyrl4114 int
		var yyrt4114 bool
		if yyl4114 > cap(yyv4114) {

			yyrg4114 := len(yyv4114) > 0
			yyv24114 := yyv4114
			yyrl4114, yyrt4114 = z.DecInferLen(yyl4114, z.DecBasicHandle().MaxInitLen, 128)
			if yyrt4114 {
				if yyrl4114 <= cap(yyv4114) {
					yyv4114 = yyv4114[:yyrl4114]
				} else {
					yyv4114 = make([]ContainerStatus, yyrl4114)
				}
			} else {
				yyv4114 = make([]ContainerStatus, yyrl4114)
			}
			yyc4114 = true
			yyrr4114 = len(yyv4114)
			if yyrg4114 {
				copy(yyv4114, yyv24114)
			}
		} else if yyl4114 != len(yyv4114) {
			yyv4114 = yyv4114[:yyl4114]
			yyc4114 = true
		}
		yyj4114 := 0
		for ; yyj4114 < yyrr4114; yyj4114++ {
			yyh4114.ElemContainerState(yyj4114)
			if r.TryDecodeAsNil() {
				yyv4114[yyj4114] = ContainerStatus{}
			} else {
				yyv4115 := &yyv4114[yyj4114]
				yyv4115.CodecDecodeSelf(d)
			}

		}
		if yyrt4114 {
			for ; yyj4114 < yyl4114; yyj4114++ {
				yyv4114 = append(yyv4114, ContainerStatus{})
				yyh4114.ElemContainerState(yyj4114)
				if r.TryDecodeAsNil() {
					yyv4114[yyj4114] = ContainerStatus{}
				} else {
					yyv4116 := &yyv4114[yyj4114]
					yyv4116.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4114 := 0
		for ; !r.CheckBreak(); yyj4114++ {

			if yyj4114 >= len(yyv4114) {
				yyv4114 = append(yyv4114, ContainerStatus{}) // var yyz4114 ContainerStatus
				yyc4114 = true
			}
			yyh4114.ElemContainerState(yyj4114)
			if yyj4114 < len(yyv4114) {
				if r.TryDecodeAsNil() {
					yyv4114[yyj4114] = ContainerStatus{}
				} else {
					yyv4117 := &yyv4114[yyj4114]
					yyv4117.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4114 < len(yyv4114) {
			yyv4114 = yyv4114[:yyj4114]
			yyc4114 = true
		} else if yyj4114 == 0 && yyv4114 == nil {
			yyv4114 = []ContainerStatus{}
			yyc4114 = true
		}
	}
	yyh4114.End()
	if yyc4114 {
		*v = yyv4114
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4118 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4119 := &yyv4118
		yy4119.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4120 := *v
	yyh4120, yyl4120 := z.DecSliceHelperStart()
	var yyc4120 bool
	if yyl4120 == 0 {
		if yyv4120 == nil {
			yyv4120 = []PodTemplate{}
			yyc4120 = true
		} else if len(yyv4120) != 0 {
			yyv4120 = yyv4120[:0]
			yyc4120 = true
		}
	} else if yyl4120 > 0 {
		var yyrr4120, yyrl4120 int
		var yyrt4120 bool
		if yyl4120 > cap(yyv4120) {

			yyrg4120 := len(yyv4120) > 0
			yyv24120 := yyv4120
			yyrl4120, yyrt4120 = z.DecInferLen(yyl4120, z.DecBasicHandle().MaxInitLen, 528)
			if yyrt4120 {
				if yyrl4120 <= cap(yyv4120) {
					yyv4120 = yyv4120[:yyrl4120]
				} else {
					yyv4120 = make([]PodTemplate, yyrl4120)
				}
			} else {
				yyv4120 = make([]PodTemplate, yyrl4120)
			}
			yyc4120 = true
			yyrr4120 = len(yyv4120)
			if yyrg4120 {
				copy(yyv4120, yyv24120)
			}
		} else if yyl4120 != len(yyv4120) {
			yyv4120 = yyv4120[:yyl4120]
			yyc4120 = true
		}
		yyj4120 := 0
		for ; yyj4120 < yyrr4120; yyj4120++ {
			yyh4120.ElemContainerState(yyj4120)
			if r.TryDecodeAsNil() {
				yyv4120[yyj4120] = PodTemplate{}
			} else {
				yyv4121 := &yyv4120[yyj4120]
				yyv4121.CodecDecodeSelf(d)
			}

		}
		if yyrt4120 {
			for ; yyj4120 < yyl4120; yyj4120++ {
				yyv4120 = append(yyv4120, PodTemplate{})
				yyh4120.ElemContainerState(yyj4120)
				if r.TryDecodeAsNil() {
					yyv4120[yyj4120] = PodTemplate{}
				} else {
					yyv4122 := &yyv4120[yyj4120]
					yyv4122.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4120 := 0
		for ; !r.CheckBreak(); yyj4120++ {

			if yyj4120 >= len(yyv4120) {
				yyv4120 = append(yyv4120, PodTemplate{}) // var yyz4120 PodTemplate
				yyc4120 = true
			}
			yyh4120.ElemContainerState(yyj4120)
			if yyj4120 < len(yyv4120) {
				if r.TryDecodeAsNil() {
					yyv4120[yyj4120] = PodTemplate{}
				} else {
					yyv4123 := &yyv4120[yyj4120]
					yyv4123.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4120 < len(yyv4120) {
			yyv4120 = yyv4120[:yyj4120]
			yyc4120 = true
		} else if yyj4120 == 0 && yyv4120 == nil {
			yyv4120 = []PodTemplate{}
			yyc4120 = true
		}
	}
	yyh4120.End()
	if yyc4120 {
		*v = yyv4120
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4124 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4125 := &yyv4124
		yy4125.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4126 := *v
	yyh4126, yyl4126 := z.DecSliceHelperStart()
	var yyc4126 bool
	if yyl4126 == 0 {
		if yyv4126 == nil {
			yyv4126 = []ReplicationController{}
			yyc4126 = true
		} else if len(yyv4126) != 0 {
			yyv4126 = yyv4126[:0]
			yyc4126 = true
		}
	} else if yyl4126 > 0 {
		var yyrr4126, yyrl4126 int
		var yyrt4126 bool
		if yyl4126 > cap(yyv4126) {

			yyrg4126 := len(yyv4126) > 0
			yyv24126 := yyv4126
			yyrl4126, yyrt4126 = z.DecInferLen(yyl4126, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt4126 {
				if yyrl4126 <= cap(yyv4126) {
					yyv4126 = yyv4126[:yyrl4126]
				} else {
					yyv4126 = make([]ReplicationController, yyrl4126)
				}
			} else {
				yyv4126 = make([]ReplicationController, yyrl4126)
			}
			yyc4126 = true
			yyrr4126 = len(yyv4126)
			if yyrg4126 {
				copy(yyv4126, yyv24126)
			}
		} else if yyl4126 != len(yyv4126) {
			yyv4126 = yyv4126[:yyl4126]
			yyc4126 = true
		}
		yyj4126 := 0
		for ; yyj4126 < yyrr4126; yyj4126++ {
			yyh4126.ElemContainerState(yyj4126)
			if r.TryDecodeAsNil() {
				yyv4126[yyj4126] = ReplicationController{}
			} else {
				yyv4127 := &yyv4126[yyj4126]
				yyv4127.CodecDecodeSelf(d)
			}

		}
		if yyrt4126 {
			for ; yyj4126 < yyl4126; yyj4126++ {
				yyv4126 = append(yyv4126, ReplicationController{})
				yyh4126.ElemContainerState(yyj4126)
				if r.TryDecodeAsNil() {
					yyv4126[yyj4126] = ReplicationController{}
				} else {
					yyv4128 := &yyv4126[yyj4126]
					yyv4128.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4126 := 0
		for ; !r.CheckBreak(); yyj4126++ {

			if yyj4126 >= len(yyv4126) {
				yyv4126 = append(yyv4126, ReplicationController{}) // var yyz4126 ReplicationController
				yyc4126 = true
			}
			yyh4126.ElemContainerState(yyj4126)
			if yyj4126 < len(yyv4126) {
				if r.TryDecodeAsNil() {
					yyv4126[yyj4126] = ReplicationController{}
				} else {
					yyv4129 := &yyv4126[yyj4126]
					yyv4129.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4126 < len(yyv4126) {
			yyv4126 = yyv4126[:yyj4126]
			yyc4126 = true
		} else if yyj4126 == 0 && yyv4126 == nil {
			yyv4126 = []ReplicationController{}
			yyc4126 = true
		}
	}
	yyh4126.End()
	if yyc4126 {
		*v = yyv4126
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4130 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4131 := &yyv4130
		yy4131.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4132 := *v
	yyh4132, yyl4132 := z.DecSliceHelperStart()
	var yyc4132 bool
	if yyl4132 == 0 {
		if yyv4132 == nil {
			yyv4132 = []Service{}
			yyc4132 = true
		} else if len(yyv4132) != 0 {
			yyv4132 = yyv4132[:0]
			yyc4132 = true
		}
	} else if yyl4132 > 0 {
		var yyrr4132, yyrl4132 int
		var yyrt4132 bool
		if yyl4132 > cap(yyv4132) {

			yyrg4132 := len(yyv4132) > 0
			yyv24132 := yyv4132
			yyrl4132, yyrt4132 = z.DecInferLen(yyl4132, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt4132 {
				if yyrl4132 <= cap(yyv4132) {
					yyv4132 = yyv4132[:yyrl4132]
				} else {
					yyv4132 = make([]Service, yyrl4132)
				}
			} else {
				yyv4132 = make([]Service, yyrl4132)
			}
			yyc4132 = true
			yyrr4132 = len(yyv4132)
			if yyrg4132 {
				copy(yyv4132, yyv24132)
			}
		} else if yyl4132 != len(yyv4132) {
			yyv4132 = yyv4132[:yyl4132]
			yyc4132 = true
		}
		yyj4132 := 0
		for ; yyj4132 < yyrr4132; yyj4132++ {
			yyh4132.ElemContainerState(yyj4132)
			if r.TryDecodeAsNil() {
				yyv4132[yyj4132] = Service{}
			} else {
				yyv4133 := &yyv4132[yyj4132]
				yyv4133.CodecDecodeSelf(d)
			}

		}
		if yyrt4132 {
			for ; yyj4132 < yyl4132; yyj4132++ {
				yyv4132 = append(yyv4132, Service{})
				yyh4132.ElemContainerState(yyj4132)
				if r.TryDecodeAsNil() {
					yyv4132[yyj4132] = Service{}
				} else {
					yyv4134 := &yyv4132[yyj4132]
					yyv4134.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4132 := 0
		for ; !r.CheckBreak(); yyj4132++ {

			if yyj4132 >= len(yyv4132) {
				yyv4132 = append(yyv4132, Service{}) // var yyz4132 Service
				yyc4132 = true
			}
			yyh4132.ElemContainerState(yyj4132)
			if yyj4132 < len(yyv4132) {
				if r.TryDecodeAsNil() {
					yyv4132[yyj4132] = Service{}
				} else {
					yyv4135 := &yyv4132[yyj4132]
					yyv4135.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4132 < len(yyv4132) {
			yyv4132 = yyv4132[:yyj4132]
			yyc4132 = true
		} else if yyj4132 == 0 && yyv4132 == nil {
			yyv4132 = []Service{}
			yyc4132 = true
		}
	}
	yyh4132.End()
	if yyc4132 {
		*v = yyv4132
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4136 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4137 := &yyv4136
		yy4137.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4138 := *v
	yyh4138, yyl4138 := z.DecSliceHelperStart()
	var yyc4138 bool
	if yyl4138 == 0 {
		if yyv4138 == nil {
			yyv4138 = []LoadBalancerIngress{}
			yyc4138 = true
		} else if len(yyv4138) != 0 {
			yyv4138 = yyv4138[:0]
			yyc4138 = true
		}
	} else if yyl4138 > 0 {
		var yyrr4138, yyrl4138 int
		var yyrt4138 bool
		if yyl4138 > cap(yyv4138) {

			yyrg4138 := len(yyv4138) > 0
			yyv24138 := yyv4138
			yyrl4138, yyrt4138 = z.DecInferLen(yyl4138, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4138 {
				if yyrl4138 <= cap(yyv4138) {
					yyv4138 = yyv4138[:yyrl4138]
				} else {
					yyv4138 = make([]LoadBalancerIngress, yyrl4138)
				}
			} else {
				yyv4138 = make([]LoadBalancerIngress, yyrl4138)
			}
			yyc4138 = true
			yyrr4138 = len(yyv4138)
			if yyrg4138 {
				copy(yyv4138, yyv24138)
			}
		} else if yyl4138 != len(yyv4138) {
			yyv4138 = yyv4138[:yyl4138]
			yyc4138 = true
		}
		yyj4138 := 0
		for ; yyj4138 < yyrr4138; yyj4138++ {
			yyh4138.ElemContainerState(yyj4138)
			if r.TryDecodeAsNil() {
				yyv4138[yyj4138] = LoadBalancerIngress{}
			} else {
				yyv4139 := &yyv4138[yyj4138]
				yyv4139.CodecDecodeSelf(d)
			}

		}
		if yyrt4138 {
			for ; yyj4138 < yyl4138; yyj4138++ {
				yyv4138 = append(yyv4138, LoadBalancerIngress{})
				yyh4138.ElemContainerState(yyj4138)
				if r.TryDecodeAsNil() {
					yyv4138[yyj4138] = LoadBalancerIngress{}
				} else {
					yyv4140 := &yyv4138[yyj4138]
					yyv4140.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4138 := 0
		for ; !r.CheckBreak(); yyj4138++ {

			if yyj4138 >= len(yyv4138) {
				yyv4138 = append(yyv4138, LoadBalancerIngress{}) // var yyz4138 LoadBalancerIngress
				yyc4138 = true
			}
			yyh4138.ElemContainerState(yyj4138)
			if yyj4138 < len(yyv4138) {
				if r.TryDecodeAsNil() {
					yyv4138[yyj4138] = LoadBalancerIngress{}
				} else {
					yyv4141 := &yyv4138[yyj4138]
					yyv4141.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4138 < len(yyv4138) {
			yyv4138 = yyv4138[:yyj4138]
			yyc4138 = true
		} else if yyj4138 == 0 && yyv4138 == nil {
			yyv4138 = []LoadBalancerIngress{}
			yyc4138 = true
		}
	}
	yyh4138.End()
	if yyc4138 {
		*v = yyv4138
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4142 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4143 := &yyv4142
		yy4143.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4144 := *v
	yyh4144, yyl4144 := z.DecSliceHelperStart()
	var yyc4144 bool
	if yyl4144 == 0 {
		if yyv4144 == nil {
			yyv4144 = []ServicePort{}
			yyc4144 = true
		} else if len(yyv4144) != 0 {
			yyv4144 = yyv4144[:0]
			yyc4144 = true
		}
	} else if yyl4144 > 0 {
		var yyrr4144, yyrl4144 int
		var yyrt4144 bool
		if yyl4144 > cap(yyv4144) {

			yyrg4144 := len(yyv4144) > 0
			yyv24144 := yyv4144
			yyrl4144, yyrt4144 = z.DecInferLen(yyl4144, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4144 {
				if yyrl4144 <= cap(yyv4144) {
					yyv4144 = yyv4144[:yyrl4144]
				} else {
					yyv4144 = make([]ServicePort, yyrl4144)
				}
			} else {
				yyv4144 = make([]ServicePort, yyrl4144)
			}
			yyc4144 = true
			yyrr4144 = len(yyv4144)
			if yyrg4144 {
				copy(yyv4144, yyv24144)
			}
		} else if yyl4144 != len(yyv4144) {
			yyv4144 = yyv4144[:yyl4144]
			yyc4144 = true
		}
		yyj4144 := 0
		for ; yyj4144 < yyrr4144; yyj4144++ {
			yyh4144.ElemContainerState(yyj4144)
			if r.TryDecodeAsNil() {
				yyv4144[yyj4144] = ServicePort{}
			} else {
				yyv4145 := &yyv4144[yyj4144]
				yyv4145.CodecDecodeSelf(d)
			}

		}
		if yyrt4144 {
			for ; yyj4144 < yyl4144; yyj4144++ {
				yyv4144 = append(yyv4144, ServicePort{})
				yyh4144.ElemContainerState(yyj4144)
				if r.TryDecodeAsNil() {
					yyv4144[yyj4144] = ServicePort{}
				} else {
					yyv4146 := &yyv4144[yyj4144]
					yyv4146.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4144 := 0
		for ; !r.CheckBreak(); yyj4144++ {

			if yyj4144 >= len(yyv4144) {
				yyv4144 = append(yyv4144, ServicePort{}) // var yyz4144 ServicePort
				yyc4144 = true
			}
			yyh4144.ElemContainerState(yyj4144)
			if yyj4144 < len(yyv4144) {
				if r.TryDecodeAsNil() {
					yyv4144[yyj4144] = ServicePort{}
				} else {
					yyv4147 := &yyv4144[yyj4144]
					yyv4147.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4144 < len(yyv4144) {
			yyv4144 = yyv4144[:yyj4144]
			yyc4144 = true
		} else if yyj4144 == 0 && yyv4144 == nil {
			yyv4144 = []ServicePort{}
			yyc4144 = true
		}
	}
	yyh4144.End()
	if yyc4144 {
		*v = yyv4144
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4148 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4149 := &yyv4148
		yy4149.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4150 := *v
	yyh4150, yyl4150 := z.DecSliceHelperStart()
	var yyc4150 bool
	if yyl4150 == 0 {
		if yyv4150 == nil {
			yyv4150 = []ObjectReference{}
			yyc4150 = true
		} else if len(yyv4150) != 0 {
			yyv4150 = yyv4150[:0]
			yyc4150 = true
		}
	} else if yyl4150 > 0 {
		var yyrr4150, yyrl4150 int
		var yyrt4150 bool
		if yyl4150 > cap(yyv4150) {

			yyrg4150 := len(yyv4150) > 0
			yyv24150 := yyv4150
			yyrl4150, yyrt4150 = z.DecInferLen(yyl4150, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4150 {
				if yyrl4150 <= cap(yyv4150) {
					yyv4150 = yyv4150[:yyrl4150]
				} else {
					yyv4150 = make([]ObjectReference, yyrl4150)
				}
			} else {
				yyv4150 = make([]ObjectReference, yyrl4150)
			}
			yyc4150 = true
			yyrr4150 = len(yyv4150)
			if yyrg4150 {
				copy(yyv4150, yyv24150)
			}
		} else if yyl4150 != len(yyv4150) {
			yyv4150 = yyv4150[:yyl4150]
			yyc4150 = true
		}
		yyj4150 := 0
		for ; yyj4150 < yyrr4150; yyj4150++ {
			yyh4150.ElemContainerState(yyj4150)
			if r.TryDecodeAsNil() {
				yyv4150[yyj4150] = ObjectReference{}
			} else {
				yyv4151 := &yyv4150[yyj4150]
				yyv4151.CodecDecodeSelf(d)
			}

		}
		if yyrt4150 {
			for ; yyj4150 < yyl4150; yyj4150++ {
				yyv4150 = append(yyv4150, ObjectReference{})
				yyh4150.ElemContainerState(yyj4150)
				if r.TryDecodeAsNil() {
					yyv4150[yyj4150] = ObjectReference{}
				} else {
					yyv4152 := &yyv4150[yyj4150]
					yyv4152.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4150 := 0
		for ; !r.CheckBreak(); yyj4150++ {

			if yyj4150 >= len(yyv4150) {
				yyv4150 = append(yyv4150, ObjectReference{}) // var yyz4150 ObjectReference
				yyc4150 = true
			}
			yyh4150.ElemContainerState(yyj4150)
			if yyj4150 < len(yyv4150) {
				if r.TryDecodeAsNil() {
					yyv4150[yyj4150] = ObjectReference{}
				} else {
					yyv4153 := &yyv4150[yyj4150]
					yyv4153.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4150 < len(yyv4150) {
			yyv4150 = yyv4150[:yyj4150]
			yyc4150 = true
		} else if yyj4150 == 0 && yyv4150 == nil {
			yyv4150 = []ObjectReference{}
			yyc4150 = true
		}
	}
	yyh4150.End()
	if yyc4150 {
		*v = yyv4150
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4154 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4155 := &yyv4154
		yy4155.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4156 := *v
	yyh4156, yyl4156 := z.DecSliceHelperStart()
	var yyc4156 bool
	if yyl4156 == 0 {
		if yyv4156 == nil {
			yyv4156 = []ServiceAccount{}
			yyc4156 = true
		} else if len(yyv4156) != 0 {
			yyv4156 = yyv4156[:0]
			yyc4156 = true
		}
	} else if yyl4156 > 0 {
		var yyrr4156, yyrl4156 int
		var yyrt4156 bool
		if yyl4156 > cap(yyv4156) {

			yyrg4156 := len(yyv4156) > 0
			yyv24156 := yyv4156
			yyrl4156, yyrt4156 = z.DecInferLen(yyl4156, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt4156 {
				if yyrl4156 <= cap(yyv4156) {
					yyv4156 = yyv4156[:yyrl4156]
				} else {
					yyv4156 = make([]ServiceAccount, yyrl4156)
				}
			} else {
				yyv4156 = make([]ServiceAccount, yyrl4156)
			}
			yyc4156 = true
			yyrr4156 = len(yyv4156)
			if yyrg4156 {
				copy(yyv4156, yyv24156)
			}
		} else if yyl4156 != len(yyv4156) {
			yyv4156 = yyv4156[:yyl4156]
			yyc4156 = true
		}
		yyj4156 := 0
		for ; yyj4156 < yyrr4156; yyj4156++ {
			yyh4156.ElemContainerState(yyj4156)
			if r.TryDecodeAsNil() {
				yyv4156[yyj4156] = ServiceAccount{}
			} else {
				yyv4157 := &yyv4156[yyj4156]
				yyv4157.CodecDecodeSelf(d)
			}

		}
		if yyrt4156 {
			for ; yyj4156 < yyl4156; yyj4156++ {
				yyv4156 = append(yyv4156, ServiceAccount{})
				yyh4156.ElemContainerState(yyj4156)
				if r.TryDecodeAsNil() {
					yyv4156[yyj4156] = ServiceAccount{}
				} else {
					yyv4158 := &yyv4156[yyj4156]
					yyv4158.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4156 := 0
		for ; !r.CheckBreak(); yyj4156++ {

			if yyj4156 >= len(yyv4156) {
				yyv4156 = append(yyv4156, ServiceAccount{}) // var yyz4156 ServiceAccount
				yyc4156 = true
			}
			yyh4156.ElemContainerState(yyj4156)
			if yyj4156 < len(yyv4156) {
				if r.TryDecodeAsNil() {
					yyv4156[yyj4156] = ServiceAccount{}
				} else {
					yyv4159 := &yyv4156[yyj4156]
					yyv4159.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4156 < len(yyv4156) {
			yyv4156 = yyv4156[:yyj4156]
			yyc4156 = true
		} else if yyj4156 == 0 && yyv4156 == nil {
			yyv4156 = []ServiceAccount{}
			yyc4156 = true
		}
	}
	yyh4156.End()
	if yyc4156 {
		*v = yyv4156
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4160 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4161 := &yyv4160
		yy4161.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4162 := *v
	yyh4162, yyl4162 := z.DecSliceHelperStart()
	var yyc4162 bool
	if yyl4162 == 0 {
		if yyv4162 == nil {
			yyv4162 = []EndpointSubset{}
			yyc4162 = true
		} else if len(yyv4162) != 0 {
			yyv4162 = yyv4162[:0]
			yyc4162 = true
		}
	} else if yyl4162 > 0 {
		var yyrr4162, yyrl4162 int
		var yyrt4162 bool
		if yyl4162 > cap(yyv4162) {

			yyrg4162 := len(yyv4162) > 0
			yyv24162 := yyv4162
			yyrl4162, yyrt4162 = z.DecInferLen(yyl4162, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4162 {
				if yyrl4162 <= cap(yyv4162) {
					yyv4162 = yyv4162[:yyrl4162]
				} else {
					yyv4162 = make([]EndpointSubset, yyrl4162)
				}
			} else {
				yyv4162 = make([]EndpointSubset, yyrl4162)
			}
			yyc4162 = true
			yyrr4162 = len(yyv4162)
			if yyrg4162 {
				copy(yyv4162, yyv24162)
			}
		} else if yyl4162 != len(yyv4162) {
			yyv4162 = yyv4162[:yyl4162]
			yyc4162 = true
		}
		yyj4162 := 0
		for ; yyj4162 < yyrr4162; yyj4162++ {
			yyh4162.ElemContainerState(yyj4162)
			if r.TryDecodeAsNil() {
				yyv4162[yyj4162] = EndpointSubset{}
			} else {
				yyv4163 := &yyv4162[yyj4162]
				yyv4163.CodecDecodeSelf(d)
			}

		}
		if yyrt4162 {
			for ; yyj4162 < yyl4162; yyj4162++ {
				yyv4162 = append(yyv4162, EndpointSubset{})
				yyh4162.ElemContainerState(yyj4162)
				if r.TryDecodeAsNil() {
					yyv4162[yyj4162] = EndpointSubset{}
				} else {
					yyv4164 := &yyv4162[yyj4162]
					yyv4164.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4162 := 0
		for ; !r.CheckBreak(); yyj4162++ {

			if yyj4162 >= len(yyv4162) {
				yyv4162 = append(yyv4162, EndpointSubset{}) // var yyz4162 EndpointSubset
				yyc4162 = true
			}
			yyh4162.ElemContainerState(yyj4162)
			if yyj4162 < len(yyv4162) {
				if r.TryDecodeAsNil() {
					yyv4162[yyj4162] = EndpointSubset{}
				} else {
					yyv4165 := &yyv4162[yyj4162]
					yyv4165.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4162 < len(yyv4162) {
			yyv4162 = yyv4162[:yyj4162]
			yyc4162 = true
		} else if yyj4162 == 0 && yyv4162 == nil {
			yyv4162 = []EndpointSubset{}
			yyc4162 = true
		}
	}
	yyh4162.End()
	if yyc4162 {
		*v = yyv4162
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4166 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4167 := &yyv4166
		yy4167.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4168 := *v
	yyh4168, yyl4168 := z.DecSliceHelperStart()
	var yyc4168 bool
	if yyl4168 == 0 {
		if yyv4168 == nil {
			yyv4168 = []EndpointAddress{}
			yyc4168 = true
		} else if len(yyv4168) != 0 {
			yyv4168 = yyv4168[:0]
			yyc4168 = true
		}
	} else if yyl4168 > 0 {
		var yyrr4168, yyrl4168 int
		var yyrt4168 bool
		if yyl4168 > cap(yyv4168) {

			yyrg4168 := len(yyv4168) > 0
			yyv24168 := yyv4168
			yyrl4168, yyrt4168 = z.DecInferLen(yyl4168, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4168 {
				if yyrl4168 <= cap(yyv4168) {
					yyv4168 = yyv4168[:yyrl4168]
				} else {
					yyv4168 = make([]EndpointAddress, yyrl4168)
				}
			} else {
				yyv4168 = make([]EndpointAddress, yyrl4168)
			}
			yyc4168 = true
			yyrr4168 = len(yyv4168)
			if yyrg4168 {
				copy(yyv4168, yyv24168)
			}
		} else if yyl4168 != len(yyv4168) {
			yyv4168 = yyv4168[:yyl4168]
			yyc4168 = true
		}
		yyj4168 := 0
		for ; yyj4168 < yyrr4168; yyj4168++ {
			yyh4168.ElemContainerState(yyj4168)
			if r.TryDecodeAsNil() {
				yyv4168[yyj4168] = EndpointAddress{}
			} else {
				yyv4169 := &yyv4168[yyj4168]
				yyv4169.CodecDecodeSelf(d)
			}

		}
		if yyrt4168 {
			for ; yyj4168 < yyl4168; yyj4168++ {
				yyv4168 = append(yyv4168, EndpointAddress{})
				yyh4168.ElemContainerState(yyj4168)
				if r.TryDecodeAsNil() {
					yyv4168[yyj4168] = EndpointAddress{}
				} else {
					yyv4170 := &yyv4168[yyj4168]
					yyv4170.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4168 := 0
		for ; !r.CheckBreak(); yyj4168++ {

			if yyj4168 >= len(yyv4168) {
				yyv4168 = append(yyv4168, EndpointAddress{}) // var yyz4168 EndpointAddress
				yyc4168 = true
			}
			yyh4168.ElemContainerState(yyj4168)
			if yyj4168 < len(yyv4168) {
				if r.TryDecodeAsNil() {
					yyv4168[yyj4168] = EndpointAddress{}
				} else {
					yyv4171 := &yyv4168[yyj4168]
					yyv4171.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4168 < len(yyv4168) {
			yyv4168 = yyv4168[:yyj4168]
			yyc4168 = true
		} else if yyj4168 == 0 && yyv4168 == nil {
			yyv4168 = []EndpointAddress{}
			yyc4168 = true
		}
	}
	yyh4168.End()
	if yyc4168 {
		*v = yyv4168
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4172 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4173 := &yyv4172
		yy4173.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4174 := *v
	yyh4174, yyl4174 := z.DecSliceHelperStart()
	var yyc4174 bool
	if yyl4174 == 0 {
		if yyv4174 == nil {
			yyv4174 = []EndpointPort{}
			yyc4174 = true
		} else if len(yyv4174) != 0 {
			yyv4174 = yyv4174[:0]
			yyc4174 = true
		}
	} else if yyl4174 > 0 {
		var yyrr4174, yyrl4174 int
		var yyrt4174 bool
		if yyl4174 > cap(yyv4174) {

			yyrg4174 := len(yyv4174) > 0
			yyv24174 := yyv4174
			yyrl4174, yyrt4174 = z.DecInferLen(yyl4174, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4174 {
				if yyrl4174 <= cap(yyv4174) {
					yyv4174 = yyv4174[:yyrl4174]
				} else {
					yyv4174 = make([]EndpointPort, yyrl4174)
				}
			} else {
				yyv4174 = make([]EndpointPort, yyrl4174)
			}
			yyc4174 = true
			yyrr4174 = len(yyv4174)
			if yyrg4174 {
				copy(yyv4174, yyv24174)
			}
		} else if yyl4174 != len(yyv4174) {
			yyv4174 = yyv4174[:yyl4174]
			yyc4174 = true
		}
		yyj4174 := 0
		for ; yyj4174 < yyrr4174; yyj4174++ {
			yyh4174.ElemContainerState(yyj4174)
			if r.TryDecodeAsNil() {
				yyv4174[yyj4174] = EndpointPort{}
			} else {
				yyv4175 := &yyv4174[yyj4174]
				yyv4175.CodecDecodeSelf(d)
			}

		}
		if yyrt4174 {
			for ; yyj4174 < yyl4174; yyj4174++ {
				yyv4174 = append(yyv4174, EndpointPort{})
				yyh4174.ElemContainerState(yyj4174)
				if r.TryDecodeAsNil() {
					yyv4174[yyj4174] = EndpointPort{}
				} else {
					yyv4176 := &yyv4174[yyj4174]
					yyv4176.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4174 := 0
		for ; !r.CheckBreak(); yyj4174++ {

			if yyj4174 >= len(yyv4174) {
				yyv4174 = append(yyv4174, EndpointPort{}) // var yyz4174 EndpointPort
				yyc4174 = true
			}
			yyh4174.ElemContainerState(yyj4174)
			if yyj4174 < len(yyv4174) {
				if r.TryDecodeAsNil() {
					yyv4174[yyj4174] = EndpointPort{}
				} else {
					yyv4177 := &yyv4174[yyj4174]
					yyv4177.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4174 < len(yyv4174) {
			yyv4174 = yyv4174[:yyj4174]
			yyc4174 = true
		} else if yyj4174 == 0 && yyv4174 == nil {
			yyv4174 = []EndpointPort{}
			yyc4174 = true
		}
	}
	yyh4174.End()
	if yyc4174 {
		*v = yyv4174
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4178 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4179 := &yyv4178
		yy4179.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4180 := *v
	yyh4180, yyl4180 := z.DecSliceHelperStart()
	var yyc4180 bool
	if yyl4180 == 0 {
		if yyv4180 == nil {
			yyv4180 = []Endpoints{}
			yyc4180 = true
		} else if len(yyv4180) != 0 {
			yyv4180 = yyv4180[:0]
			yyc4180 = true
		}
	} else if yyl4180 > 0 {
		var yyrr4180, yyrl4180 int
		var yyrt4180 bool
		if yyl4180 > cap(yyv4180) {

			yyrg4180 := len(yyv4180) > 0
			yyv24180 := yyv4180
			yyrl4180, yyrt4180 = z.DecInferLen(yyl4180, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4180 {
				if yyrl4180 <= cap(yyv4180) {
					yyv4180 = yyv4180[:yyrl4180]
				} else {
					yyv4180 = make([]Endpoints, yyrl4180)
				}
			} else {
				yyv4180 = make([]Endpoints, yyrl4180)
			}
			yyc4180 = true
			yyrr4180 = len(yyv4180)
			if yyrg4180 {
				copy(yyv4180, yyv24180)
			}
		} else if yyl4180 != len(yyv4180) {
			yyv4180 = yyv4180[:yyl4180]
			yyc4180 = true
		}
		yyj4180 := 0
		for ; yyj4180 < yyrr4180; yyj4180++ {
			yyh4180.ElemContainerState(yyj4180)
			if r.TryDecodeAsNil() {
				yyv4180[yyj4180] = Endpoints{}
			} else {
				yyv4181 := &yyv4180[yyj4180]
				yyv4181.CodecDecodeSelf(d)
			}

		}
		if yyrt4180 {
			for ; yyj4180 < yyl4180; yyj4180++ {
				yyv4180 = append(yyv4180, Endpoints{})
				yyh4180.ElemContainerState(yyj4180)
				if r.TryDecodeAsNil() {
					yyv4180[yyj4180] = Endpoints{}
				} else {
					yyv4182 := &yyv4180[yyj4180]
					yyv4182.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4180 := 0
		for ; !r.CheckBreak(); yyj4180++ {

			if yyj4180 >= len(yyv4180) {
				yyv4180 = append(yyv4180, Endpoints{}) // var yyz4180 Endpoints
				yyc4180 = true
			}
			yyh4180.ElemContainerState(yyj4180)
			if yyj4180 < len(yyv4180) {
				if r.TryDecodeAsNil() {
					yyv4180[yyj4180] = Endpoints{}
				} else {
					yyv4183 := &yyv4180[yyj4180]
					yyv4183.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4180 < len(yyv4180) {
			yyv4180 = yyv4180[:yyj4180]
			yyc4180 = true
		} else if yyj4180 == 0 && yyv4180 == nil {
			yyv4180 = []Endpoints{}
			yyc4180 = true
		}
	}
	yyh4180.End()
	if yyc4180 {
		*v = yyv4180
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4184 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4185 := &yyv4184
		yy4185.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4186 := *v
	yyh4186, yyl4186 := z.DecSliceHelperStart()
	var yyc4186 bool
	if yyl4186 == 0 {
		if yyv4186 == nil {
			yyv4186 = []NodeCondition{}
			yyc4186 = true
		} else if len(yyv4186) != 0 {
			yyv4186 = yyv4186[:0]
			yyc4186 = true
		}
	} else if yyl4186 > 0 {
		var yyrr4186, yyrl4186 int
		var yyrt4186 bool
		if yyl4186 > cap(yyv4186) {

			yyrg4186 := len(yyv4186) > 0
			yyv24186 := yyv4186
			yyrl4186, yyrt4186 = z.DecInferLen(yyl4186, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4186 {
				if yyrl4186 <= cap(yyv4186) {
					yyv4186 = yyv4186[:yyrl4186]
				} else {
					yyv4186 = make([]NodeCondition, yyrl4186)
				}
			} else {
				yyv4186 = make([]NodeCondition, yyrl4186)
			}
			yyc4186 = true
			yyrr4186 = len(yyv4186)
			if yyrg4186 {
				copy(yyv4186, yyv24186)
			}
		} else if yyl4186 != len(yyv4186) {
			yyv4186 = yyv4186[:yyl4186]
			yyc4186 = true
		}
		yyj4186 := 0
		for ; yyj4186 < yyrr4186; yyj4186++ {
			yyh4186.ElemContainerState(yyj4186)
			if r.TryDecodeAsNil() {
				yyv4186[yyj4186] = NodeCondition{}
			} else {
				yyv4187 := &yyv4186[yyj4186]
				yyv4187.CodecDecodeSelf(d)
			}

		}
		if yyrt4186 {
			for ; yyj4186 < yyl4186; yyj4186++ {
				yyv4186 = append(yyv4186, NodeCondition{})
				yyh4186.ElemContainerState(yyj4186)
				if r.TryDecodeAsNil() {
					yyv4186[yyj4186] = NodeCondition{}
				} else {
					yyv4188 := &yyv4186[yyj4186]
					yyv4188.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4186 := 0
		for ; !r.CheckBreak(); yyj4186++ {

			if yyj4186 >= len(yyv4186) {
				yyv4186 = append(yyv4186, NodeCondition{}) // var yyz4186 NodeCondition
				yyc4186 = true
			}
			yyh4186.ElemContainerState(yyj4186)
			if yyj4186 < len(yyv4186) {
				if r.TryDecodeAsNil() {
					yyv4186[yyj4186] = NodeCondition{}
				} else {
					yyv4189 := &yyv4186[yyj4186]
					yyv4189.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4186 < len(yyv4186) {
			yyv4186 = yyv4186[:yyj4186]
			yyc4186 = true
		} else if yyj4186 == 0 && yyv4186 == nil {
			yyv4186 = []NodeCondition{}
			yyc4186 = true
		}
	}
	yyh4186.End()
	if yyc4186 {
		*v = yyv4186
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4190 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4191 := &yyv4190
		yy4191.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4192 := *v
	yyh4192, yyl4192 := z.DecSliceHelperStart()
	var yyc4192 bool
	if yyl4192 == 0 {
		if yyv4192 == nil {
			yyv4192 = []NodeAddress{}
			yyc4192 = true
		} else if len(yyv4192) != 0 {
			yyv4192 = yyv4192[:0]
			yyc4192 = true
		}
	} else if yyl4192 > 0 {
		var yyrr4192, yyrl4192 int
		var yyrt4192 bool
		if yyl4192 > cap(yyv4192) {

			yyrg4192 := len(yyv4192) > 0
			yyv24192 := yyv4192
			yyrl4192, yyrt4192 = z.DecInferLen(yyl4192, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4192 {
				if yyrl4192 <= cap(yyv4192) {
					yyv4192 = yyv4192[:yyrl4192]
				} else {
					yyv4192 = make([]NodeAddress, yyrl4192)
				}
			} else {
				yyv4192 = make([]NodeAddress, yyrl4192)
			}
			yyc4192 = true
			yyrr4192 = len(yyv4192)
			if yyrg4192 {
				copy(yyv4192, yyv24192)
			}
		} else if yyl4192 != len(yyv4192) {
			yyv4192 = yyv4192[:yyl4192]
			yyc4192 = true
		}
		yyj4192 := 0
		for ; yyj4192 < yyrr4192; yyj4192++ {
			yyh4192.ElemContainerState(yyj4192)
			if r.TryDecodeAsNil() {
				yyv4192[yyj4192] = NodeAddress{}
			} else {
				yyv4193 := &yyv4192[yyj4192]
				yyv4193.CodecDecodeSelf(d)
			}

		}
		if yyrt4192 {
			for ; yyj4192 < yyl4192; yyj4192++ {
				yyv4192 = append(yyv4192, NodeAddress{})
				yyh4192.ElemContainerState(yyj4192)
				if r.TryDecodeAsNil() {
					yyv4192[yyj4192] = NodeAddress{}
				} else {
					yyv4194 := &yyv4192[yyj4192]
					yyv4194.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4192 := 0
		for ; !r.CheckBreak(); yyj4192++ {

			if yyj4192 >= len(yyv4192) {
				yyv4192 = append(yyv4192, NodeAddress{}) // var yyz4192 NodeAddress
				yyc4192 = true
			}
			yyh4192.ElemContainerState(yyj4192)
			if yyj4192 < len(yyv4192) {
				if r.TryDecodeAsNil() {
					yyv4192[yyj4192] = NodeAddress{}
				} else {
					yyv4195 := &yyv4192[yyj4192]
					yyv4195.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4192 < len(yyv4192) {
			yyv4192 = yyv4192[:yyj4192]
			yyc4192 = true
		} else if yyj4192 == 0 && yyv4192 == nil {
			yyv4192 = []NodeAddress{}
			yyc4192 = true
		}
	}
	yyh4192.End()
	if yyc4192 {
		*v = yyv4192
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4196 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4197 := &yyv4196
		yy4197.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4198 := *v
	yyh4198, yyl4198 := z.DecSliceHelperStart()
	var yyc4198 bool
	if yyl4198 == 0 {
		if yyv4198 == nil {
			yyv4198 = []ContainerImage{}
			yyc4198 = true
		} else if len(yyv4198) != 0 {
			yyv4198 = yyv4198[:0]
			yyc4198 = true
		}
	} else if yyl4198 > 0 {
		var yyrr4198, yyrl4198 int
		var yyrt4198 bool
		if yyl4198 > cap(yyv4198) {

			yyrg4198 := len(yyv4198) > 0
			yyv24198 := yyv4198
			yyrl4198, yyrt4198 = z.DecInferLen(yyl4198, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4198 {
				if yyrl4198 <= cap(yyv4198) {
					yyv4198 = yyv4198[:yyrl4198]
				} else {
					yyv4198 = make([]ContainerImage, yyrl4198)
				}
			} else {
				yyv4198 = make([]ContainerImage, yyrl4198)
			}
			yyc4198 = true
			yyrr4198 = len(yyv4198)
			if yyrg4198 {
				copy(yyv4198, yyv24198)
			}
		} else if yyl4198 != len(yyv4198) {
			yyv4198 = yyv4198[:yyl4198]
			yyc4198 = true
		}
		yyj4198 := 0
		for ; yyj4198 < yyrr4198; yyj4198++ {
			yyh4198.ElemContainerState(yyj4198)
			if r.TryDecodeAsNil() {
				yyv4198[yyj4198] = ContainerImage{}
			} else {
				yyv4199 := &yyv4198[yyj4198]
				yyv4199.CodecDecodeSelf(d)
			}

		}
		if yyrt4198 {
			for ; yyj4198 < yyl4198; yyj4198++ {
				yyv4198 = append(yyv4198, ContainerImage{})
				yyh4198.ElemContainerState(yyj4198)
				if r.TryDecodeAsNil() {
					yyv4198[yyj4198] = ContainerImage{}
				} else {
					yyv4200 := &yyv4198[yyj4198]
					yyv4200.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4198 := 0
		for ; !r.CheckBreak(); yyj4198++ {

			if yyj4198 >= len(yyv4198) {
				yyv4198 = append(yyv4198, ContainerImage{}) // var yyz4198 ContainerImage
				yyc4198 = true
			}
			yyh4198.ElemContainerState(yyj4198)
			if yyj4198 < len(yyv4198) {
				if r.TryDecodeAsNil() {
					yyv4198[yyj4198] = ContainerImage{}
				} else {
					yyv4201 := &yyv4198[yyj4198]
					yyv4201.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4198 < len(yyv4198) {
			yyv4198 = yyv4198[:yyj4198]
			yyc4198 = true
		} else if yyj4198 == 0 && yyv4198 == nil {
			yyv4198 = []ContainerImage{}
			yyc4198 = true
		}
	}
	yyh4198.End()
	if yyc4198 {
		*v = yyv4198
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4202, yyv4202 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4202.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4203 := &yyv4202
		yym4204 := z.EncBinary()
		_ = yym4204
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4203) {
		} else if !yym4204 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4203)
		} else {
			z.EncFallback(yy4203)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4205 := *v
	yyl4205 := r.ReadMapStart()
	yybh4205 := z.DecBasicHandle()
	if yyv4205 == nil {
		yyrl4205, _ := z.DecInferLen(yyl4205, yybh4205.MaxInitLen, 40)
		yyv4205 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4205)
		*v = yyv4205
	}
	var yymk4205 ResourceName
	var yymv4205 pkg3_resource.Quantity
	var yymg4205 bool
	if yybh4205.MapValueReset {
		yymg4205 = true
	}
	if yyl4205 > 0 {
		for yyj4205 := 0; yyj4205 < yyl4205; yyj4205++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4205 = ""
			} else {
				yymk4205 = ResourceName(r.DecodeString())
			}

			if yymg4205 {
				yymv4205 = yyv4205[yymk4205]
			} else {
				yymv4205 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4205 = pkg3_resource.Quantity{}
			} else {
				yyv4207 := &yymv4205
				yym4208 := z.DecBinary()
				_ = yym4208
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4207) {
				} else if !yym4208 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4207)
				} else {
					z.DecFallback(yyv4207, false)
				}
			}

			if yyv4205 != nil {
				yyv4205[yymk4205] = yymv4205
			}
		}
	} else if yyl4205 < 0 {
		for yyj4205 := 0; !r.CheckBreak(); yyj4205++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4205 = ""
			} else {
				yymk4205 = ResourceName(r.DecodeString())
			}

			if yymg4205 {
				yymv4205 = yyv4205[yymk4205]
			} else {
				yymv4205 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4205 = pkg3_resource.Quantity{}
			} else {
				yyv4210 := &yymv4205
				yym4211 := z.DecBinary()
				_ = yym4211
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4210) {
				} else if !yym4211 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4210)
				} else {
					z.DecFallback(yyv4210, false)
				}
			}

			if yyv4205 != nil {
				yyv4205[yymk4205] = yymv4205
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4212 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4213 := &yyv4212
		yy4213.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4214 := *v
	yyh4214, yyl4214 := z.DecSliceHelperStart()
	var yyc4214 bool
	if yyl4214 == 0 {
		if yyv4214 == nil {
			yyv4214 = []Node{}
			yyc4214 = true
		} else if len(yyv4214) != 0 {
			yyv4214 = yyv4214[:0]
			yyc4214 = true
		}
	} else if yyl4214 > 0 {
		var yyrr4214, yyrl4214 int
		var yyrt4214 bool
		if yyl4214 > cap(yyv4214) {

			yyrg4214 := len(yyv4214) > 0
			yyv24214 := yyv4214
			yyrl4214, yyrt4214 = z.DecInferLen(yyl4214, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4214 {
				if yyrl4214 <= cap(yyv4214) {
					yyv4214 = yyv4214[:yyrl4214]
				} else {
					yyv4214 = make([]Node, yyrl4214)
				}
			} else {
				yyv4214 = make([]Node, yyrl4214)
			}
			yyc4214 = true
			yyrr4214 = len(yyv4214)
			if yyrg4214 {
				copy(yyv4214, yyv24214)
			}
		} else if yyl4214 != len(yyv4214) {
			yyv4214 = yyv4214[:yyl4214]
			yyc4214 = true
		}
		yyj4214 := 0
		for ; yyj4214 < yyrr4214; yyj4214++ {
			yyh4214.ElemContainerState(yyj4214)
			if r.TryDecodeAsNil() {
				yyv4214[yyj4214] = Node{}
			} else {
				yyv4215 := &yyv4214[yyj4214]
				yyv4215.CodecDecodeSelf(d)
			}

		}
		if yyrt4214 {
			for ; yyj4214 < yyl4214; yyj4214++ {
				yyv4214 = append(yyv4214, Node{})
				yyh4214.ElemContainerState(yyj4214)
				if r.TryDecodeAsNil() {
					yyv4214[yyj4214] = Node{}
				} else {
					yyv4216 := &yyv4214[yyj4214]
					yyv4216.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4214 := 0
		for ; !r.CheckBreak(); yyj4214++ {

			if yyj4214 >= len(yyv4214) {
				yyv4214 = append(yyv4214, Node{}) // var yyz4214 Node
				yyc4214 = true
			}
			yyh4214.ElemContainerState(yyj4214)
			if yyj4214 < len(yyv4214) {
				if r.TryDecodeAsNil() {
					yyv4214[yyj4214] = Node{}
				} else {
					yyv4217 := &yyv4214[yyj4214]
					yyv4217.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4214 < len(yyv4214) {
			yyv4214 = yyv4214[:yyj4214]
			yyc4214 = true
		} else if yyj4214 == 0 && yyv4214 == nil {
			yyv4214 = []Node{}
			yyc4214 = true
		}
	}
	yyh4214.End()
	if yyc4214 {
		*v = yyv4214
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4218 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4218.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4219 := *v
	yyh4219, yyl4219 := z.DecSliceHelperStart()
	var yyc4219 bool
	if yyl4219 == 0 {
		if yyv4219 == nil {
			yyv4219 = []FinalizerName{}
			yyc4219 = true
		} else if len(yyv4219) != 0 {
			yyv4219 = yyv4219[:0]
			yyc4219 = true
		}
	} else if yyl4219 > 0 {
		var yyrr4219, yyrl4219 int
		var yyrt4219 bool
		if yyl4219 > cap(yyv4219) {

			yyrl4219, yyrt4219 = z.DecInferLen(yyl4219, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4219 {
				if yyrl4219 <= cap(yyv4219) {
					yyv4219 = yyv4219[:yyrl4219]
				} else {
					yyv4219 = make([]FinalizerName, yyrl4219)
				}
			} else {
				yyv4219 = make([]FinalizerName, yyrl4219)
			}
			yyc4219 = true
			yyrr4219 = len(yyv4219)
		} else if yyl4219 != len(yyv4219) {
			yyv4219 = yyv4219[:yyl4219]
			yyc4219 = true
		}
		yyj4219 := 0
		for ; yyj4219 < yyrr4219; yyj4219++ {
			yyh4219.ElemContainerState(yyj4219)
			if r.TryDecodeAsNil() {
				yyv4219[yyj4219] = ""
			} else {
				yyv4219[yyj4219] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4219 {
			for ; yyj4219 < yyl4219; yyj4219++ {
				yyv4219 = append(yyv4219, "")
				yyh4219.ElemContainerState(yyj4219)
				if r.TryDecodeAsNil() {
					yyv4219[yyj4219] = ""
				} else {
					yyv4219[yyj4219] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4219 := 0
		for ; !r.CheckBreak(); yyj4219++ {

			if yyj4219 >= len(yyv4219) {
				yyv4219 = append(yyv4219, "") // var yyz4219 FinalizerName
				yyc4219 = true
			}
			yyh4219.ElemContainerState(yyj4219)
			if yyj4219 < len(yyv4219) {
				if r.TryDecodeAsNil() {
					yyv4219[yyj4219] = ""
				} else {
					yyv4219[yyj4219] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4219 < len(yyv4219) {
			yyv4219 = yyv4219[:yyj4219]
			yyc4219 = true
		} else if yyj4219 == 0 && yyv4219 == nil {
			yyv4219 = []FinalizerName{}
			yyc4219 = true
		}
	}
	yyh4219.End()
	if yyc4219 {
		*v = yyv4219
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4223 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4224 := &yyv4223
		yy4224.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4225 := *v
	yyh4225, yyl4225 := z.DecSliceHelperStart()
	var yyc4225 bool
	if yyl4225 == 0 {
		if yyv4225 == nil {
			yyv4225 = []Event{}
			yyc4225 = true
		} else if len(yyv4225) != 0 {
			yyv4225 = yyv4225[:0]
			yyc4225 = true
		}
	} else if yyl4225 > 0 {
		var yyrr4225, yyrl4225 int
		var yyrt4225 bool
		if yyl4225 > cap(yyv4225) {

			yyrg4225 := len(yyv4225) > 0
			yyv24225 := yyv4225
			yyrl4225, yyrt4225 = z.DecInferLen(yyl4225, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4225 {
				if yyrl4225 <= cap(yyv4225) {
					yyv4225 = yyv4225[:yyrl4225]
				} else {
					yyv4225 = make([]Event, yyrl4225)
				}
			} else {
				yyv4225 = make([]Event, yyrl4225)
			}
			yyc4225 = true
			yyrr4225 = len(yyv4225)
			if yyrg4225 {
				copy(yyv4225, yyv24225)
			}
		} else if yyl4225 != len(yyv4225) {
			yyv4225 = yyv4225[:yyl4225]
			yyc4225 = true
		}
		yyj4225 := 0
		for ; yyj4225 < yyrr4225; yyj4225++ {
			yyh4225.ElemContainerState(yyj4225)
			if r.TryDecodeAsNil() {
				yyv4225[yyj4225] = Event{}
			} else {
				yyv4226 := &yyv4225[yyj4225]
				yyv4226.CodecDecodeSelf(d)
			}

		}
		if yyrt4225 {
			for ; yyj4225 < yyl4225; yyj4225++ {
				yyv4225 = append(yyv4225, Event{})
				yyh4225.ElemContainerState(yyj4225)
				if r.TryDecodeAsNil() {
					yyv4225[yyj4225] = Event{}
				} else {
					yyv4227 := &yyv4225[yyj4225]
					yyv4227.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4225 := 0
		for ; !r.CheckBreak(); yyj4225++ {

			if yyj4225 >= len(yyv4225) {
				yyv4225 = append(yyv4225, Event{}) // var yyz4225 Event
				yyc4225 = true
			}
			yyh4225.ElemContainerState(yyj4225)
			if yyj4225 < len(yyv4225) {
				if r.TryDecodeAsNil() {
					yyv4225[yyj4225] = Event{}
				} else {
					yyv4228 := &yyv4225[yyj4225]
					yyv4228.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4225 < len(yyv4225) {
			yyv4225 = yyv4225[:yyj4225]
			yyc4225 = true
		} else if yyj4225 == 0 && yyv4225 == nil {
			yyv4225 = []Event{}
			yyc4225 = true
		}
	}
	yyh4225.End()
	if yyc4225 {
		*v = yyv4225
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4229 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4229 == nil {
			r.EncodeNil()
		} else {
			yym4230 := z.EncBinary()
			_ = yym4230
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4229) {
			} else {
				z.EncFallback(yyv4229)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4231 := *v
	yyh4231, yyl4231 := z.DecSliceHelperStart()
	var yyc4231 bool
	if yyl4231 == 0 {
		if yyv4231 == nil {
			yyv4231 = []pkg8_runtime.Object{}
			yyc4231 = true
		} else if len(yyv4231) != 0 {
			yyv4231 = yyv4231[:0]
			yyc4231 = true
		}
	} else if yyl4231 > 0 {
		var yyrr4231, yyrl4231 int
		var yyrt4231 bool
		if yyl4231 > cap(yyv4231) {

			yyrg4231 := len(yyv4231) > 0
			yyv24231 := yyv4231
			yyrl4231, yyrt4231 = z.DecInferLen(yyl4231, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4231 {
				if yyrl4231 <= cap(yyv4231) {
					yyv4231 = yyv4231[:yyrl4231]
				} else {
					yyv4231 = make([]pkg8_runtime.Object, yyrl4231)
				}
			} else {
				yyv4231 = make([]pkg8_runtime.Object, yyrl4231)
			}
			yyc4231 = true
			yyrr4231 = len(yyv4231)
			if yyrg4231 {
				copy(yyv4231, yyv24231)
			}
		} else if yyl4231 != len(yyv4231) {
			yyv4231 = yyv4231[:yyl4231]
			yyc4231 = true
		}
		yyj4231 := 0
		for ; yyj4231 < yyrr4231; yyj4231++ {
			yyh4231.ElemContainerState(yyj4231)
			if r.TryDecodeAsNil() {
				yyv4231[yyj4231] = nil
			} else {
				yyv4232 := &yyv4231[yyj4231]
				yym4233 := z.DecBinary()
				_ = yym4233
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4232) {
				} else {
					z.DecFallback(yyv4232, true)
				}
			}

		}
		if yyrt4231 {
			for ; yyj4231 < yyl4231; yyj4231++ {
				yyv4231 = append(yyv4231, nil)
				yyh4231.ElemContainerState(yyj4231)
				if r.TryDecodeAsNil() {
					yyv4231[yyj4231] = nil
				} else {
					yyv4234 := &yyv4231[yyj4231]
					yym4235 := z.DecBinary()
					_ = yym4235
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4234) {
					} else {
						z.DecFallback(yyv4234, true)
					}
				}

			}
		}

	} else {
		yyj4231 := 0
		for ; !r.CheckBreak(); yyj4231++ {

			if yyj4231 >= len(yyv4231) {
				yyv4231 = append(yyv4231, nil) // var yyz4231 pkg8_runtime.Object
				yyc4231 = true
			}
			yyh4231.ElemContainerState(yyj4231)
			if yyj4231 < len(yyv4231) {
				if r.TryDecodeAsNil() {
					yyv4231[yyj4231] = nil
				} else {
					yyv4236 := &yyv4231[yyj4231]
					yym4237 := z.DecBinary()
					_ = yym4237
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4236) {
					} else {
						z.DecFallback(yyv4236, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4231 < len(yyv4231) {
			yyv4231 = yyv4231[:yyj4231]
			yyc4231 = true
		} else if yyj4231 == 0 && yyv4231 == nil {
			yyv4231 = []pkg8_runtime.Object{}
			yyc4231 = true
		}
	}
	yyh4231.End()
	if yyc4231 {
		*v = yyv4231
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4238 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4239 := &yyv4238
		yy4239.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4240 := *v
	yyh4240, yyl4240 := z.DecSliceHelperStart()
	var yyc4240 bool
	if yyl4240 == 0 {
		if yyv4240 == nil {
			yyv4240 = []LimitRangeItem{}
			yyc4240 = true
		} else if len(yyv4240) != 0 {
			yyv4240 = yyv4240[:0]
			yyc4240 = true
		}
	} else if yyl4240 > 0 {
		var yyrr4240, yyrl4240 int
		var yyrt4240 bool
		if yyl4240 > cap(yyv4240) {

			yyrg4240 := len(yyv4240) > 0
			yyv24240 := yyv4240
			yyrl4240, yyrt4240 = z.DecInferLen(yyl4240, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4240 {
				if yyrl4240 <= cap(yyv4240) {
					yyv4240 = yyv4240[:yyrl4240]
				} else {
					yyv4240 = make([]LimitRangeItem, yyrl4240)
				}
			} else {
				yyv4240 = make([]LimitRangeItem, yyrl4240)
			}
			yyc4240 = true
			yyrr4240 = len(yyv4240)
			if yyrg4240 {
				copy(yyv4240, yyv24240)
			}
		} else if yyl4240 != len(yyv4240) {
			yyv4240 = yyv4240[:yyl4240]
			yyc4240 = true
		}
		yyj4240 := 0
		for ; yyj4240 < yyrr4240; yyj4240++ {
			yyh4240.ElemContainerState(yyj4240)
			if r.TryDecodeAsNil() {
				yyv4240[yyj4240] = LimitRangeItem{}
			} else {
				yyv4241 := &yyv4240[yyj4240]
				yyv4241.CodecDecodeSelf(d)
			}

		}
		if yyrt4240 {
			for ; yyj4240 < yyl4240; yyj4240++ {
				yyv4240 = append(yyv4240, LimitRangeItem{})
				yyh4240.ElemContainerState(yyj4240)
				if r.TryDecodeAsNil() {
					yyv4240[yyj4240] = LimitRangeItem{}
				} else {
					yyv4242 := &yyv4240[yyj4240]
					yyv4242.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4240 := 0
		for ; !r.CheckBreak(); yyj4240++ {

			if yyj4240 >= len(yyv4240) {
				yyv4240 = append(yyv4240, LimitRangeItem{}) // var yyz4240 LimitRangeItem
				yyc4240 = true
			}
			yyh4240.ElemContainerState(yyj4240)
			if yyj4240 < len(yyv4240) {
				if r.TryDecodeAsNil() {
					yyv4240[yyj4240] = LimitRangeItem{}
				} else {
					yyv4243 := &yyv4240[yyj4240]
					yyv4243.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4240 < len(yyv4240) {
			yyv4240 = yyv4240[:yyj4240]
			yyc4240 = true
		} else if yyj4240 == 0 && yyv4240 == nil {
			yyv4240 = []LimitRangeItem{}
			yyc4240 = true
		}
	}
	yyh4240.End()
	if yyc4240 {
		*v = yyv4240
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4244 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4245 := &yyv4244
		yy4245.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4246 := *v
	yyh4246, yyl4246 := z.DecSliceHelperStart()
	var yyc4246 bool
	if yyl4246 == 0 {
		if yyv4246 == nil {
			yyv4246 = []LimitRange{}
			yyc4246 = true
		} else if len(yyv4246) != 0 {
			yyv4246 = yyv4246[:0]
			yyc4246 = true
		}
	} else if yyl4246 > 0 {
		var yyrr4246, yyrl4246 int
		var yyrt4246 bool
		if yyl4246 > cap(yyv4246) {

			yyrg4246 := len(yyv4246) > 0
			yyv24246 := yyv4246
			yyrl4246, yyrt4246 = z.DecInferLen(yyl4246, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4246 {
				if yyrl4246 <= cap(yyv4246) {
					yyv4246 = yyv4246[:yyrl4246]
				} else {
					yyv4246 = make([]LimitRange, yyrl4246)
				}
			} else {
				yyv4246 = make([]LimitRange, yyrl4246)
			}
			yyc4246 = true
			yyrr4246 = len(yyv4246)
			if yyrg4246 {
				copy(yyv4246, yyv24246)
			}
		} else if yyl4246 != len(yyv4246) {
			yyv4246 = yyv4246[:yyl4246]
			yyc4246 = true
		}
		yyj4246 := 0
		for ; yyj4246 < yyrr4246; yyj4246++ {
			yyh4246.ElemContainerState(yyj4246)
			if r.TryDecodeAsNil() {
				yyv4246[yyj4246] = LimitRange{}
			} else {
				yyv4247 := &yyv4246[yyj4246]
				yyv4247.CodecDecodeSelf(d)
			}

		}
		if yyrt4246 {
			for ; yyj4246 < yyl4246; yyj4246++ {
				yyv4246 = append(yyv4246, LimitRange{})
				yyh4246.ElemContainerState(yyj4246)
				if r.TryDecodeAsNil() {
					yyv4246[yyj4246] = LimitRange{}
				} else {
					yyv4248 := &yyv4246[yyj4246]
					yyv4248.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4246 := 0
		for ; !r.CheckBreak(); yyj4246++ {

			if yyj4246 >= len(yyv4246) {
				yyv4246 = append(yyv4246, LimitRange{}) // var yyz4246 LimitRange
				yyc4246 = true
			}
			yyh4246.ElemContainerState(yyj4246)
			if yyj4246 < len(yyv4246) {
				if r.TryDecodeAsNil() {
					yyv4246[yyj4246] = LimitRange{}
				} else {
					yyv4249 := &yyv4246[yyj4246]
					yyv4249.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4246 < len(yyv4246) {
			yyv4246 = yyv4246[:yyj4246]
			yyc4246 = true
		} else if yyj4246 == 0 && yyv4246 == nil {
			yyv4246 = []LimitRange{}
			yyc4246 = true
		}
	}
	yyh4246.End()
	if yyc4246 {
		*v = yyv4246
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4250 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4251 := &yyv4250
		yy4251.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4252 := *v
	yyh4252, yyl4252 := z.DecSliceHelperStart()
	var yyc4252 bool
	if yyl4252 == 0 {
		if yyv4252 == nil {
			yyv4252 = []ResourceQuota{}
			yyc4252 = true
		} else if len(yyv4252) != 0 {
			yyv4252 = yyv4252[:0]
			yyc4252 = true
		}
	} else if yyl4252 > 0 {
		var yyrr4252, yyrl4252 int
		var yyrt4252 bool
		if yyl4252 > cap(yyv4252) {

			yyrg4252 := len(yyv4252) > 0
			yyv24252 := yyv4252
			yyrl4252, yyrt4252 = z.DecInferLen(yyl4252, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4252 {
				if yyrl4252 <= cap(yyv4252) {
					yyv4252 = yyv4252[:yyrl4252]
				} else {
					yyv4252 = make([]ResourceQuota, yyrl4252)
				}
			} else {
				yyv4252 = make([]ResourceQuota, yyrl4252)
			}
			yyc4252 = true
			yyrr4252 = len(yyv4252)
			if yyrg4252 {
				copy(yyv4252, yyv24252)
			}
		} else if yyl4252 != len(yyv4252) {
			yyv4252 = yyv4252[:yyl4252]
			yyc4252 = true
		}
		yyj4252 := 0
		for ; yyj4252 < yyrr4252; yyj4252++ {
			yyh4252.ElemContainerState(yyj4252)
			if r.TryDecodeAsNil() {
				yyv4252[yyj4252] = ResourceQuota{}
			} else {
				yyv4253 := &yyv4252[yyj4252]
				yyv4253.CodecDecodeSelf(d)
			}

		}
		if yyrt4252 {
			for ; yyj4252 < yyl4252; yyj4252++ {
				yyv4252 = append(yyv4252, ResourceQuota{})
				yyh4252.ElemContainerState(yyj4252)
				if r.TryDecodeAsNil() {
					yyv4252[yyj4252] = ResourceQuota{}
				} else {
					yyv4254 := &yyv4252[yyj4252]
					yyv4254.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4252 := 0
		for ; !r.CheckBreak(); yyj4252++ {

			if yyj4252 >= len(yyv4252) {
				yyv4252 = append(yyv4252, ResourceQuota{}) // var yyz4252 ResourceQuota
				yyc4252 = true
			}
			yyh4252.ElemContainerState(yyj4252)
			if yyj4252 < len(yyv4252) {
				if r.TryDecodeAsNil() {
					yyv4252[yyj4252] = ResourceQuota{}
				} else {
					yyv4255 := &yyv4252[yyj4252]
					yyv4255.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4252 < len(yyv4252) {
			yyv4252 = yyv4252[:yyj4252]
			yyc4252 = true
		} else if yyj4252 == 0 && yyv4252 == nil {
			yyv4252 = []ResourceQuota{}
			yyc4252 = true
		}
	}
	yyh4252.End()
	if yyc4252 {
		*v = yyv4252
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4256, yyv4256 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4257 := z.EncBinary()
		_ = yym4257
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4256))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4256 == nil {
			r.EncodeNil()
		} else {
			yym4258 := z.EncBinary()
			_ = yym4258
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4256))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4259 := *v
	yyl4259 := r.ReadMapStart()
	yybh4259 := z.DecBasicHandle()
	if yyv4259 == nil {
		yyrl4259, _ := z.DecInferLen(yyl4259, yybh4259.MaxInitLen, 40)
		yyv4259 = make(map[string][]uint8, yyrl4259)
		*v = yyv4259
	}
	var yymk4259 string
	var yymv4259 []uint8
	var yymg4259 bool
	if yybh4259.MapValueReset {
		yymg4259 = true
	}
	if yyl4259 > 0 {
		for yyj4259 := 0; yyj4259 < yyl4259; yyj4259++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4259 = ""
			} else {
				yymk4259 = string(r.DecodeString())
			}

			if yymg4259 {
				yymv4259 = yyv4259[yymk4259]
			} else {
				yymv4259 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4259 = nil
			} else {
				yyv4261 := &yymv4259
				yym4262 := z.DecBinary()
				_ = yym4262
				if false {
				} else {
					*yyv4261 = r.DecodeBytes(*(*[]byte)(yyv4261), false, false)
				}
			}

			if yyv4259 != nil {
				yyv4259[yymk4259] = yymv4259
			}
		}
	} else if yyl4259 < 0 {
		for yyj4259 := 0; !r.CheckBreak(); yyj4259++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4259 = ""
			} else {
				yymk4259 = string(r.DecodeString())
			}

			if yymg4259 {
				yymv4259 = yyv4259[yymk4259]
			} else {
				yymv4259 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4259 = nil
			} else {
				yyv4264 := &yymv4259
				yym4265 := z.DecBinary()
				_ = yym4265
				if false {
				} else {
					*yyv4264 = r.DecodeBytes(*(*[]byte)(yyv4264), false, false)
				}
			}

			if yyv4259 != nil {
				yyv4259[yymk4259] = yymv4259
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4266 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4267 := &yyv4266
		yy4267.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4268 := *v
	yyh4268, yyl4268 := z.DecSliceHelperStart()
	var yyc4268 bool
	if yyl4268 == 0 {
		if yyv4268 == nil {
			yyv4268 = []Secret{}
			yyc4268 = true
		} else if len(yyv4268) != 0 {
			yyv4268 = yyv4268[:0]
			yyc4268 = true
		}
	} else if yyl4268 > 0 {
		var yyrr4268, yyrl4268 int
		var yyrt4268 bool
		if yyl4268 > cap(yyv4268) {

			yyrg4268 := len(yyv4268) > 0
			yyv24268 := yyv4268
			yyrl4268, yyrt4268 = z.DecInferLen(yyl4268, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4268 {
				if yyrl4268 <= cap(yyv4268) {
					yyv4268 = yyv4268[:yyrl4268]
				} else {
					yyv4268 = make([]Secret, yyrl4268)
				}
			} else {
				yyv4268 = make([]Secret, yyrl4268)
			}
			yyc4268 = true
			yyrr4268 = len(yyv4268)
			if yyrg4268 {
				copy(yyv4268, yyv24268)
			}
		} else if yyl4268 != len(yyv4268) {
			yyv4268 = yyv4268[:yyl4268]
			yyc4268 = true
		}
		yyj4268 := 0
		for ; yyj4268 < yyrr4268; yyj4268++ {
			yyh4268.ElemContainerState(yyj4268)
			if r.TryDecodeAsNil() {
				yyv4268[yyj4268] = Secret{}
			} else {
				yyv4269 := &yyv4268[yyj4268]
				yyv4269.CodecDecodeSelf(d)
			}

		}
		if yyrt4268 {
			for ; yyj4268 < yyl4268; yyj4268++ {
				yyv4268 = append(yyv4268, Secret{})
				yyh4268.ElemContainerState(yyj4268)
				if r.TryDecodeAsNil() {
					yyv4268[yyj4268] = Secret{}
				} else {
					yyv4270 := &yyv4268[yyj4268]
					yyv4270.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4268 := 0
		for ; !r.CheckBreak(); yyj4268++ {

			if yyj4268 >= len(yyv4268) {
				yyv4268 = append(yyv4268, Secret{}) // var yyz4268 Secret
				yyc4268 = true
			}
			yyh4268.ElemContainerState(yyj4268)
			if yyj4268 < len(yyv4268) {
				if r.TryDecodeAsNil() {
					yyv4268[yyj4268] = Secret{}
				} else {
					yyv4271 := &yyv4268[yyj4268]
					yyv4271.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4268 < len(yyv4268) {
			yyv4268 = yyv4268[:yyj4268]
			yyc4268 = true
		} else if yyj4268 == 0 && yyv4268 == nil {
			yyv4268 = []Secret{}
			yyc4268 = true
		}
	}
	yyh4268.End()
	if yyc4268 {
		*v = yyv4268
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4272 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4273 := &yyv4272
		yy4273.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4274 := *v
	yyh4274, yyl4274 := z.DecSliceHelperStart()
	var yyc4274 bool
	if yyl4274 == 0 {
		if yyv4274 == nil {
			yyv4274 = []ConfigMap{}
			yyc4274 = true
		} else if len(yyv4274) != 0 {
			yyv4274 = yyv4274[:0]
			yyc4274 = true
		}
	} else if yyl4274 > 0 {
		var yyrr4274, yyrl4274 int
		var yyrt4274 bool
		if yyl4274 > cap(yyv4274) {

			yyrg4274 := len(yyv4274) > 0
			yyv24274 := yyv4274
			yyrl4274, yyrt4274 = z.DecInferLen(yyl4274, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt4274 {
				if yyrl4274 <= cap(yyv4274) {
					yyv4274 = yyv4274[:yyrl4274]
				} else {
					yyv4274 = make([]ConfigMap, yyrl4274)
				}
			} else {
				yyv4274 = make([]ConfigMap, yyrl4274)
			}
			yyc4274 = true
			yyrr4274 = len(yyv4274)
			if yyrg4274 {
				copy(yyv4274, yyv24274)
			}
		} else if yyl4274 != len(yyv4274) {
			yyv4274 = yyv4274[:yyl4274]
			yyc4274 = true
		}
		yyj4274 := 0
		for ; yyj4274 < yyrr4274; yyj4274++ {
			yyh4274.ElemContainerState(yyj4274)
			if r.TryDecodeAsNil() {
				yyv4274[yyj4274] = ConfigMap{}
			} else {
				yyv4275 := &yyv4274[yyj4274]
				yyv4275.CodecDecodeSelf(d)
			}

		}
		if yyrt4274 {
			for ; yyj4274 < yyl4274; yyj4274++ {
				yyv4274 = append(yyv4274, ConfigMap{})
				yyh4274.ElemContainerState(yyj4274)
				if r.TryDecodeAsNil() {
					yyv4274[yyj4274] = ConfigMap{}
				} else {
					yyv4276 := &yyv4274[yyj4274]
					yyv4276.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4274 := 0
		for ; !r.CheckBreak(); yyj4274++ {

			if yyj4274 >= len(yyv4274) {
				yyv4274 = append(yyv4274, ConfigMap{}) // var yyz4274 ConfigMap
				yyc4274 = true
			}
			yyh4274.ElemContainerState(yyj4274)
			if yyj4274 < len(yyv4274) {
				if r.TryDecodeAsNil() {
					yyv4274[yyj4274] = ConfigMap{}
				} else {
					yyv4277 := &yyv4274[yyj4274]
					yyv4277.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4274 < len(yyv4274) {
			yyv4274 = yyv4274[:yyj4274]
			yyc4274 = true
		} else if yyj4274 == 0 && yyv4274 == nil {
			yyv4274 = []ConfigMap{}
			yyc4274 = true
		}
	}
	yyh4274.End()
	if yyc4274 {
		*v = yyv4274
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4278 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4279 := &yyv4278
		yy4279.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4280 := *v
	yyh4280, yyl4280 := z.DecSliceHelperStart()
	var yyc4280 bool
	if yyl4280 == 0 {
		if yyv4280 == nil {
			yyv4280 = []ComponentCondition{}
			yyc4280 = true
		} else if len(yyv4280) != 0 {
			yyv4280 = yyv4280[:0]
			yyc4280 = true
		}
	} else if yyl4280 > 0 {
		var yyrr4280, yyrl4280 int
		var yyrt4280 bool
		if yyl4280 > cap(yyv4280) {

			yyrg4280 := len(yyv4280) > 0
			yyv24280 := yyv4280
			yyrl4280, yyrt4280 = z.DecInferLen(yyl4280, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4280 {
				if yyrl4280 <= cap(yyv4280) {
					yyv4280 = yyv4280[:yyrl4280]
				} else {
					yyv4280 = make([]ComponentCondition, yyrl4280)
				}
			} else {
				yyv4280 = make([]ComponentCondition, yyrl4280)
			}
			yyc4280 = true
			yyrr4280 = len(yyv4280)
			if yyrg4280 {
				copy(yyv4280, yyv24280)
			}
		} else if yyl4280 != len(yyv4280) {
			yyv4280 = yyv4280[:yyl4280]
			yyc4280 = true
		}
		yyj4280 := 0
		for ; yyj4280 < yyrr4280; yyj4280++ {
			yyh4280.ElemContainerState(yyj4280)
			if r.TryDecodeAsNil() {
				yyv4280[yyj4280] = ComponentCondition{}
			} else {
				yyv4281 := &yyv4280[yyj4280]
				yyv4281.CodecDecodeSelf(d)
			}

		}
		if yyrt4280 {
			for ; yyj4280 < yyl4280; yyj4280++ {
				yyv4280 = append(yyv4280, ComponentCondition{})
				yyh4280.ElemContainerState(yyj4280)
				if r.TryDecodeAsNil() {
					yyv4280[yyj4280] = ComponentCondition{}
				} else {
					yyv4282 := &yyv4280[yyj4280]
					yyv4282.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4280 := 0
		for ; !r.CheckBreak(); yyj4280++ {

			if yyj4280 >= len(yyv4280) {
				yyv4280 = append(yyv4280, ComponentCondition{}) // var yyz4280 ComponentCondition
				yyc4280 = true
			}
			yyh4280.ElemContainerState(yyj4280)
			if yyj4280 < len(yyv4280) {
				if r.TryDecodeAsNil() {
					yyv4280[yyj4280] = ComponentCondition{}
				} else {
					yyv4283 := &yyv4280[yyj4280]
					yyv4283.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4280 < len(yyv4280) {
			yyv4280 = yyv4280[:yyj4280]
			yyc4280 = true
		} else if yyj4280 == 0 && yyv4280 == nil {
			yyv4280 = []ComponentCondition{}
			yyc4280 = true
		}
	}
	yyh4280.End()
	if yyc4280 {
		*v = yyv4280
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4284 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4285 := &yyv4284
		yy4285.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4286 := *v
	yyh4286, yyl4286 := z.DecSliceHelperStart()
	var yyc4286 bool
	if yyl4286 == 0 {
		if yyv4286 == nil {
			yyv4286 = []ComponentStatus{}
			yyc4286 = true
		} else if len(yyv4286) != 0 {
			yyv4286 = yyv4286[:0]
			yyc4286 = true
		}
	} else if yyl4286 > 0 {
		var yyrr4286, yyrl4286 int
		var yyrt4286 bool
		if yyl4286 > cap(yyv4286) {

			yyrg4286 := len(yyv4286) > 0
			yyv24286 := yyv4286
			yyrl4286, yyrt4286 = z.DecInferLen(yyl4286, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4286 {
				if yyrl4286 <= cap(yyv4286) {
					yyv4286 = yyv4286[:yyrl4286]
				} else {
					yyv4286 = make([]ComponentStatus, yyrl4286)
				}
			} else {
				yyv4286 = make([]ComponentStatus, yyrl4286)
			}
			yyc4286 = true
			yyrr4286 = len(yyv4286)
			if yyrg4286 {
				copy(yyv4286, yyv24286)
			}
		} else if yyl4286 != len(yyv4286) {
			yyv4286 = yyv4286[:yyl4286]
			yyc4286 = true
		}
		yyj4286 := 0
		for ; yyj4286 < yyrr4286; yyj4286++ {
			yyh4286.ElemContainerState(yyj4286)
			if r.TryDecodeAsNil() {
				yyv4286[yyj4286] = ComponentStatus{}
			} else {
				yyv4287 := &yyv4286[yyj4286]
				yyv4287.CodecDecodeSelf(d)
			}

		}
		if yyrt4286 {
			for ; yyj4286 < yyl4286; yyj4286++ {
				yyv4286 = append(yyv4286, ComponentStatus{})
				yyh4286.ElemContainerState(yyj4286)
				if r.TryDecodeAsNil() {
					yyv4286[yyj4286] = ComponentStatus{}
				} else {
					yyv4288 := &yyv4286[yyj4286]
					yyv4288.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4286 := 0
		for ; !r.CheckBreak(); yyj4286++ {

			if yyj4286 >= len(yyv4286) {
				yyv4286 = append(yyv4286, ComponentStatus{}) // var yyz4286 ComponentStatus
				yyc4286 = true
			}
			yyh4286.ElemContainerState(yyj4286)
			if yyj4286 < len(yyv4286) {
				if r.TryDecodeAsNil() {
					yyv4286[yyj4286] = ComponentStatus{}
				} else {
					yyv4289 := &yyv4286[yyj4286]
					yyv4289.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4286 < len(yyv4286) {
			yyv4286 = yyv4286[:yyj4286]
			yyc4286 = true
		} else if yyj4286 == 0 && yyv4286 == nil {
			yyv4286 = []ComponentStatus{}
			yyc4286 = true
		}
	}
	yyh4286.End()
	if yyc4286 {
		*v = yyv4286
	}
}
